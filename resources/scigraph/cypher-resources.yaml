cypherResources:
  - path: /dynamic/prod/sparc/anatomyPhenotypes/{id}
    operations: &anatomyPhenotypes-ops
      - summary: Return phenotypes that inhere in some part of an anatomical entity.
        parameters:
          - name: id
            description: uberon id of the anatomical entity to search from
            paramType: path
    query: &anatomyPhenotypes |
      MATCH (anatomical_entity:Class{iri: $id})
      <-[part_of:subClassOf|BFO:0000050|RO:0002433*0..40]-(subclass_part_ctmo)
      <-[inheres_in:RO:0000052|RO:0002314!]-(intersection_of_quality_and_anatomy) // inheres in (anon intersection of)
      <-[has_process_part:BFO:0000051]-() // has part (process)
      <-[:subClassOf*0..]-(phenotype) // phenotype and all subclasses

      WHERE
      // filter out partOf/hasPart cases that induce circularity
      ALL(e IN part_of WHERE NOT EXISTS(e.owlType) OR e.owlType = "subClassOf" OR e.owlType = "operand")
      RETURN phenotype

  - path: /dynamic/test/sparc/anatomyPhenotypes/{id}
    operations: *anatomyPhenotypes-ops
    query: *anatomyPhenotypes

  - path: /dynamic/prod/sparc/organParts/{id}
    operations: &organParts-ops
      - summary: Get the parts list for an organ including nerves and blood vessels
        parameters:
         - name: id
           description: ontology id of the organ
           paramType: path
    query: &organParts |
      // depth of 6 captures everything, 5 is too shallow, 40 is WAY too deep
      MATCH path = (start:Class{iri: "${id}"})
      <-[:subClassOf|ilxtr:includedForSPARCUnder|fma:regional_part_of|fma:constitutional_part_of|fma:related_part_of*0..6]-(part)
      <-[:fma:arterial_supply_of|fma:nerve_supply_of|fma:venous_drainage_of|fma:continuous_with*0..1]-(sup)
      <-[:subClassOf|fma:constitutional_part_of|fma:branch|fma:tributary|fma:branch_of*0..1]-(a_bit_more)
      RETURN path
      UNION  // for this query UNION seems to be MUCH faster than using WITH
      MATCH path = (start:Class{iri: "${id}"})
      // this one does not need to be inverted ? except for the INCOMING flag
      <-[:fma:arterial_supply_of|fma:venous_drainage_of]-(vessel)
      <-[:fma:branch|fma:tributary]-(more_vessel)
      <-[:fma:branch|fma:tributary|fma:regional_part]-(even_more_vessel)
      RETURN path

  - path: /dynamic/test/sparc/organParts/{id}
    operations: *organParts-ops
    query: *organParts

  - path: /dynamic/prod/sparc/parcellationArtifacts
    operations:
      - summary: Get the graph of all parcellation artifacts for all species
    query: |
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/prod/sparc/parcellationArtifacts/{species-id}
    operations:
      - summary: Get the graph of all parcellation artifacts for a single species
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
    query: |
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species:Class{iri: "${species-id}"})
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/prod/sparc/artifactRoots/{artifact-id}
    operations:
      - summary: Get the graph of all parcellation label roots for a single artifact WARNING this can return no results
        parameters:
         - name: artifact-id
           description: ontology id of the parcellation artifact
           paramType: path
    query: |
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(a)<-[:subClassOf*0..2]
      -(artifact:Class{iri: "${artifact-id}"})
      RETURN path

  - path: /dynamic/prod/sparc/artifactLabels/{artifact-id}
    operations:
      - summary: Get the graph of all parcellation labels for a single artifact WARNING this can return no results
        parameters:
         - name: artifact-id
           description: ontology id of the parcellation artifact
           paramType: path
    query: |
      MATCH path = (label)
      -[:subClassOf]->(root)
      -[:ilxtr:isDefinedBy]->(a)<-[:subClassOf*0..2]
      -(artifact:Class{iri: "${artifact-id}"})
      WHERE label.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/prod/sparc/rootLabels/{root-id}
    operations: &rootLabes-ops
      - summary: Get the list of all parcellation labels for a single label root
        parameters:
         - name: root-id
           description: ontology id of the parcellation label root
           paramType: path
    query: &rootLabels |
      MATCH (label)-[:subClassOf]->(root:Class{iri: "${root-id}"})
      , path = (label)-[relation*0..1]-(maybe)
      WHERE NONE (r in relation WHERE type(r) IN ["isDefinedBy", "subClassOf", "filler"])
            AND NOT (label.iri =~ ".*_:.*") AND NOT (maybe.iri =~ ".*_:.*")
            AND label.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/test/sparc/rootLabels/{root-id}
    operations: *rootLabes-ops
    query: *rootLabels

  - path: /dynamic/prod/sparc/parcellationRoots
    operations:
      - summary: Get the graph of all parcellation label roots for all species
    query: |
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path
      UNION
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      RETURN path

  - path: /dynamic/prod/sparc/parcellationRoots/{species-id}
    operations:
      - summary: Get the graph of all parcellation label roots for a single species
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
    query: |
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species:Class{iri: "${species-id}"})
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      return path
      UNION
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species:Class{iri: "${species-id}"})
      RETURN path

  - path: /dynamic/prod/sparc/parcellationRoots/{species-id}/{region-id}
    operations:
      - summary: Get the graph of all parcellation label roots for a single species and anatomical region
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
         - name: region-id
           description: ontology id of the anatomical region
           paramType: path
    query: |
      MATCH
      (region:Class{iri: "${region-id}"})
      <-[:ilxtr:isDefinedInRegion]-
      (parent)
      -[:ilxtr:isDefinedInTaxon]->
      (species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path
      UNION
      MATCH
      (region:Class{iri: "${region-id}"})
      <-[:ilxtr:isDefinedInRegion]-
      (parent)
      -[:ilxtr:isDefinedInTaxon]->
      (species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      RETURN path

  - path: /dynamic/prod/sparc/parcellationRootsFMA/{species-id}/{fma-id}
    operations: &parcellationRootsFMA-ops
      - summary: Get the graph of all parcellation label roots for a single species and anatomical region
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
         - name: fma-id
           description: ontology id of the anatomical region
           paramType: path
    query: &parcellationRootsFMA |
      MATCH (fma:Class{iri: "${fma-id}"})
      WITH "FMA:" + toString(fma.`http://purl.org/sig/ont/fma/FMAID`) AS curie
      MATCH (region)
      -[:subClassOf*]->(start:Class{iri: "http://purl.obolibrary.org/obo/UBERON_0001062"})
      WHERE any(x IN
                region.`http://www.geneontology.org/formats/oboInOwl#hasDbXref`
                WHERE x =~ curie)
      WITH region
      MATCH
      (region)
      <-[:ilxtr:isDefinedInRegion]-
      (parent)
      -[:ilxtr:isDefinedInTaxon]->
      (species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path
      UNION
      MATCH (fma:Class{iri: "${fma-id}"})
      WITH "FMA:" + toString(fma.`http://purl.org/sig/ont/fma/FMAID`) AS curie
      MATCH (region)
      -[:subClassOf*]->(start:Class{iri: "http://purl.obolibrary.org/obo/UBERON_0001062"})
      WHERE any(x IN
                region.`http://www.geneontology.org/formats/oboInOwl#hasDbXref`
                WHERE x =~ curie)
      WITH region
      MATCH
      (region)
      <-[:ilxtr:isDefinedInRegion]-
      (parent)
      -[:ilxtr:isDefinedInTaxon]->
      (species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      RETURN path

  - path: /dynamic/test/sparc/parcellationRootsFMA/{species-id}/{fma-id}
    operations: *parcellationRootsFMA-ops
    query: *parcellationRootsFMA

  - path: /dynamic/prod/sparc/parcellationGraph
    operations:
      - summary: Get the graph of all parcellation labels for all species
    query: |
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      return path
      UNION
      MATCH path = (maybe)
      -[relation*0..1]-(label)
      -[:subClassOf]->(root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      WHERE NONE (r in relation WHERE type(r) IN ["isDefinedBy", "subClassOf", "filler"])
            AND NOT (label.iri =~ ".*_:.*") AND NOT (maybe.iri =~ ".*_:.*")
            AND label.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/prod/sparc/organList
    operations: &organList-ops
      - summary: Get the list of all FMA organ identifiers relevant to SPARC
    query: &organList |
      MATCH (n)
      WHERE n.iri IN [
              "http://purl.org/sig/ont/fma/fma7195",  // lung
              "http://purl.org/sig/ont/fma/fma7088",  // heart
              "http://purl.org/sig/ont/fma/fma7197",  // liver
              "http://purl.org/sig/ont/fma/fma7198",  // pancreas
              "http://purl.org/sig/ont/fma/fma7203",  // kidney
              "http://purl.org/sig/ont/fma/fma7148",  // stomach
              "http://purl.org/sig/ont/fma/fma7196",  // spleen
              "http://purl.org/sig/ont/fma/fma14543", // colon
              "http://purl.org/sig/ont/fma/fma7201",  // large intestine
              "http://purl.org/sig/ont/fma/fma7200",  // small intestine
              "http://purl.org/sig/ont/fma/fma7199",  // intestine
              "http://purl.org/sig/ont/fma/fma15900", // urinary bladder
              "http://purl.org/sig/ont/fma/fma45659", // lower urinary tract
              "http://purl.org/sig/ont/fma/fma7157",  // nervous system
              "http://purl.org/sig/ont/fma/fma9903",  // peripheral nervous system
              "http://purl.org/sig/ont/fma/fma9906",  // sympathetic nervous system
              "http://purl.org/sig/ont/fma/fma7647",  // spinal cord
              "http://purl.org/sig/ont/fma/fma50801", // brain
              "http://purl.org/sig/ont/fma/fma5889",  // autonomic ganglion
              "http://purl.org/sig/ont/fma/fma19667", // urethra
              "http://purl.org/sig/ont/fma/fma7131"   // esophagus
              ]
      RETURN n

  - path: /dynamic/test/sparc/organList
    operations: *organList-ops
    query: *organList

  - path: /dynamic/prod/sparc/speciesList
    operations: &speciesList-ops
      - summary: Get the list of all NCBITaxon species identifiers relevant to SPARC
    query: &speciesList |
      MATCH (n)
      WHERE n.iri IN [
              "http://purl.obolibrary.org/obo/NCBITaxon_9378",   // Suncus murinus
              "http://purl.obolibrary.org/obo/NCBITaxon_9606",   // Homo sapiens
              "http://purl.obolibrary.org/obo/NCBITaxon_9685",   // Felis catus
              "http://purl.obolibrary.org/obo/NCBITaxon_9823",   // Sus scrofa
              "http://purl.obolibrary.org/obo/NCBITaxon_10090",  // Mus musculus
              "http://purl.obolibrary.org/obo/NCBITaxon_10116"   // Rattus norvegicus
              ]
      RETURN n

  - path: /dynamic/test/sparc/speciesList
    operations: *speciesList-ops
    query: *speciesList

  - path: /dynamic/shortestSimple
    query: |
      MATCH (start:Class{iri: '${start_id}'})
      WITH start
      MATCH (end:Class{iri: '${end_id}'})
      WITH start, end
      MATCH path = shortestPath((start)-[:${relationship}*..${max_depth}]->(end))
      RETURN path
    operations:
      - summary: Get the shortest path between two IDs
        parameters:
          - name: start_id
            description: The starting node (ex UBERON:0005751)
            paramType: query
          - name: end_id
            description: The ending node (ex UBERON:0001255)
            paramType: query
          - name: max_depth
            description: the maximum depth to traverse
            paramType: query
          - name: relationship
            description: The property to traverse (ex subClassOf or subClassOf|partOf|isA)
            paramType: query
            required: false

  - path: /dynamic/neurons/connectivity
    query: |
      MATCH (blank)-
      [entrytype:ilxtr:hasSomaLocatedIn|ilxtr:hasAxonLocatedIn|ilxtr:hasDendriteLocatedIn|ilxtr:hasPresynapticTerminalsIn]
      ->(location:Class{iri: '${start_id}'})
      WITH location, entrytype, blank
      MATCH (phenotype)<-[predicate]-(blank)<-[:equivalentClass]-(neuron)
      WHERE NOT (phenotype.iri =~ ".*_:.*")
      // RETURN phenotype, (phenotype)-[predicate]-(neuron) as e
      // WITH location, predicate, phenotype, neuron
      RETURN location, entrytype, neuron, predicate, phenotype
    operations:
      - summary: Get connected anatomical regions by neuron type
        parameters:
          - name: start_id
            description: The starting location (eg UBERON:0001759)
            paramType: query

  - path: /dynamic/neurons/connectedRegions
    query: |
      MATCH (blank)-
      [entrytype:ilxtr:hasSomaLocatedIn|ilxtr:hasAxonLocatedIn|ilxtr:hasDendriteLocatedIn|ilxtr:hasPresynapticTerminalsIn]
      ->(location:Class{iri: '${start_id}'})
      WITH entrytype, blank
      MATCH (phenotype)<-[:${target_predicate}]-(blank)
      // WHERE NOT (phenotype.iri =~ ".*_:.*")
      RETURN phenotype
    operations:
      - summary: Get connected anatomical regions by starting location and target relationship
        parameters:
          - name: start_id
            description: The starting location (eg UBERON:0001759)
            paramType: query
          - name: target_predicate
            description: The predicate for the type of connectivity (eg ilxtr:hasPresynapticTerminalsIn)
            paramType: query
            required: false

  - path: /dynamic/demos/apinat/bundles/{start-id}
    operations:
      - summary: Return the paths to somas from an anatomical region (aka connected-somas)
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      MATCH path1 = (start:Class{iri: "${start-id}"})
      -[:apinatomy:annotates]->(start_housing)
      -[:apinatomy:subtypes*0..1]->()
      -[:apinatomy:clones*0..1]->(layer_or_end)
      -[:apinatomy:layers*0..1]->()
      -[:apinatomy:bundles]->(linkStart)
      -[:apinatomy:prevChainEndLevels|apinatomy:prev|apinatomy:source*1..]->(link)
      -[:apinatomy:targetOf|apinatomy:sourceOf]->(linkSoma)  // axon or dendrite root
      -[:apinatomy:conveyingLyph]->()
      -[:apinatomy:supertype*0..1]->(soma:NamedIndividual)
      -[:apinatomy:ontologyTerms]->(c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      WITH path1, link
      OPTIONAL MATCH path2 = (link)
      -[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
      -[:apinatomy:layerIn*0..1]->(end)
      -[:apinatomy:ontologyTerms]->(external)
      RETURN path1, path2

  - path: /dynamic/demos/apinat/old-bundles/{start-id}
    operations:
      - summary: Return the paths to somas from an anatomical region (aka connected-somas)
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      MATCH path1 = (start:Class{iri: '${start-id}'})
      -[:apinatomy:annotates]->(start_housing)
      -[:apinatomy:bundlesChains]->(chain)
      -[:apinatomy:root]->(root)
      -[:apinatomy:internalIn]->(layer_or_end)  # this hits a cycle back to start_housing
      -[:apinatomy:cloneOf*0..1]->()
      -[:apinatomy:supertype*0..1]->()
      -[:apinatomy:ontologyTerms]->(layer_or_end_external)
      WITH path1, root, layer_or_end AS layer
      OPTIONAL MATCH path2 = (layer)
      -[:apinatomy:layerIn]->(end_housing)
      -[:apinatomy:ontologyTerms]->(end_housing_external)
      WITH path1, path2, root
      MATCH path3 = (root) // in the layer case this hits an additional lyph
      <-[:apinatomy:target|apinatomy:source]-(link)
      <-[:apinatomy:conveys]-(soma)
      <-[:apinatomy:annotates]-(soma_NLX)
      RETURN path1, path2, path3

  - path: /dynamic/demos/apinat/somas
    operations:
      - summary: List all the somas for a given graph (TODO on the given graph)
    query: |
      MATCH (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)
      RETURN soma

  - path: /dynamic/demos/apinat/housing-lyphs
    operations:
      - summary: List all the housing lyphs (neuronal processes) for all starting points.
    query: |
      MATCH path = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)  // soma lyph
      -[:apinatomy:conveys]->(somaLink)                // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(root)    // axon or dendrite root
      -[:apinatomy:controlNodes|apinatomy:rootOf*1..2]->(chain)                    // axon or dendrite tree
      -[:apinatomy:housingLyphs]->(housing)            // list of lyphs housing the trees
      -[:apinatomy:ontologyTerms*0..1]->(external)          // external ids for the housing lyphs
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      RETURN path

  - path: /dynamic/demos/apinat/housing-lyphs/{start-id}
    operations:
      - summary: List all the housing lyphs for a starting point.
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)  // soma lyph
      -[:apinatomy:conveys]->(somaLink)                // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(root)    // axon or dendrite root
      -[:apinatomy:internalIn]->(layer_or_end)
      -[:apinatomy:cloneOf*0..1]->()
      -[:apinatomy:supertype*0..1]->()
      -[:apinatomy:ontologyTerms]->(layer_or_end_external:Class{iri: '${start-id}'})
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      WITH path1, root
      MATCH path2 = (root)
      -[:apinatomy:controlNodes|apinatomy:rootOf*1..2]->(chain)                    // axon or dendrite tree
      -[:apinatomy:housingLyphs]->(housing)            // list of lyphs housing the trees
      -[:apinatomy:ontologyTerms*0..1]->(external)          // external ids for the housing lyphs
      RETURN path1, path2

      UNION

      MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)  // soma lyph
      -[:apinatomy:conveys]->(somaLink)                // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(root)    // axon or dendrite root
      -[:apinatomy:internalIn]->(layer)
      -[:apinatomy:cloneOf*0..1]->()
      -[:apinatomy:supertype*0..1]->()
      -[:apinatomy:layerIn]->(end_housing)
      -[:apinatomy:ontologyTerms]->(end_housing_external:Class{iri: '${start-id}'})
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      WITH path1, root
      MATCH path2 = (root)
      -[:apinatomy:rootOf]->(chain)                    // axon or dendrite tree
      -[:apinatomy:housingLyphs]->(housing)            // list of lyphs housing the trees
      -[:apinatomy:ontologyTerms*0..1]->(external)          // external ids for the housing lyphs
      RETURN path1, path2

  - path: /dynamic/demos/apinat/soma-processes
    operations:
      - summary: List all the neuronal processes for all somas.
    query: |
      MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)    // soma lyph
      -[:apinatomy:conveys]->(linkSoma)                  // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(nodeRoot)  // axon or dendrite root
      -[:apinatomy:sourceOf|apinatomy:nextChainStartLevels|apinatomy:next*1..]->(link)  // sourceOf is first and only once
      -[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
      -[:apinatomy:cloneOf*0..1]->()
      -[:apinatomy:supertype*0..1]->()
      -[:apinatomy:ontologyTerms]->(external)
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      WITH path1, nodeRoot, layer_or_end AS layer
      OPTIONAL MATCH path2 = (layer)  // if we were in a layer, get the containing lyph as well
      -[:apinatomy:layerIn]->(end_housing)
      -[:apinatomy:ontologyTerms]->(end_housing_external)
      WITH path1, path2, nodeRoot
      MATCH path3 = (nodeRoot)        // extract chain for axon vs dendrite
      -[:apinatomy:rootOf]->(chain)
      RETURN path1, path2, path3

  - path: /dynamic/demos/apinat/soma-processes/{start-id}
    operations:
      - summary: List all the neuronal processes for somas located in start-id.
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)    // soma lyph
      -[:apinatomy:conveys]->(linkSoma)                  // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(nodeRoot)  // axon or dendrite root
      -[:apinatomy:internalIn]->(layer_or_end)
      -[:apinatomy:cloneOf*0..1]->()
      -[:apinatomy:supertype*0..1]->()
      -[:apinatomy:layerIn*0..1]->(layerSoma)  // don't need to see both layer and housing for soma
      -[:apinatomy:ontologyTerms]->(externalEndSoma:Class{iri: '${start-id}'})
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      WITH path1, nodeRoot
      MATCH path3 = (chain)
      <-[:apinatomy:rootOf]-(nodeRoot)
      -[:apinatomy:sourceOf|apinatomy:nextChainStartLevels|apinatomy:next*1..]->(link)
      -[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
      -[:apinatomy:cloneOf*0..1]->()
      -[:apinatomy:supertype*0..1]->()
      -[:apinatomy:ontologyTerms]->(external)
      WITH path1, path3, nodeRoot, layer_or_end AS layer
      OPTIONAL MATCH path2 = (layer)  // if we were in a layer, get the containing lyph as well
      -[:apinatomy:layerIn]->(end_housing)
      -[:apinatomy:ontologyTerms]->(end_housing_external)
      RETURN path1, path2, path3

  - path: /dynamic/demos/apinat/weird-soma-processes/{process-id}
    operations:
      - summary: List all the neuronal processes for somas where some processes is in process-id.
        parameters:
         - name: process-id
           description: ontology id of the starting point
           paramType: path
    query: |
      MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)    // soma lyph
      -[:apinatomy:conveys]->(linkSoma)                  // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(nodeRoot)  // axon or dendrite root
      -[:apinatomy:sourceOf|apinatomy:nextChainStartLevels|apinatomy:next*1..]->(link)  // sourceOf is first and only once
      -[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
      -[:apinatomy:cloneOf*0..1]->()
      -[:apinatomy:supertype*0..1]->()
      -[:apinatomy:ontologyTerms]->(external:Class{iri: '${process-id}'})
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      WITH path1, nodeRoot, layer_or_end AS layer
      OPTIONAL MATCH path2 = (layer)  // if we were in a layer, get the containing lyph as well
      -[:apinatomy:layerIn]->(end_housing)
      -[:apinatomy:ontologyTerms]->(end_housing_external)
      WITH path1, path2, nodeRoot
      MATCH path3 = (nodeRoot)        // extract chain for axon vs dendrite
      -[:apinatomy:rootOf]->(chain)
      RETURN path1, path2, path3

      UNION

      MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)    // soma lyph
      -[:apinatomy:conveys]->(linkSoma)                  // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(nodeRoot)  // axon or dendrite root
      -[:apinatomy:sourceOf|apinatomy:nextChainStartLevels|apinatomy:next*1..]->(link)  // sourceOf is first and only once
      -[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
      -[:apinatomy:cloneOf*0..1]->()
      -[:apinatomy:supertype*0..1]->()
      -[:apinatomy:ontologyTerms]->(external)
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      WITH path1, nodeRoot, layer_or_end AS layer
      MATCH path2 = (layer)  // if we were in a layer, get the containing lyph as well
      -[:apinatomy:layerIn]->(end_housing)
      -[:apinatomy:ontologyTerms]->(end_housing_external:Class{iri: '${process-id}'})
      WITH path1, path2, nodeRoot
      MATCH path3 = (nodeRoot)        // extract chain for axon vs dendrite
      -[:apinatomy:rootOf]->(chain)
      RETURN path1, path2, path3

  - path: /dynamic/demos/apinat/neru-1/{neupop-id}
    operations: &neru-ops
      - summary: Return the housing regions and publications for neurulated groups.
        parameters:
         - name: neupop-id
           description: neuron population identifier
           paramType: path
    query: |
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

      // publications
      WITH neugrp, a
      OPTIONAL MATCH path = (neugrp)
      -[:apinatomy:references]->(pub)
      -[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Publication"}) // cannot be curied, dynamic endpoints will not expand it

      WITH neugrp, a, path
      MATCH (neugrp)
      -[b:apinatomy:links]->(link)
      -[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
      -[d:apinatomy:layerIn*0..1]->(lyph)
      -[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

      WITH lyph, a, b, c, d, path
      MATCH (lyph)
      -[e:apinatomy:ontologyTerms]->(region)
      RETURN a, b, c, d, e, path

      UNION

      // this part usually only returns the soma housing lyph
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
      -[b:apinatomy:lyphs]->(lyph)
      -[c:apinatomy:internalIn]->(e) // e is a hack to get columns to match
      -[d:apinatomy:ontologyTerms*0..1]->(region)
      // this variant shows the dead end lyphs that correspond to the fasciculatesIn links above
      //-[c:apinatomy:internalIn*0..1]->(e)
      //-[d:apinatomy:ontologyTerms*0..1]->(region)
      return a, b, c, d, null AS e, null AS path

  - path: /dynamic/demos/apinat/neru-2/{neupop_id}
    operations: *neru-ops
    query: |
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

      // publications
      WITH neugrp, a
      OPTIONAL MATCH path = (neugrp)
      -[:apinatomy:references]->(pub)
      -[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Publication"}) // cannot be curied, dynamic endpoints will not expand it

      WITH neugrp, a, path
      MATCH (neugrp)
      -[b:apinatomy:links]->(link)
      -[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
      -[d:apinatomy:layerIn*0..1]->(lyph)
      -[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

      WITH neugrp, link, lyph, a, b, c, d, path
      MATCH (lyph)
      -[e:apinatomy:ontologyTerms]->(region)

      // use apinatomy:next to extract ordering information
      WITH neugrp, link, a, b, c, d, e, path
      MATCH (link)
      -[f:apinatomy:next*0..]->()
      //-[f:apinatomy:next|apinatomy:nextChainStartLevels*0..]->()
      // FIXME these should be collapsing into a single relationship
      -[g:apinatomy:target*0..1]->()
      -[h:apinatomy:rootOf*0..1]->()
      -[i:apinatomy:levels*0..1]->()
      <-[:apinatomy:links]-(neugrp)

      RETURN a, b, c, d, e, f, g,h,i, path

      UNION

      // this part usually only returns the soma housing lyph
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
      -[b:apinatomy:lyphs]->(lyph)
      -[c:apinatomy:internalIn]->(e) // e is a hack to get columns to match
      -[d:apinatomy:ontologyTerms*0..1]->(region)
      // this variant shows the dead end lyphs that correspond to the fasciculatesIn links above
      //-[c:apinatomy:internalIn*0..1]->(e)
      //-[d:apinatomy:ontologyTerms*0..1]->(region)
      RETURN a, b, c, d, null AS e, null AS f, null AS g, null AS h, null AS i, null AS path

  - path: /dynamic/demos/apinat/neru-3/{neupop_id}
    operations: *neru-ops
    query: |
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

      // publications
      WITH neugrp, a
      OPTIONAL MATCH path = (neugrp)
      -[:apinatomy:references]->(pub)
      -[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Publication"}) // cannot be curied, dynamic endpoints will not expand it

      WITH neugrp, a, path
      MATCH (neugrp)
      -[b:apinatomy:links]->(link)
      -[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
      -[d:apinatomy:layerIn*0..1]->(lyph)
      -[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

      WITH neugrp, link, lyph, a, b, c, d, path // MATCH vs , not all things that match as lyphs have externals
      MATCH (lyph)
      -[e:apinatomy:ontologyTerms]->(region)

      // use apinatomy:next to extract ordering information
      WITH neugrp, link, a, b, c, d, e, path
      MATCH p2 = (link)
      -[:apinatomy:conveyingLyph]->(cl)
      -[:apinatomy:topology]->()

      WITH neugrp, link, a, b, c, d, e, path, p2, cl
      MATCH (cl)
      -[x:apinatomy:inheritedOntologyTerms*0..1]->()

      WITH neugrp, link, a, b, c, d, e, path, p2, x
      MATCH (link)
      -[f:apinatomy:next*0..]->()
      //-[f:apinatomy:next|apinatomy:nextChainStartLevels*0..]->()
      // FIXME these should be collapsing into a single relationship
      -[g:apinatomy:target*0..1]->()
      -[h:apinatomy:rootOf*0..1]->()
      -[i:apinatomy:levels*0..1]->()
      <-[:apinatomy:links]-(neugrp)

      RETURN a, b, c, d, e, f, g,h,i, path, p2, x

      UNION

      // this part usually only returns the soma housing lyph
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
      -[b:apinatomy:lyphs]->(lyph)
      -[c:apinatomy:internalIn]->()
      -[d:apinatomy:ontologyTerms*0..1]->(region)
      // this variant shows the dead end lyphs that correspond to the fasciculatesIn links above
      //-[c:apinatomy:internalIn*0..1]->()
      //-[d:apinatomy:ontologyTerms*0..1]->(region)
      RETURN a, b, c, d, null AS e, null AS f, null AS g, null AS h, null AS i, null AS path, null as p2, null as x

  - path: /dynamic/demos/apinat/neru-4/{neupop_id}
    operations: *neru-ops
    query: |
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

      , (neugrp)
      -[:apinatomy:links]->(link)
      -[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
      -[d:apinatomy:layerIn*0..1]->(lyph)
      -[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

      WITH neugrp, link, lyph, a, c, d
      OPTIONAL MATCH layer_ext = (lyph)
      <-[d*1]-(layer)-[:apinatomy:cloneOf]->()-[:apinatomy:inheritedOntologyTerms]->()

      WITH neugrp, link, lyph, a, c, d, layer_ext // there is a difference here because the previous match does not require lyphs to have external ids
      MATCH (lyph)
      -[e:apinatomy:ontologyTerms]->(region)

      , p2 = (link)
      -[:apinatomy:conveyingLyph]->(cl)
      -[:apinatomy:topology]->()

      , (cl)
      -[x:apinatomy:inheritedOntologyTerms*0..1]->()

      // use apinatomy:next to extract ordering information
      , (link)
      -[f:apinatomy:next*0..]->()
      -[g:apinatomy:target*0..1]->()
      -[h:apinatomy:rootOf*0..1]->()
      -[i:apinatomy:levels*0..1]->()
      <-[:apinatomy:links]-(neugrp)

      // publications
      WITH neugrp, a, c, d, e, f, g,h,i, p2, x, layer_ext
      OPTIONAL MATCH path = (neugrp)
      -[:apinatomy:references]->(pub)
      -[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Publication"}) // cannot be curied, dynamic endpoints will not expand it

      RETURN a, null as b, c, d, e, f, g,h,i, path, p2, x, layer_ext

      UNION

      // this part usually only returns the soma housing lyph
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
      -[b:apinatomy:lyphs]->(lyph)
      -[c:apinatomy:internalIn]->()
      -[d:apinatomy:ontologyTerms*0..1]->(region)
      , p2 = (lyph)
      -[:apinatomy:conveys]->(soma_link)
      -[:apinatomy:source|apinatomy:target]->(soma_node)
      -[:apinatomy:sourceOf]->(chain_link)
      , (chain_link)
      -[:apinatomy:levelIn]->(chain)
      , (soma_node)
      -[:apinatomy:rootOf]->(chain)

      RETURN a, b, c, d, null AS e, null AS f, null AS g, null AS h, null AS i, null AS path, p2, null as x, null as layer_ext

  - path: /dynamic/demos/apinat/neru-5/{neupop_id}
    operations: *neru-ops
    query: |
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

      , (neugrp)
      -[:apinatomy:links]->(link)
      -[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
      -[d:apinatomy:layerIn*0..1]->(lyph)
      -[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

      WITH neugrp, link, lyph, a, c, d
      OPTIONAL MATCH layer_ext = (lyph)
      <-[d*1]-(layer)-[:apinatomy:cloneOf*0..1]->()-[:apinatomy:inheritedExternal]->()

      WITH neugrp, link, lyph, a, c, d, layer_ext
      OPTIONAL MATCH more = (lyph)
      -[:apinatomy:layerIn|apinatomy:endsIn|apinatomy:fasciculatesIn|apinatomy:internalIn|apinatomy:cloneOf*1..]->()
      -[:apinatomy:ontologyTerms|apinatomy:inheritedExternal]->()

      WITH neugrp, link, lyph, a, c, d, layer_ext, more // there is a difference here because the previous match does not require lyphs to have external ids
      MATCH (lyph)
      -[e:apinatomy:ontologyTerms]->(region)

      , p2 = (link)
      -[:apinatomy:conveyingLyph]->(cl)
      -[:apinatomy:topology]->()

      , (cl)
      -[x:apinatomy:inheritedExternal*0..1]->()

      // use apinatomy:next to extract ordering information
      , (link)
      -[f:apinatomy:next*0..]->()
      -[g:apinatomy:target*0..1]->()
      -[h:apinatomy:rootOf*0..1]->()
      -[i:apinatomy:levels*0..1]->()
      <-[:apinatomy:links]-(neugrp)

      // publications
      WITH neugrp, a, c, d, e, f, g,h,i, p2, x, layer_ext, more
      OPTIONAL MATCH path = (neugrp)
      -[:apinatomy:references]->(pub)
      -[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Reference"}) // cannot be curied, dynamic endpoints will not expand it

      RETURN a, null as b, c, d, e, f, g,h,i, path, p2, x, layer_ext, more

      UNION

      // this part usually only returns the soma housing lyph
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
      -[b:apinatomy:lyphs]->(lyph)
      -[c:apinatomy:internalIn]->()
      -[d:apinatomy:ontologyTerms*0..1]->(region)
      , p2 = (lyph)
      -[:apinatomy:conveys]->(soma_link)
      -[:apinatomy:source|apinatomy:target]->(soma_node)
      -[:apinatomy:sourceOf]->(chain_link)
      , (chain_link)
      -[:apinatomy:levelIn]->(chain)
      , (soma_node)
      -[:apinatomy:rootOf]->(chain)

      WITH lyph, a, b, c, d, p2
      OPTIONAL MATCH more = (lyph)
      -[:apinatomy:layerIn|apinatomy:endsIn|apinatomy:fasciculatesIn|apinatomy:internalIn|apinatomy:cloneOf*1..]->()
      -[:apinatomy:ontologyTerms|apinatomy:inheritedExternal]->()

      RETURN a, b, c, d, null AS e, null AS f, null AS g, null AS h, null AS i, null AS path, p2, null as x, null as layer_ext, more

  - path: /dynamic/demos/apinat/neru-6/{neupop_id}
    operations: *neru-ops
    query: |
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

      , (neugrp)
      -[:apinatomy:links]->(link)
      -[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
      -[d:apinatomy:layerIn*0..1]->(lyph)
      -[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

      WITH neugrp, link, lyph, a, c, d
      OPTIONAL MATCH layer_ext = (lyph)
      <-[d*1]-(layer)-[:apinatomy:cloneOf*0..1]->()-[:apinatomy:inheritedExternal]->()

      WITH neugrp, link, lyph, a, c, d, layer_ext
      OPTIONAL MATCH more = (lyph)
      -[:apinatomy:layerIn|apinatomy:endsIn|apinatomy:fasciculatesIn|apinatomy:internalIn|apinatomy:cloneOf*1..]->()
      -[:apinatomy:ontologyTerms|apinatomy:inheritedExternal]->()

      WITH neugrp, link, lyph, a, c, d, layer_ext, more // there is a difference here because the previous match does not require lyphs to have external ids
      MATCH (lyph)
      -[e:apinatomy:ontologyTerms]->(region)

      , p2 = (link)
      -[:apinatomy:conveyingLyph]->(cl)
      -[:apinatomy:topology]->()

      , (cl)
      -[x:apinatomy:inheritedExternal*0..1]->()

      // use apinatomy:next to extract ordering information
      , (link)
      -[f:apinatomy:next|apinatomy:nextChainStartLevels*0..]->()
      -[g:apinatomy:target*0..1]->()
      -[h:apinatomy:rootOf*0..1]->()
      -[i:apinatomy:levels*0..1]->()
      <-[:apinatomy:links]-(neugrp)

      // publications
      WITH neugrp, a, c, d, e, f, g,h,i, p2, x, layer_ext, more
      OPTIONAL MATCH path = (neugrp)
      -[:apinatomy:references]->(pub)
      -[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Reference"}) // cannot be curied, dynamic endpoints will not expand it

      RETURN a, null as b, c, d, e, f, g,h,i, path, p2, x, layer_ext, more

      UNION

      // this part usually only returns the soma housing lyph
      MATCH (neupop:Class{iri: $neupop_id})
      -[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
      -[b:apinatomy:lyphs]->(lyph)
      -[c:apinatomy:internalIn]->()
      -[d:apinatomy:ontologyTerms*0..1]->(region)
      , p2 = (lyph)
      -[:apinatomy:conveys]->(soma_link)
      -[:apinatomy:source|apinatomy:target]->(soma_node)
      -[:apinatomy:sourceOf]->(chain_link)
      , (chain_link)
      -[:apinatomy:levelIn]->(chain)
      , (soma_node)
      -[:apinatomy:rootOf]->(chain)

      WITH lyph, a, b, c, d, p2
      OPTIONAL MATCH more = (lyph)
      -[:apinatomy:layerIn|apinatomy:endsIn|apinatomy:fasciculatesIn|apinatomy:internalIn|apinatomy:cloneOf*1..]->()
      -[:apinatomy:ontologyTerms|apinatomy:inheritedExternal]->()

      RETURN a, b, c, d, null AS e, null AS f, null AS g, null AS h, null AS i, null AS path, p2, null as x, null as layer_ext, more

  - path: /dynamic/demos/apinat/modelList
    operations:
      - summary: Return the list of all ApiNATOMY models in the database.
    query: |
      MATCH ({iri: "https://apinatomy.org/uris/elements/Graph"})
      <-[:type]-(g)-[:isDefinedBy]->(o:Ontology)
      RETURN o

  - path: /dynamic/demos/apinat/modelPopulationsReferences/{model_id}
    operations:
      - summary: Given an ApiNATOMY model id return the identifiers for the neuronpopulations that are present in the model and the identifiers forreferences that provide supporting evidence. Publications andpopulations can be distingished by checking whether their meta typefield is NamedIndividual or Class.
        parameters:
         - name: model_id
           description: the identifier for an ApiNATOMY model
           paramType: path
    query: |
      MATCH (start:Ontology {iri: $model_id})
      <-[:isDefinedBy]-(external:Class)
      -[:subClassOf*]->(:Class {iri: "http://uri.interlex.org/tgbugs/uris/readable/NeuronEBM"}) // FIXME
      ,
      (external)
      -[e:type]->()
      RETURN e
      UNION
      OPTIONAL MATCH (start:Ontology {iri: $model_id})
      <-[:isDefinedBy]-(graph:NamedIndividual)
      -[:type]->({iri: "https://apinatomy.org/uris/elements/Graph"}) // elements don't have a superclass right now
      ,
      (graph)
      -[:apinatomy:references]->(pub)
      -[e:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Reference"})
      RETURN e

cypherResources:
  - path: /dynamic/prod/sparc/organParts/{id}
    operations: &organParts-ops
      - summary: Get the parts list for an organ including nerves and blood vessles
        parameters:
         - name: id
           description: ontology id of the organ
           paramType: path
    query: &organParts |
      // all parts of and directly connected to organ or parts of organ
      MATCH path = (start:Class{iri: "${id}"})
      -[:ILX:0738400|fma:regional_part|fma:constitutional_part|fma:related_part*0..40]->(part)
      -[:fma:arterial_supply|fma:nerve_supply|fma:venous_drainage|fma:continuous_with*0..1]->(sup)
      -[:fma:constitutional_part|fma:branch_of|fma:tributary_of|fma:branch*0..1]->(a_bit_more)
      RETURN path
      UNION
      // return the major vessles for any arteries supplying the organ directly
      MATCH path = (start:Class{iri: "${id}"})
      -[:fma:arterial_supply|fma:venous_drainage]->(vessel)
      -[:fma:branch_of|fma:tributary_of]->(more_vessel)
      -[:fma:branch_of|fma:tributary_of|fma:regional_part_of]->(even_more_vessel)
      RETURN path

  - path: /dynamic/test/sparc/organParts/{id}
    operations: *organParts-ops
    query: |
      MATCH path = (start:Class{iri: "${id}"})
      <-[:subClassOf|ilxtr:includedForSPARCUnder|fma:regional_part_of|fma:constitutional_part_of|fma:related_part_of*0..40]-(part)
      <-[:fma:arterial_supply_of|fma:nerve_supply_of|fma:venous_drainage_of|fma:continuous_with*0..1]-(sup)
      <-[:subClassOf|fma:constitutional_part_of|fma:branch|fma:tributary|fma:branch_of*0..1]-(a_bit_more)
      RETURN path
      UNION
      MATCH path = (start:Class{iri: "${id}"})
      // this one does not need to be inverted ? except for the INCOMING flag
      <-[:fma:arterial_supply_of|fma:venous_drainage_of]-(vessel)
      <-[:fma:branch|fma:tributary]-(more_vessel)
      <-[:fma:branch|fma:tributary|fma:regional_part]-(even_more_vessel)
      RETURN path

  - path: /dynamic/prod/sparc/parcellationArtifacts
    operations:
      - summary: Get the graph of all parcellation artifacts for all species
    query: |
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/prod/sparc/parcellationArtifacts/{species-id}
    operations:
      - summary: Get the graph of all parcellation artifacts for a single species
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
    query: |
      MATCH (parent)
      -[:ilxtr:isDefinedInTaxon]->(species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/prod/sparc/artifactRoots/{artifact-id}
    operations:
      - summary: Get the graph of all parcellation label roots for a single artifact WARNING this can return no results
        parameters:
         - name: artifact-id
           description: ontology id of the parcellation artifact
           paramType: path
    query: |
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(a)<-[:subClassOf*0..2]
      -(artifact:Class{iri: "${artifact-id}"})
      RETURN path

  - path: /dynamic/prod/sparc/artifactLabels/{artifact-id}
    operations:
      - summary: Get the graph of all parcellation labels for a single artifact WARNING this can return no results
        parameters:
         - name: artifact-id
           description: ontology id of the parcellation artifact
           paramType: path
    query: |
      MATCH path = (label)
      -[:subClassOf]->(root)
      -[:ilxtr:isDefinedBy]->(a)<-[:subClassOf*0..2]
      -(artifact:Class{iri: "${artifact-id}"})
      WHERE label.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/prod/sparc/rootLabels/{root-id}
    operations: &rootLabes-ops
      - summary: Get the list of all parcellation labels for a single label root
        parameters:
         - name: root-id
           description: ontology id of the parcellation label root
           paramType: path
    query: &rootLabels |
      MATCH (label)-[:subClassOf]->(root:Class{iri: "${root-id}"})
      WITH label
      MATCH path = (label)-[relation*0..1]-(maybe)
      WHERE NONE (r in relation WHERE type(r) IN ["isDefinedBy", "subClassOf", "filler"])
            AND NOT (label.iri =~ ".*_:.*") AND NOT (maybe.iri =~ ".*_:.*")
            AND label.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/test/sparc/rootLabels/{root-id}
    operations: *rootLabes-ops
    query: *rootLabels

  - path: /dynamic/prod/sparc/parcellationRoots
    operations:
      - summary: Get the graph of all parcellation label roots for all species
    query: |
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      return path
      UNION
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      RETURN path

  - path: /dynamic/prod/sparc/parcellationRoots/{species-id}
    operations:
      - summary: Get the graph of all parcellation label roots for a single species
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
    query: |
      MATCH (parent)
      -[:ilxtr:isDefinedInTaxon]->(species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      return path
      UNION
      MATCH (parent)
      -[:ilxtr:isDefinedInTaxon]->(species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      RETURN path

  - path: /dynamic/prod/sparc/parcellationRoots/{species-id}/{region-id}
    operations:
      - summary: Get the graph of all parcellation label roots for a single species and anatomical region
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
         - name: region-id
           description: ontology id of the anatomical region
           paramType: path
    query: |
      MATCH
      (region:Class{iri: "${region-id}"})
      <-[:ilxtr:isDefinedInRegion]-
      (parent)
      -[:ilxtr:isDefinedInTaxon]->
      (species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path
      UNION
      MATCH
      (region:Class{iri: "${region-id}"})
      <-[:ilxtr:isDefinedInRegion]-
      (parent)
      -[:ilxtr:isDefinedInTaxon]->
      (species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      RETURN path

  - path: /dynamic/prod/sparc/parcellationRootsFMA/{species-id}/{fma-id}
    operations: &parcellationRootsFMA-ops
      - summary: Get the graph of all parcellation label roots for a single species and anatomical region
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
         - name: fma-id
           description: ontology id of the anatomical region
           paramType: path
    query: &parcellationRootsFMA |
      MATCH (fma:Class{iri: "${fma-id}"})
      WITH "FMA:" + toString(fma.`http://purl.org/sig/ont/fma/FMAID`) AS curie
      MATCH (region)
      -[:subClassOf*]->(start:Class{iri: "http://purl.obolibrary.org/obo/UBERON_0001062"})
      WHERE any(x IN
                region.`http://www.geneontology.org/formats/oboInOwl#hasDbXref`
                WHERE x =~ curie)
      WITH region
      MATCH
      (region)
      <-[:ilxtr:isDefinedInRegion]-
      (parent)
      -[:ilxtr:isDefinedInTaxon]->
      (species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path
      UNION
      MATCH (fma:Class{iri: "${fma-id}"})
      WITH "FMA:" + toString(fma.`http://purl.org/sig/ont/fma/FMAID`) AS curie
      MATCH (region)
      -[:subClassOf*]->(start:Class{iri: "http://purl.obolibrary.org/obo/UBERON_0001062"})
      WHERE any(x IN
                region.`http://www.geneontology.org/formats/oboInOwl#hasDbXref`
                WHERE x =~ curie)
      WITH region
      MATCH
      (region)
      <-[:ilxtr:isDefinedInRegion]-
      (parent)
      -[:ilxtr:isDefinedInTaxon]->
      (species:Class{iri: "${species-id}"})
      WITH parent
      MATCH path = (root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      RETURN path

  - path: /dynamic/test/sparc/parcellationRootsFMA/{species-id}/{fma-id}
    operations: *parcellationRootsFMA-ops
    query: *parcellationRootsFMA

  - path: /dynamic/prod/sparc/parcellationGraph
    operations:
      - summary: Get the graph of all parcellation labels for all species
    query: |
      MATCH path = (artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      return path
      UNION
      MATCH path = (maybe)
      -[relation*0..1]-(label)
      -[:subClassOf]->(root)
      -[:ilxtr:isDefinedBy]->(artifact)
      -[:subClassOf*0..2]->(parent)
      -[:ilxtr:isDefinedInTaxon]->(species)
      WHERE NONE (r in relation WHERE type(r) IN ["isDefinedBy", "subClassOf", "filler"])
            AND NOT (label.iri =~ ".*_:.*") AND NOT (maybe.iri =~ ".*_:.*")
            AND label.iri <> "http://www.w3.org/2002/07/owl#Nothing"
      RETURN path

  - path: /dynamic/prod/sparc/organList
    operations: &organList-ops
      - summary: Get the list of all FMA organ identifiers relevant to SPARC
    query: &organList |
      MATCH (n)
      WHERE n.iri IN [
              "http://purl.org/sig/ont/fma/fma7195",  // lung
              "http://purl.org/sig/ont/fma/fma7088",  // heart
              "http://purl.org/sig/ont/fma/fma7197",  // liver
              "http://purl.org/sig/ont/fma/fma7198",  // pancreas
              "http://purl.org/sig/ont/fma/fma7203",  // kidney
              "http://purl.org/sig/ont/fma/fma7148",  // stomach
              "http://purl.org/sig/ont/fma/fma7196",  // spleen
              "http://purl.org/sig/ont/fma/fma14543", // colon
              "http://purl.org/sig/ont/fma/fma7201",  // large intestine
              "http://purl.org/sig/ont/fma/fma7200",  // small intestine
              "http://purl.org/sig/ont/fma/fma7199",  // intestine
              "http://purl.org/sig/ont/fma/fma15900", // urinary bladder
              "http://purl.org/sig/ont/fma/fma45659", // lower urinary tract
              "http://purl.org/sig/ont/fma/fma7157",  // nervous system
              "http://purl.org/sig/ont/fma/fma9903",  // peripheral nervous system
              "http://purl.org/sig/ont/fma/fma9906",  // sympathetic nervous system
              "http://purl.org/sig/ont/fma/fma7647",  // spinal cord
              "http://purl.org/sig/ont/fma/fma50801"  // brain
              ]
      RETURN n

  - path: /dynamic/test/sparc/organList
    operations: *organList-ops
    query: *organList

  - path: /dynamic/prod/sparc/speciesList
    operations: &speciesList-ops
      - summary: Get the list of all NCBITaxon species identifiers relevant to SPARC
    query: &speciesList |
      MATCH (n)
      WHERE n.iri IN [
              "http://purl.obolibrary.org/obo/NCBITaxon_9378",
              "http://purl.obolibrary.org/obo/NCBITaxon_9606",
              "http://purl.obolibrary.org/obo/NCBITaxon_9685",
              "http://purl.obolibrary.org/obo/NCBITaxon_9823",
              "http://purl.obolibrary.org/obo/NCBITaxon_10090",
              "http://purl.obolibrary.org/obo/NCBITaxon_10116"]
      RETURN n

  - path: /dynamic/test/sparc/speciesList
    operations: *speciesList-ops
    query: *speciesList

  - path: /dynamic/shortestSimple
    query: |
      MATCH (start:Class{iri: '${start_id}'})
      WITH start
      MATCH (end:Class{iri: '${end_id}'})
      WITH start, end
      MATCH path = shortestPath((start)-[:${relationship}*..${max_depth}]->(end))
      RETURN path
    operations:
      - summary: Get the shortest path between two IDs
        parameters:
          - name: start_id
            description: The starting node (ex UBERON:0005751)
            paramType: query
          - name: end_id
            description: The ending node (ex UBERON:0001255)
            paramType: query
          - name: max_depth
            description: the maximum depth to traverse
            paramType: query
          - name: relationship
            description: The property to traverse (ex subClassOf or subClassOf|partOf|isA)
            paramType: query
            required: false

  - path: /dynamic/neurons/connectivity
    query: |
            MATCH (blank)-
            [entrytype:ilxtr:hasSomaLocatedIn|ilxtr:hasAxonLocatedIn|ilxtr:hasDendriteLocatedIn|ilxtr:hasPresynapticTerminalsIn]
            ->(location:Class{iri: '${start_id}'})
            WITH location, entrytype, blank
            MATCH (phenotype)<-[predicate]-(blank)<-[:equivalentClass]-(neuron)
            WHERE NOT (phenotype.iri =~ ".*_:.*")
            // RETURN phenotype, (phenotype)-[predicate]-(neuron) as e
            // WITH location, predicate, phenotype, neuron
            RETURN location, entrytype, neuron, predicate, phenotype
    operations:
      - summary: Get connected anatomical regions by neuron type
        parameters:
          - name: start_id
            description: The starting location (eg UBERON:0001759)
            paramType: query

  - path: /dynamic/neurons/connectedRegions
    query: |
            MATCH (blank)-
            [entrytype:ilxtr:hasSomaLocatedIn|ilxtr:hasAxonLocatedIn|ilxtr:hasDendriteLocatedIn|ilxtr:hasPresynapticTerminalsIn]
            ->(location:Class{iri: '${start_id}'})
            WITH entrytype, blank
            MATCH (phenotype)<-[:${target_predicate}]-(blank)
            // WHERE NOT (phenotype.iri =~ ".*_:.*")
            RETURN phenotype
    operations:
      - summary: Get connected anatomical regions by starting location and target relationship
        parameters:
          - name: start_id
            description: The starting location (eg UBERON:0001759)
            paramType: query
          - name: target_predicate
            description: The predicate for the type of connectivity (eg ilxtr:hasPresynapticTerminalsIn)
            paramType: query
            required: false

  - path: /dynamic/demos/apinat/bundles/{start-id}
    operations:
      - summary: Return the paths to somas from an anatomical region (aka connected-somas)
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      MATCH path1 = (start:Class{iri: '${start-id}'})
      -[:apinatomy:annotates]->(start_housing)
      -[:apinatomy:bundlesChains]->(chain)
      -[:apinatomy:root]->(root)
      -[:apinatomy:internalIn]->(layer_or_end)
      -[:apinatomy:external]->(layer_or_end_external)
      WITH path1, root, layer_or_end AS layer
      OPTIONAL MATCH path2 = (layer)
      -[:apinatomy:layerIn]->(end_housing)
      -[:apinatomy:external]->(end_housing_external)
      WITH path1, path2, root
      MATCH path3 = (root) // in the layer case this hits an additional lyph
      <-[:apinatomy:target|apinatomy:source]-(link)
      <-[:apinatomy:conveys]-(soma)
      <-[:apinatomy:annotates]-(soma_NLX)
      RETURN path1, path2, path3

  - path: /dynamic/demos/apinat/somas
    operations:
      - summary: List all the somas for a given graph (TODO on the given graph)
    query: |
      MATCH (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)
      RETURN soma

  - path: /dynamic/demos/apinat/housing-lyphs
    operations:
      - summary: List all the housing lyphs (neuronal processes) for all starting points.
    query: |
      MATCH path = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)  // soma lyph
      -[:apinatomy:conveys]->(somaLink)                // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(root)    // axon or dendrite root
      -[:apinatomy:rootOf]->(chain)                    // axon or dendrite tree
      -[:apinatomy:housingLyphs]->(housing)            // list of lyphs housing the trees
      -[:apinatomy:external*0..1]->(external)          // external ids for the housing lyphs
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      RETURN path

  - path: /dynamic/demos/apinat/housing-lyphs/{start-id}
    operations:
      - summary: List all the housing lyphs for a starting point.
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      // sadly it seems we have to union on this one in order to enforce matching start-id
      MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)  // soma lyph
      -[:apinatomy:conveys]->(somaLink)                // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(root)    // axon or dendrite root
      <-[:apinatomy:internalNodes]-(layer_or_end)
      <-[:apinatomy:annotates]-(layer_or_end_external:Class{iri: '${start-id}'})
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      WITH path1, root
      MATCH path2 = (root)
      -[:apinatomy:rootOf]->(chain)                    // axon or dendrite tree
      -[:apinatomy:housingLyphs]->(housing)            // list of lyphs housing the trees
      -[:apinatomy:external*0..1]->(external)          // external ids for the housing lyphs
      RETURN path1, path2
      
      UNION
      
      MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
      -[:apinatomy:annotates]->(soma:NamedIndividual)  // soma lyph
      -[:apinatomy:conveys]->(somaLink)                // link connecting soma to axon and dendrite
      -[:apinatomy:target|apinatomy:source]->(root)    // axon or dendrite root
      <-[:apinatomy:internalNodes]-(layer)
      -[:apinatomy:layerIn]->(end_housing)
      -[:apinatomy:external]->(end_housing_external:Class{iri: '${start-id}'})
      WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
      WITH path1, root
      MATCH path2 = (root)
      -[:apinatomy:rootOf]->(chain)                    // axon or dendrite tree
      -[:apinatomy:housingLyphs]->(housing)            // list of lyphs housing the trees
      -[:apinatomy:external*0..1]->(external)          // external ids for the housing lyphs
      RETURN path1, path2

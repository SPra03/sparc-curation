# -*- org-adapt-indentation: nil; org-edit-src-content-indentation: 0; orgstrap-cypher: sha256; orgstrap-norm-func-name: orgstrap-norm-func--dprp-1\.0; orgstrap-block-checksum: 2f5a7753772745172583c3d866930dc6ed4a610061d30bbc5cf46d240b921bc0; -*-
# [[orgstrap][jump to the orgstrap block for this file]]
# [[file:queries.pdf]] [[file:queries.html]]
#+name: orgstrap-shebang
#+begin_src bash :eval never :results none :exports none
{ __p=$(mktemp -d);touch ${__p}/=;chmod +x ${__p}/=;__op=$PATH;PATH=${__p}:$PATH;} > ${null="/dev/null"}
$file= $MyInvocation.MyCommand.Source
$ErrorActionPreference= "silentlycontinue"
file=$0
args=$@
$ErrorActionPreference= "Continue"
{ PATH=$__op;rm ${__p}/=;rmdir ${__p};} > $null
emacs -batch -no-site-file -eval "(let (vc-follow-symlinks) (defun orgstrap--confirm-eval (l _) (not (memq (intern l) '(elisp emacs-lisp)))) (let ((file (pop argv)) enable-local-variables) (find-file-literally file) (end-of-line) (when (eq (char-before) ?\^m) (let ((coding-system-for-read 'utf-8)) (revert-buffer nil t t)))) (let ((enable-local-eval t) (enable-local-variables :all) (major-mode 'org-mode)) (require 'org) (org-set-regexps-and-options) (hack-local-variables)))" "${file}" -- $args
exit
<# powershell open
#+end_src

#+title: SPARC queries
#+startup: showall
#+category: SPARC
#+options: ^:nil
#+latex_header: \usepackage[inkscapelatex=false]{svg}
#+begin: properties
#+property: header-args :eval no-export

# header-args:sparql :url http://localhost:10035/repositories/test
<<sparql-settings>>
#+property: header-args:sparql :url http://localhost:9999/blazegraph/sparql
#+property: header-args:sparql+ :format text/csv
#+property: header-args:sparql+ :results table
#+property: header-args:sparql+ :exports both
#+property: header-args:sparql+ :var limit="10"
# TODO figure out how to allow missing limit to not set epilogue, likely requires modifications to core
# XXX of course that would require epilogue to actually be implemented :/
# #+property: header-args:sparql+ :epilogue "LIMIT ?limit"

<<cypher-settings>>
#+property: header-args:cypher :scigraph http://localhost:9000/scigraph
#+property: header-args:cypher+ :limit 10
#+end:
#+begin: prefixes
# TODO consider a setup file for these maybe?
# or populate additional local curies via orgstrap
# FIXME doi collides which is bad
#+link: doi https://doi.org/
#+link: PMID http://www.ncbi.nlm.nih.gov/pubmed/
#+link: dataset https://api.pennsieve.io/datasets/N:dataset:
#+link: datasetbf https://api.blackfynn.io/datasets/N:dataset:
#+link: TEMP http://uri.interlex.org/temp/uris/
#+link: TEMPRAW http://uri.interlex.org/temp/uris/raw/
#+link: awards http://uri.interlex.org/temp/uris/awards/
#+link: rdf http://www.w3.org/1999/02/22-rdf-syntax-ns#
#+link: FMA http://purl.org/sig/ont/fma/fma
#+link: obo http://purl.obolibrary.org/obo/
#+link: IAO http://purl.obolibrary.org/obo/IAO_
#+link: UBERON http://purl.obolibrary.org/obo/UBERON_
#+link: NCBITaxon http://purl.obolibrary.org/obo/NCBITaxon_
#+link: PATO http://purl.obolibrary.org/obo/PATO_
#+link: CHEBI http://purl.obolibrary.org/obo/CHEBI_
#+link: GO http://purl.obolibrary.org/obo/GO_
#+link: CL http://purl.obolibrary.org/obo/CL_
#+link: EMAPA http://purl.obolibrary.org/obo/EMAPA_
#+link: oboInOwl http://www.geneontology.org/formats/oboInOwl#
#+link: BIRNLEX http://uri.neuinfo.org/nif/nifstd/birnlex_
#+link: owl http://www.w3.org/2002/07/owl#
#+link: rdfs http://www.w3.org/2000/01/rdf-schema#
#+link: dc http://purl.org/dc/elements/1.1/
#+link: dcterms http://purl.org/dc/terms/
#+link: ILX http://uri.interlex.org/base/ilx_
#+link: ilxtr http://uri.interlex.org/tgbugs/uris/readable/
#+link: sparc http://uri.interlex.org/tgbugs/uris/readable/sparc/
#+link: tech http://uri.interlex.org/tgbugs/uris/readable/technique/
#+link: asp http://uri.interlex.org/tgbugs/uris/readable/aspect/
#+link: unit http://uri.interlex.org/tgbugs/uris/readable/aspect/unit/
#+link: ilxtio http://uri.interlex.org/tgbugs/uris/indexes/ontologies/
#+link: hyp-protcur https://uilx.org/tgbugs/u/hypothesis/protcur/
#+link: NLXINV http://uri.neuinfo.org/nif/nifstd/nlx_inv_
#+link: SAO http://uri.neuinfo.org/nif/nifstd/sao
#+link: NLX http://uri.neuinfo.org/nif/nifstd/nlx_
#+link: pio.api https://www.protocols.io/api/v3/protocols/
#+link: pio.view https://www.protocols.io/view/
#+link: ror https://ror.org/
#+link: SCR http://scicrunch.org/resolver/SCR_
#+link: apinatomy https://apinatomy.org/uris/readable/
#+link: elements https://apinatomy.org/uris/elements/
#+link: aacar https://apinatomy.org/uris/models/ard-arm-cardiac/ids/
#+link: bolew https://apinatomy.org/uris/models/bolser-lewis/ids/
#+link: kblad https://apinatomy.org/uris/models/keast-bladder/ids/
#+link: bromo https://apinatomy.org/uris/models/bronchomotor/ids/
#+link: scaft https://apinatomy.org/uris/models/scaffold-test/ids/
#+link: vagnr https://apinatomy.org/uris/models/vagus-nerve/ids/
#+link: sdcol https://apinatomy.org/uris/models/sawg-distal-colon/ids/
#+link: sstom https://apinatomy.org/uris/models/sawg-stomach/ids/
#+link: dlcon https://apinatomy.org/uris/models/dev-layout-conn/ids/
# FIXME definition is not expanding as expected, probably because my
# implementation is wrong?? but only occasionally? other times it works ??
#+link: definition http://purl.obolibrary.org/obo/IAO_0000115
#+link: rawmethods https://raw.githubusercontent.com/SciCrunch/NIF-Ontology/methods/ttl/
#+link: rawneurons https://raw.githubusercontent.com/SciCrunch/NIF-Ontology/neurons/ttl/
#+link: cassont https://cassava.ucsd.edu/sparc/ontologies/
#+link: sparc-olymp-apinat https://sparc.olympiangods.org/ApiNATOMY/ontologies/
#+link: prov http://www.w3.org/ns/prov#
#+link: foaf http://xmlns.com/foaf/0.1/
#+link: NIFRID http://uri.neuinfo.org/nif/nifstd/readable/
#+link: swrl http://www.w3.org/2003/11/swrl#
#+link: prism http://prismstandard.org/namespaces/basic/2.1/
#+link: BFO http://purl.obolibrary.org/obo/BFO_
#+link: RO http://purl.obolibrary.org/obo/RO_
#+link: UBPROP http://purl.obolibrary.org/obo/UBPROP_
#+link: chebi http://purl.obolibrary.org/obo/chebi/
#+link: ncbitaxon http://purl.obolibrary.org/obo/ncbitaxon#
#+link: cl http://purl.obolibrary.org/obo/cl#
#+link: MIRO http://uri.interlex.org/MIRO/uris/readable/
#+link: bibo http://purl.org/ontology/bibo/
#+link: cito http://purl.org/spar/cito/
#+link: swrl http://swrl.stanford.edu/ontologies/3.3/swrla.owl#
#+link: doap http://usefulinc.com/ns/doap#
#+link: xsd http://www.w3.org/2001/XMLSchema#
#+link: skos http://www.w3.org/2004/02/skos/core#
#+end:

* Data queries
** Datasets
*** Dataset Predicates
#+begin_src sparql
SELECT DISTINCT
?p
# ?pp
# ?po
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset ?p ?o .
  # ?p ?pp ?po .
} ORDER BY ?p
#+end_src

#+RESULTS:
| p                                        |
|------------------------------------------|
| IAO:0000136                              |
| dc:description                           |
| dc:title                                 |
| TEMP:collectionTitle                     |
| TEMP:completenessOfDataset               |
| TEMP:contentsWereUpdatedAtTime           |
| TEMP:curationIndex                       |
| TEMP:errorIndex                          |
| TEMP:hasAdditionalFundingInformation     |
| TEMP:hasAwardNumber                      |
| TEMP:hasContactPerson                    |
| TEMP:hasDatasetTemplateSchemaVersion     |
| TEMP:hasDoi                              |
| TEMP:hasExpectedNumberOfSamples          |
| TEMP:hasExpectedNumberOfSubjects         |
| TEMP:hasExperimentalApproach             |
| TEMP:hasNumberOfContributors             |
| TEMP:hasNumberOfDirectories              |
| TEMP:hasNumberOfFiles                    |
| TEMP:hasNumberOfSamples                  |
| TEMP:hasNumberOfSubjects                 |
| TEMP:hasProtocol                         |
| TEMP:hasResponsiblePrincipalInvestigator |
| TEMP:hasSizeInBytes                      |
| TEMP:hasUriApi                           |
| TEMP:hasUriHuman                         |
| TEMP:isAboutParticipant                  |
| TEMP:isDescribedBy                       |
| TEMP:milestoneCompletionDate             |
| TEMP:protocolEmploysTechnique            |
| TEMP:statusOnPlatform                    |
| TEMP:submissionIndex                     |
| TEMP:unclassifiedIndex                   |
| TEMP:unclassifiedStages                  |
| TEMP:wasCreatedAtTime                    |
| TEMP:wasUpdatedAtTime                    |
| rdf:type                                 |
| rdfs:label                               |
*** Electrophysiology datasets
#+begin_src sparql
SELECT DISTINCT
?d
?label
?approach
WHERE {
  VALUES ?match { "electrophysiology" }
  ?d a sparc:Dataset ;
  rdfs:label ?l ;
  TEMP:hasExperimentalApproach ?approach .
  FILTER (str(?approach) = str(?match))
  BIND(substr(str(?l), 0, 40) AS ?label)
  # TODO lift and pull filetypes
}
#+end_src

*** Test
Originally from =sparcur.reports.SparqlQueries=.
**** Dataset about
#+begin_src sparql
SELECT DISTINCT
?dataset
?about
WHERE {
    ?dataset rdf:type sparc:Dataset .
    ?dataset isAbout: ?about .
}
LIMIT ?limit
#+end_src

#+RESULTS:
| dataset                                      | about                                       |
|----------------------------------------------+---------------------------------------------|
| dataset:013224e7-e3e3-4d8a-90ef-d1b237323eff | cardiac                                     |
| dataset:013224e7-e3e3-4d8a-90ef-d1b237323eff | elelectrophysiology                         |
| dataset:013224e7-e3e3-4d8a-90ef-d1b237323eff | patch clamp                                 |
| dataset:013224e7-e3e3-4d8a-90ef-d1b237323eff | UBERON:0002240                              |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | Laser Capture Microdissection               |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | Molecular Phenotype Gradients of Cell Types |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | Rat Intracardiac Neurons                    |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | Single Neuron Transcriptomics               |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | NCBITaxon:10116                             |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | UBERON:0000948                              |
**** Dataset subjects
#+name: dataset-subjects
#+begin_src sparql
SELECT DISTINCT
?dataset
?subj
WHERE {
    ?startsubj a sparc:Subject .
    ?startsubj TEMP:hasDerivedInformationAsParticipant ?dataset .
    ?subj a sparc:Subject .
    ?subj  TEMP:hasDerivedInformationAsParticipant ?dataset .
}
LIMIT ?limit
#+end_src

#+call: dataset-subjects(startsubj="<https://api.pennsieve.io/datasets/N:dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_19>", limit="100")

#+RESULTS:
| dataset                                      | subj                                                              |
|----------------------------------------------+-------------------------------------------------------------------|
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_01   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_03   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_04   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_06   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_07   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_08   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_09   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_10   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_11   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_12   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_07   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_08   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_11   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_13   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_14   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_15   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_16   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_02 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_04 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_10 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_11 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_12 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_13 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_15 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_17 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_18 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_19 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_02 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_05 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_09 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_14 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_15 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_16 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_18 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_19 |

**** Dataset groups
#+name: dataset-groups
#+begin_src sparql
SELECT DISTINCT
?dataset
?group
?subj
WHERE {
    ?startsubj TEMP:hasDerivedInformationAsParticipant ?dataset .
    ?subj  TEMP:hasDerivedInformationAsParticipant ?dataset .
    ?subj  TEMP:hasAssignedGroup ?group .
} LIMIT ?limit
#+end_src

#+call: dataset-groups(startsubj="<https://api.pennsieve.io/datasets/N:dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_19>", limit="100")

#+RESULTS:
| dataset                                      | group                | subj                                                              |
|----------------------------------------------+----------------------+-------------------------------------------------------------------|
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_01   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_03   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_04   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_06   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_07   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_08   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_09   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_10   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_11   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact female L6     | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IF_12   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact male L6       | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_07   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact male L6       | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_08   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact male L6       | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_11   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact male L6       | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_13   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact male L6       | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_14   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact male L6       | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_15   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Intact male L6       | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-IM_16   |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_02 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_04 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_10 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_11 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_12 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_13 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_15 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_17 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_18 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected female L6 | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxF_19 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected male L6   | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_02 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected male L6   | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_05 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected male L6   | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_09 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected male L6   | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_14 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected male L6   | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_15 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected male L6   | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_16 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected male L6   | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_18 |
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | Transected male L6   | dataset:07c31ef4-cc72-4348-813a-f074675643ed/subjects/sub-STxM_19 |

**** Dataset bundle
#+name: dataset-bundle
#+begin_src sparql
SELECT DISTINCT
?dataset
WHERE {
    ?startdataset TEMP:collectionTitle ?string .
    ?dataset  TEMP:collectionTitle ?string .
}
LIMIT ?limit
#+end_src

#+call: dataset-bundle(startdataset="dataset:bec4d335-9377-4863-9017-ecd01170f354")

#+RESULTS:
| dataset                                      |
|----------------------------------------------|
| dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1 |
| dataset:6d6818f2-ef75-4be5-9360-8d37661a8463 |
| dataset:6fa2666c-aa3d-4e27-a405-7848fc061b04 |
| dataset:be6c03c9-e427-488a-9dea-f4f64fca1f14 |
| dataset:bec4d335-9377-4863-9017-ecd01170f354 |

**** Dataset subject species
#+begin_src sparql :var limit="100"
SELECT DISTINCT
?dataset
?species
WHERE {
    #VALUES ?species { "human" "homo sapiens" "homo sapien (human)" } .
    ?dataset TEMP:isAboutParticipant ?subject .
    ?subject sparc:animalSubjectIsOfSpecies ?species .
    FILTER ( CONTAINS(str(?species), "human") || CONTAINS(str(?species), "homo sapiens") || ?species = NCBITaxon:9606 )
}
LIMIT ?limit
#+end_src

#+RESULTS:
| dataset                                      | species             |
|----------------------------------------------+---------------------|
| dataset:3b28ba19-e7ca-4ee2-be69-34029c31060a | homo sapien (human) |
| dataset:5e8be903-8796-408b-a404-8cf6bdca5cec | homo sapien (human) |
| dataset:b0c104b4-f448-4a33-9adb-33704a1890f8 | homo sapien (human) |
| dataset:194f0c6e-cfd5-4a40-9904-713c14111f80 | NCBITaxon:9606      |
| dataset:217920c9-08cc-4680-99ff-d321b0484098 | NCBITaxon:9606      |
| dataset:55c5b69c-a5b8-4881-a105-e4048af26fa5 | NCBITaxon:9606      |
| dataset:57466879-2cdd-4af2-8bd6-7d867423c709 | NCBITaxon:9606      |
| dataset:6d6818f2-ef75-4be5-9360-8d37661a8463 | NCBITaxon:9606      |
| dataset:6f657e63-735b-4ef0-9f31-06b8c2077703 | NCBITaxon:9606      |
| dataset:7a338939-fd82-4dbe-a1c0-3c0632fdd7ef | NCBITaxon:9606      |
| dataset:7d3aed89-ca43-41f5-9f21-e4bbce0d5888 | NCBITaxon:9606      |
| dataset:03dd0308-c7c0-47ab-b9ae-03042723b1ce | NCBITaxon:9606      |
| dataset:093c54b7-34c3-4204-9cea-0e2bdfd1fa93 | NCBITaxon:9606      |
| dataset:0e0a90b4-275f-40d9-b214-b84071bc0456 | NCBITaxon:9606      |
| dataset:a698310c-6310-4de4-83be-39e2f539581c | NCBITaxon:9606      |
| dataset:aec9ab8f-3c7f-4dd2-a638-466a6fb57f96 | NCBITaxon:9606      |
| dataset:c34c5b05-4934-4a17-953c-069adf3aec46 | NCBITaxon:9606      |

**** Dataset milestone completion date
#+begin_src sparql
SELECT DISTINCT
?dataset
?date
WHERE {
    ?dataset TEMP:milestoneCompletionDate ?date .
}
ORDER BY ASC(?date)
LIMIT ?limit
#+end_src

#+RESULTS:
| dataset                                      |                   date |
|----------------------------------------------+------------------------|
| dataset:1da4fa02-b7e1-4fb3-8cd1-f27d489f2ed8 |             04/31/2019 |
| dataset:8912fa28-8f9c-4851-8de8-bc0c788bf67b |          2019 - 12- 31 |
| dataset:f88a25e8-dcb8-487e-9f2d-930b4d3abded |             2019-01-15 |
| dataset:83fdbd3f-6028-4276-b2f0-bc6691b0d3cb | 2019-05-31, 2019-11-30 |
| dataset:59e64463-8bff-481a-8318-6230518ee487 |             2019-06-06 |
| dataset:f6dd731f-fa13-4dcd-af8f-00da5cc5855b |             2019-06-11 |
| dataset:fc6e3a87-1241-4f81-b284-8ebc82efc499 |             2019-06-30 |
| dataset:ae5ee3dc-1766-4c0d-a18f-c6ea2bb367c0 |             2019-11-30 |
| dataset:ed9a0da6-8dc1-49d4-8df1-cd528097a6a2 |             2020-02-15 |
| dataset:e2c90515-bbdb-4436-a48c-aafaefb604e6 |             2020-02-28 |

**** Award affiliations
Can we see the multi-institutional nature of SPARC collaborations?
#+begin_src sparql
SELECT DISTINCT
?award
?affiliation
(str(?affil_l) as ?al)
WHERE {
    ?dataset TEMP:hasAwardNumber ?award .
    ?contributor TEMP:contributorTo ?dataset .
    ?contributor TEMP:hasAffiliation ?affiliation .
    ?affiliation rdfs:label ?affil_l .
    # FILTER isUri(?affiliation)
}
ORDER BY ASC(?award) ASC(?al)
LIMIT ?limit
#+end_src

#+RESULTS:
| award                              | affiliation   | al                                                |
|------------------------------------+---------------+---------------------------------------------------|
| awards:AOD18017                    | ror:046rm7j60 | University of California, Los Angeles             |
| awards:NIH/FDAIAA:AOD1801700100000 | ror:002pd6e78 | Massachusetts General Hospital                    |
| awards:OT20D024912                 | ror:04a9tmd77 | Icahn School of Medicine at Mount Sinai           |
| awards:OT20D24912                  | ror:04a9tmd77 | Icahn School of Medicine at Mount Sinai           |
| awards:OT2OD023847                 | ror:05ht4p406 | Indiana University School of Medicine - Lafayette |
| awards:OT2OD023847                 | ror:02dqehb95 | Purdue University West Lafayette                  |
| awards:OT2OD023847                 | ror:00ysqcn41 | Thomas Jefferson University                       |
| awards:OT2OD023847                 | ror:01ej9dk98 | University of Melbourne                           |
| awards:OT2OD023847                 | ror:04402f517 | University of Nevada, Reno School of Medicine     |
| awards:OT2OD023848                 | ror:05a0ya142 | Broad Institute                                   |

** Protocols
*** Protocol general report
# TODO (make-directory "./reports/")

How to interpret this report.

The rows are ordered by
1. whether there is a dataset directly associated with the protocol id
2. whether the protocol has a human readable uri.
3. by the number of protcur annotations that have been made on the protocol

If there are zero protcur annotations it usually means that only the minimal protocol curation
workflow was completed. If there the number of protocol annotations is null it means that no
annotations of any kind have been made on that protocol. This can only happen for protocols that
come from the dataset description file.

If the dataset is null and there are annotations it usually means that the protocol is transitively
related to a dataset. There are annotations on the protocols that link them directly to the dataset
in question but we are not currently pulling them into the knowledge graph. It also means that the
protocol url in question was not listed in the dataset description file but may have been listed in
another protocol or in a collection of protocols.

If =hasUri= is false and dataset is not null then it usually means that the protocol has been
deleted or that something else has gone wrong. If dataset is null and =hasUri= is null it just means
that the protocol is present only in =protcur.ttl= and the additional identifiers have not been
processed.

#+header: :results file :file ./reports/protocol-report.csv
#+begin_src sparql
select distinct
?protocol
?n
(sample(?dataset) AS ?datasetx)
?doi_protocol
(sample(bound(?urih_protocol)) as ?hasUri)
where {
  ?protocol a sparc:Protocol .
  optional { ?protocol TEMP:hasNumberOfProtcurAnnotations ?n . }
  optional { ?dataset TEMP:hasProtocol ?protocol . }
  optional { ?protocol TEMP:hasDoi ?doi_protocol .}
  optional { ?protocol TEMP:hasUriHuman ?urih_protocol .}
}
group by ?protocol ?n ?doi_protocol ?hasUri
order by desc(bound(?datasetx)) asc(?hasUri) desc(?n)
#+end_src

#+RESULTS:
[[file:./reports/protocol-report.csv]]

*** Conditions studied
*** Experimental groups
#+name: experimental-groups-core
#+begin_src sparql :var limit="10"
WHERE {
    ?startsubj TEMP:hasDerivedInformationAsParticipant ?dataset .
    ?subj  TEMP:hasDerivedInformationAsParticipant ?dataset .
    ?subj  TEMP:hasAssignedGroup ?group .
}
#+end_src

#+name: experimental-groups
#+begin_src sparql :var limit="10" :noweb yes
SELECT DISTINCT
?dataset
?group
?subj
<<experimental-groups-core>>
ORDER BY ASC(?dataset) ASC(?group) LIMIT ?limit
#+end_src

#+RESULTS: experimental-groups
| dataset                                      | group | subj                                                           |
|----------------------------------------------+-------+----------------------------------------------------------------|
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17064 |
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17065 |
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17066 |
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub16013 |
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub16014 |
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub16015 |
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub16016 |
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub16017 |
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17018 |
| dataset:01b5cc2d-b321-4fed-8767-52771c4d680f |     0 | dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17020 |

#+name: experimental-groups-by-dataset
#+begin_src sparql :noweb yes :var limit="10"
SELECT DISTINCT
?group
?subj
<<experimental-groups-core>>
ORDER BY ASC(?group) LIMIT ?limit
#+end_src

#+RESULTS: experimental-groups-by-dataset
| group                                                                               | subj                                                                                              |
|-------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| (verify the effects of Actinomycin D (ActD) application on transcriptional changes) | dataset:91b1cfca-05e9-4445-bac8-04bf7a4593f1/samples/sub-20190807P_1_ActD_sam-20190807P_1_pC_ActD |
| 0 mA                                                                                | dataset:257a485a-89b3-4187-888a-9843b277e6cb/samples/sub-D6616_sam-D6616%20LA                     |
| 0 mA                                                                                | dataset:257a485a-89b3-4187-888a-9843b277e6cb/samples/sub-D6616_sam-D6616%20LV                     |
| 0 mA                                                                                | dataset:257a485a-89b3-4187-888a-9843b277e6cb/samples/sub-D6616_sam-D6616%20RA                     |
| 0 mA                                                                                | dataset:257a485a-89b3-4187-888a-9843b277e6cb/samples/sub-D6616_sam-D6616%20RV                     |
| 0 mA                                                                                | dataset:257a485a-89b3-4187-888a-9843b277e6cb/samples/sub-D6845_sam-D6845%20LA                     |
| 0 mA                                                                                | dataset:257a485a-89b3-4187-888a-9843b277e6cb/samples/sub-D6845_sam-D6845%20LV                     |
| 0 mA                                                                                | dataset:257a485a-89b3-4187-888a-9843b277e6cb/samples/sub-D6845_sam-D6845%20RA                     |
| 0 mA                                                                                | dataset:257a485a-89b3-4187-888a-9843b277e6cb/samples/sub-D6845_sam-D6845%20RV                     |
| 0 mA                                                                                | dataset:257a485a-89b3-4187-888a-9843b277e6cb/samples/sub-D6863_sam-D6863%20LA                     |

# #+call: experimental-groups-by-dataset(limit="20",dataset="dataset:01b5cc2d-b321-4fed-8767-52771c4d680f")
# FIXME this is broken
#+call: experimental-groups-by-dataset(limit="20", dataset="dataset:257a485a-89b3-4187-888a-9843b277e6cb")

#+RESULTS:
| group | subj                                                                                               |
|-------+----------------------------------------------------------------------------------------------------|
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17067 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17068 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17074 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17075 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17077 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17078 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17079 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17080 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17083 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17084 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17099 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17113 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17114 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17140 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17154 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17172 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub17173 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub16013 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub16014 |
|     0 | https://api.pennsieve.io/datasets/N:dataset:01b5cc2d-b321-4fed-8767-52771c4d680f/subjects/sub16015 |

*** Techniques
# #+header: :var dataset=(or)
#+begin_src sparql
SELECT DISTINCT
?dataset
?technique
# ?protocol
# ?technique_p
WHERE {
  { ?dataset a sparc:Dataset .
    ?dataset TEMP:protocolEmploysTechnique ?technique .
    # ?technique rdfs:label ?tl
  }
  UNION
  { ?dataset TEMP:hasProtocol ?protocol .
    ?protocol TEMP:protocolEmploysTechnique ?technique .
    # ?technique rdfs:label ?tl
  }
}
LIMIT ?limit
#+end_src

#+RESULTS:
| dataset                                      | technique        |
|----------------------------------------------+------------------|
| dataset:bdef79e4-ec07-409e-9237-afc7656f55f9 | tech:libraryPrep |
| dataset:d4ca262e-7893-4d72-9325-03dd08b053ce | tech:dissection  |
| dataset:2d0a2996-be8a-441d-816c-adfe3577fc7d | tech:dissection  |
| dataset:ff6eb067-62d4-4bfb-b4b2-15ad65db0999 | tech:dissection  |
| dataset:ff6eb067-62d4-4bfb-b4b2-15ad65db0999 | tech:imaging     |
| dataset:0e0a90b4-275f-40d9-b214-b84071bc0456 | tech:imaging     |
| dataset:02786240-2033-4f86-808d-daf345ce3165 | NLXINV:20090607  |
| dataset:6314677c-7dfd-41ff-96c8-2dd178207a84 | NLXINV:20090607  |
| dataset:a6c6803a-3a2e-4c69-9a94-3527083f13dc | NLXINV:20090607  |
| dataset:30237b91-610d-4d73-944b-5d7687508743 | tech:statistics  |

*** Test
Originally from =sparcur.reports.SparqlQueries=.
**** Protocol techniques
#+begin_src sparql
SELECT DISTINCT
?protocol
?technique
WHERE {
    ?protocol rdf:type sparc:Protocol .
    ?protocol TEMP:protocolEmploysTechnique ?technique .
}
LIMIT ?limit
#+end_src

#+RESULTS:
| protocol                                  | technique        |
|-------------------------------------------+------------------|
| https://journals.plos.org/plosone/article | tech:measuring   |
| https://journals.plos.org/plosone/article | tech:sigproc     |
| pio.api:18394                             | tech:libraryPrep |
| pio.api:18663                             | tech:surgical    |
| pio.api:18980                             | tech:surgical    |
| pio.api:18980                             | BIRNLEX:2135     |
| pio.api:18985                             | tech:statistics  |
| pio.api:18985                             | tech:surgical    |
| pio.api:18994                             | tech:dissection  |
| pio.api:19088                             | tech:dissection  |

**** Protocol aspects
#+begin_src sparql
SELECT DISTINCT
?protocol
?aspect
WHERE {
    ?protocol rdf:type sparc:Protocol .
    ?protocol TEMP:protocolInvolvesAspect ?ast .
    ?ast rdf:type protcur:aspect .
    ?ast TEMP:hasValue ?aspect .
}
LIMIT ?limit
#+end_src

#+RESULTS:
| protocol      | aspect          |
|---------------+-----------------|
| pio.api:18578 | PATO:0000033    |
| pio.api:18578 | PATO:0000146    |
| pio.api:18578 | PATO:0000918    |
| pio.api:18578 | PATO:0001309    |
| pio.api:18578 | asp:temperature |
| pio.api:18539 | PATO:0000146    |
| pio.api:18539 | asp:acidity     |
| pio.api:18539 | PATO:0001986    |
| pio.api:18539 | PATO:0000918    |
| pio.api:18578 | asp:location    |

**** Protocol inputs
# Note that the ontology alignment here is often incorrect
#+begin_src sparql
SELECT DISTINCT
?protocol
?ast_in
?input
WHERE {
    ?protocol rdf:type sparc:Protocol .
    ?protocol TEMP:protocolInvolvesInput ?ast_in .
    ?ast_in rdf:type protcur:input .
    ?ast_in TEMP:hasValue ?input .
}
LIMIT ?limit
#+end_src

#+RESULTS:
| protocol                                         | ast_in                             | input                                                      |
|--------------------------------------------------+------------------------------------+------------------------------------------------------------|
| https://journals.plos.org/plosone/article        | hyp-protcur:6lXR_IuiEemgDZOF7_cfnQ | http://www.cognitiveatlas.org/ontology/cogat.owl#CAO_00597 |
| https://journals.plos.org/plosone/article        | hyp-protcur:7sKuSovFEemigA9jhMKA-A | UBERON:0000020                                             |
| https://journals.plos.org/plosone/article        | hyp-protcur:8TBOcIcREem_VB9-fOAI0Q | PATO:0001199                                               |
| https://journals.plos.org/plosone/article        | hyp-protcur:bMhpYobsEemuebcALxBaUg | GO:0004235                                                 |
| https://journals.plos.org/plosone/article        | hyp-protcur:dPdc0oZXEemfeb-n9lk0Rw | UBERON:0003148                                             |
| https://www.biorxiv.org/content/10.1101/661033v1 | hyp-protcur:2ucUuowAEeq9npt2H-bQyA | CHEBI:6015                                                 |
| https://www.biorxiv.org/content/10.1101/661033v1 | hyp-protcur:7u4hZIwBEeq45CPjC1qfPw | CHEBI:16236                                                |
| https://www.biorxiv.org/content/10.1101/661033v1 | hyp-protcur:9W2mfIwBEeqfzsvP5y8ZjA | CHEBI:27338                                                |
| https://www.biorxiv.org/content/10.1101/661033v1 | hyp-protcur:C7X1yowBEeq40E_t4SzHlA | CHEBI:17790                                                |
| https://www.biorxiv.org/content/10.1101/661033v1 | hyp-protcur:dQqe4IvoEeqc3LelMIm4iQ | SCR:017322                                                 |

**** Protocol species dose
#+begin_src sparql
SELECT DISTINCT
?dataset
?protocol

?label_drug
?value_lt
WHERE {
    VALUES ?t {protcur:invariant protcur:parameter} .
    ?ast_inv a ?t .
    ?ast_inv TEMP:hasValue ?bnode .
    ?bnode ilxtr:jsonRecordType <https://uilx.org/tgbugs/u/sparcur-protcur-json-ld/quantity> .
    ?bnode rdf:value ?value_lt .
    ?bnode TEMP:hasUnit <https://uilx.org/tgbugs/u/sparcur-protcur-json-ld/milligram%20%2F%20kilogram> .
    FILTER (?value_lt < ?limit)

    ?ast_drug a protcur:input .
    ?ast_drug TEMP:hasValue ?drug .
                            ?drug rdfs:label ?label_drug .
    ?ast_drug TEMP:protcurChildren+ ?ast_child .
    ?ast_child TEMP:hasValue ?bnode .

    ?protocol a sparc:Protocol .
    ?protocol TEMP:protocolInvolvesInput ?ast_drug .

    ?protocol TEMP:protocolInvolvesInput ?ast_in_sp .
    ?ast_in_sp rdf:type protcur:input .
    ?ast_in_sp TEMP:hasValue ?species .

    OPTIONAL { ?dataset TEMP:hasProtocol ?protocol } .

}
ORDER BY ?label_input ?value_lt
#+end_src

#+RESULTS:
| dataset                                      | protocol      | label_drug         | value_lt |
|----------------------------------------------+---------------+--------------------+----------|
| dataset:4a216c79-1eab-451f-b096-5fa44bc00789 | pio.api:19342 | dexmedetomidine    |   3.3E-2 |
|                                              | pio.api:18980 | bolus of food      |   1.0E-1 |
|                                              | pio.api:18980 | bolus of food      |   1.0E-1 |
|                                              | pio.api:18980 | atropine           |   5.4E-1 |
| dataset:277a76fa-7f1e-4a19-9a70-d0729beef331 | pio.api:24077 | midazolam          |        1 |
| dataset:91dab959-7600-4f14-bae3-d1e6ba5c15ae | pio.api:24077 | midazolam          |        1 |
| dataset:98e467ce-7e43-4bbd-8ee7-ab8e2adcc6c0 | pio.api:24077 | midazolam          |        1 |
| dataset:d4ca262e-7893-4d72-9325-03dd08b053ce | pio.api:18994 | bupivacaine        |        2 |
| dataset:3a7ccb46-4320-4409-b359-7f4a7027bb9c | pio.api:23160 | lidocaine          |        2 |
| dataset:d4ca262e-7893-4d72-9325-03dd08b053ce | pio.api:18994 | lidocaine          |        4 |
| dataset:21957eae-0824-4fb5-b18f-04d6ed12ce18 | pio.api:19107 | lipopolysaccharide |        4 |
| dataset:4a216c79-1eab-451f-b096-5fa44bc00789 | pio.api:19342 | ketamine           |    6.6E0 |
| dataset:378d07cf-4b8b-49e8-a069-e96810e68b57 | pio.api:19640 | mixture            |        9 |
| dataset:378d07cf-4b8b-49e8-a069-e96810e68b57 | pio.api:19640 | xylazine           |        9 |
| dataset:fd07322c-ac30-488f-a6db-f5ff52c69e1b | pio.api:20256 | mixture            |        9 |
| dataset:fd07322c-ac30-488f-a6db-f5ff52c69e1b | pio.api:20256 | xylazine           |        9 |

** Datasets following same protocol with different subjects
*** Completeness
#+begin_src sparql
SELECT DISTINCT
?dataset
?completeness
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:completenessOfDataset ?completeness .
}
LIMIT ?limit
#+end_src

#+RESULTS:
| dataset                                      | completeness         |
|----------------------------------------------+----------------------|
| dataset:0426ab91-194d-431d-acf7-f9dfad26e295 | hasNEXT              |
| dataset:3b28ba19-e7ca-4ee2-be69-34029c31060a | Yes                  |
| dataset:88d3bbc6-014e-4ba3-a5ca-b27eddccfcc7 | hasNext, hasChildren |
| dataset:91b1cfca-05e9-4445-bac8-04bf7a4593f1 | hasNEXT              |
| dataset:a9b14217-9084-4fd8-ae0a-5e801e708e86 | part, Q4 yr 2        |
| dataset:ac2279ba-b8b0-4214-98af-437111a2ae61 | Ongoing study        |
| dataset:bfa288a0-1f6e-482f-858e-9529baa50b0f | On going             |
| dataset:c0b435a5-15d9-4cc8-9eb9-3c4a00626690 | hasNext, hasChildren |
| dataset:d484110a-e6e3-4574-aab2-418703c978e2 | hasNext              |
| dataset:dae2fef9-05e6-418f-8374-3af267643340 | hasNext              |
*** Dataset collections
#+begin_src sparql
SELECT DISTINCT
?title
?dataset
WHERE {
    ?startdataset TEMP:collectionTitle ?title .
    ?dataset  TEMP:collectionTitle ?title .
}
ORDER BY ASC(?title)
LIMIT ?limit
#+end_src

#+RESULTS:
| title                                                                                                                                   | dataset                                      |
|-----------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------|
| A multi-scale model of cardiac electrophysiology                                                                                        | dataset:c5c2f40f-76be-4979-bfc4-b9f9947231cf |
| AAV Serotypes 6_8_9 Intrapancreatic 4 weeks                                                                                             | dataset:fce3f57f-18ea-4453-887e-58a885e90e7e |
| AAV8 Titer and Route                                                                                                                    | dataset:458d3e2c-8f75-4298-bf10-8322b058b148 |
| AAV8 Titer and Route                                                                                                                    | dataset:b4e7758e-9a8f-4806-9bb0-1d5e7098df6a |
| AAVretro Serotype Intrapancreatic 4 weeks                                                                                               | dataset:43da251b-59bd-43fa-8a8a-3a0276da968f |
| Acute Effects of Efferent/Afferent Vagus Nerve Stimulation (VNS) on neural activity accessed with functional Magnetic Resonance Imaging | dataset:99592359-0c48-4b0c-ab3d-b8b1b79bb7bf |
| Acute Effects of Gastric Electrical Stimulation (GES) Settings on neural activity accessed with functional Magnetic Resonance Imaging   | dataset:2f4afec4-6e4d-4c20-b913-8e115fc8631b |
| Acute Effects of Vagus Nerve Stimulation (VNS) Settings on neural activity in the nucleus of solitary tract (NTS)                       | dataset:e25a096b-7180-471a-847d-4aa711113d54 |
| Acute Effects of efferent/afferent Vagus Nerve Stimulation (VNS) on neural activity accessed with functional Magnetic Resonance Imaging | dataset:70f8888b-0b9e-4e9d-93ca-2103e8828512 |
| Acute effects of gastric electrical stimulation settings on gastric motility assessed with MRI                                          | dataset:c2564991-28d5-42cf-bfb6-8f93b874a5af |

** Subjects
*** Members
Show me all of the experimental subjects that a dataset contains information about.
#+begin_src sparql
SELECT DISTINCT
?dataset
?subject
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:isAboutParticipant ?subject .
  ?subject a sparc:Subject .
}
LIMIT ?limit
#+end_src

#+RESULTS:
| dataset                                      | subject                                                        |
|----------------------------------------------+----------------------------------------------------------------|
| dataset:6a280dc2-1d0b-434f-8387-3c8e3615c649 | dataset:6a280dc2-1d0b-434f-8387-3c8e3615c649/subjects/11050    |
| dataset:6a280dc2-1d0b-434f-8387-3c8e3615c649 | dataset:6a280dc2-1d0b-434f-8387-3c8e3615c649/subjects/11051    |
| dataset:6a280dc2-1d0b-434f-8387-3c8e3615c649 | dataset:6a280dc2-1d0b-434f-8387-3c8e3615c649/subjects/11052    |
| dataset:6a280dc2-1d0b-434f-8387-3c8e3615c649 | dataset:6a280dc2-1d0b-434f-8387-3c8e3615c649/subjects/11053    |
| dataset:6b29ddff-86fc-4dc3-bb78-8e572a788a85 | dataset:6b29ddff-86fc-4dc3-bb78-8e572a788a85/subjects/sub-cat5 |
| dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1 | dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1/subjects/sub-10   |
| dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1 | dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1/subjects/sub-11   |
| dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1 | dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1/subjects/sub-12   |
| dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1 | dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1/subjects/sub-13   |
| dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1 | dataset:6c059ef7-f94a-40af-ab5a-50f482737fc1/subjects/sub-14   |

*** Total
Show me the total number of subjects in the knowledge graph.
#+begin_src sparql
SELECT DISTINCT
(COUNT(DISTINCT ?subject) as ?count_subject)
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:isAboutParticipant ?subject .
  ?subject a sparc:Subject .
}
#+end_src

#+RESULTS:
| count_subject |
|---------------|
|          2271 |

*** Subject Metadata
Show me a regularized set of metadata for all subjects that includes the following.
- Identifier
- Group
- Species
- Strain
- Sex
- Age Category
- Age
- Mass

# #+header: :var species="NCBITaxon:10116"
# #+header: :var species="NCBITaxon:9685"
#+name: subject-metadata
#+begin_src sparql
SELECT DISTINCT
?local_id

?assigned_group

?l_species
?strain
?l_sex

?age_category
?age_value
?age_unit

?mass_value
?mass_unit

WHERE {
  ?subject a sparc:Subject .
  ?subject TEMP:localId ?local_id .
  ?subject sparc:animalSubjectIsOfSpecies ?species . OPTIONAL { ?species rdfs:label ?l_species . }
  OPTIONAL { ?subject sparc:animalSubjectIsOfStrain ?strain . } # ?strain rdfs:label ?l_strain .
  OPTIONAL { ?subject TEMP:hasBiologicalSex ?sex . ?sex rdfs:label ?l_sex . }
  OPTIONAL { ?subject TEMP:hasAgeCategory ?age_category . }
  OPTIONAL { ?subject TEMP:hasAssignedGroup ?assigned_group . }
  # OPTIONAL { ?subject TEMP:participantInPerformanceOf ?protocol . }

  OPTIONAL {
  # mass
  ?subject sparc:animalSubjectHasWeight ?bn_mass .
  ?bn_mass a sparc:Measurement .
  ?bn_mass TEMP:hasUnit ?mass_unit .
  ?bn_mass rdf:value ?mass_value .
}
  OPTIONAL {
  # age
  ?subject TEMP:hasAge ?bn_age .
  ?bn_age a sparc:Measurement .
  ?bn_age TEMP:hasUnit ?age_unit .
  ?bn_age rdf:value ?age_value .
}
#  VALUES ?l_s {?species ?sex}  # doesn't work, if it did it would duplicate rows
#  ?l_s rdfs:label ?label
} LIMIT ?limit
#+end_src

#+RESULTS: subject-metadata
| local_id                | assigned_group | l_species    | strain   | l_sex | age_category      | age_value | age_unit           | mass_value | mass_unit |
|-------------------------+----------------+--------------+----------+-------+-------------------+-----------+--------------------+------------+-----------|
| sub-nNOS_Male_Subject_1 | nNOS-ChR2      | Mus musculus | C57BL/6  |       | prime adult stage |        84 | unit:dimensionless |            |           |
| sub-nNOS_Male_Subject_2 | nNOS-ChR2      | Mus musculus | C57BL/6  |       | prime adult stage |        84 | unit:dimensionless |            |           |
| sub-nNOS_Male_Subject_3 | nNOS-ChR2      | Mus musculus | C57BL/6  |       | prime adult stage |        56 | unit:dimensionless |            |           |
| sub-C57 061801          | Cleared 1mm    | Mus musculus | C57/Bl6J |       |                   |         4 | unit:week          |            |           |
| sub-C57 061802          | Cleared 1mm    | Mus musculus | C57/Bl6J |       |                   |         4 | unit:week          |            |           |
| sub-C57 061803          | Cleared 1mm    | Mus musculus | C57/Bl6J |       |                   |         4 | unit:week          |            |           |
| sub-C57 061804          | Cleared 1mm    | Mus musculus | C57/Bl6J |       |                   |         4 | unit:week          |            |           |
| sub-C57 071019 01       | WT 150um       | Mus musculus | C57/Bl6J |       |                   |        18 | unit:week          |            |           |
| sub-C57 071019 02       | WT 150um       | Mus musculus | C57/Bl6J |       |                   |        18 | unit:week          |            |           |
| sub-C57 071019 03       | WT 150um       | Mus musculus | C57/Bl6J |       |                   |        18 | unit:week          |            |           |

#+call: subject-metadata() :var species="NCBITaxon:10090"

#+RESULTS:
| local_id                              | assigned_group                                                                                                        | l_species    | strain    | l_sex | age_category      | age_value | age_unit           | mass_value | mass_unit |
|---------------------------------------+-----------------------------------------------------------------------------------------------------------------------+--------------+-----------+-------+-------------------+-----------+--------------------+------------+-----------|
| nNOS Male Subject 2                   | nNOS-NpHR                                                                                                             | Mus musculus | C57/bl6   |       | prime adult stage |        56 | unit:dimensionless |            |           |
| nNOS Male Subject 3                   | nNOS-NpHR                                                                                                             | Mus musculus | C57/bl6   |       | prime adult stage |        56 | unit:dimensionless |            |           |
| AV8-NSE-IP-1                          | AAV Serotypes 6_8_9 intrapancreatic injection                                                                         | Mus musculus | C57BL/6J  |       | Adult             |         3 | unit:month         |            |           |
| AV8-NSE-IP-2                          | AAV Serotypes 6_8_9 intrapancreatic injection                                                                         | Mus musculus | C57BL/6J  |       | Adult             |         3 | unit:month         |            |           |
| AV8-NSE-IP-3                          | AAV Serotypes 6_8_9 intrapancreatic injection                                                                         | Mus musculus | C57BL/6J  |       | Adult             |         3 | unit:month         |            |           |
| AV8-NSE-IP-4                          | AAV Serotypes 6_8_9 intrapancreatic injection                                                                         | Mus musculus | C57BL/6J  |       | Adult             |         3 | unit:month         |            |           |
| AV8-NSE-IP-5                          | AAV Serotypes 6_8_9 intrapancreatic injection                                                                         | Mus musculus | C57BL/6J  |       | Adult             |         3 | unit:month         |            |           |
| AV8-NSE-IP-6                          | AAV Serotypes 6_8_9 intrapancreatic injection                                                                         | Mus musculus | C57BL/6J  |       | Adult             |         3 | unit:month         |            |           |
| sub-RZ9-L10EGFP-AAV-cre-mcherry-BAT1  | AAV6-hSyn-mCherry-cre injected in iBAT bilaterally, followed by about 4 week incubation and then 7-day 28°C treatment | Mus musculus | EGFP-L10a |       |                   |        21 | unit:postnatal_day |            |           |
| sub-RZ9-L10EGFP-AAV-cre-mcherry-BAT10 | AAV6-hSyn-mCherry-cre injected in iBAT bilaterally, followed by about 4 week incubation and then 7-day 28°C treatment | Mus musculus | EGFP-L10a |       |                   |        17 | unit:postnatal_day |            |           |

** Samples
*** Members
Show me all of the experimental samples that a dataset contains information about.
#+begin_src sparql
SELECT DISTINCT
?dataset
?sample
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:isAboutParticipant ?sample .
  ?sample a sparc:Sample .
}
LIMIT ?limit
#+end_src

#+RESULTS:
| dataset                                      | sample                                                                   |
|----------------------------------------------+--------------------------------------------------------------------------|
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_60A-3 |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_60A-4 |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_60B-1 |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_60B-2 |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_60B-3 |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_60B-4 |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_65A-1 |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_70A-1 |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_70A-3 |
| dataset:0170271a-8fac-4769-a8f5-2b9520291d03 | dataset:0170271a-8fac-4769-a8f5-2b9520291d03/samples/sub-HB_sam-HB_70A-4 |

*** Total
Show me the total number of subjects in the knowledge graph.
#+begin_src sparql
SELECT DISTINCT
(COUNT(DISTINCT ?subject) as ?count_subject)
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:isAboutParticipant ?subject .
  ?subject a sparc:Sample .
}
#+end_src

#+RESULTS:
| count_subject |
|---------------|
|          7052 |

*** Sample predicates
#+begin_src sparql
SELECT DISTINCT
?p
WHERE {
  ?sample a sparc:Sample .
  ?sample ?p ?o .
}
#+end_src

#+RESULTS:
| p                                         |
|-------------------------------------------|
| TEMP:TODO                                 |
| TEMP:hasDerivedInformationAsParticipant   |
| TEMP:localId                              |
| TEMP:raw/wasExtractedFromAnatomicalRegion |
| TEMP:wasDerivedFromSubject                |
| rdf:type                                  |
| TEMP:participantInPerformanceOf           |
| TEMP:hasAssignedGroup                     |
| TEMP:hasFolderAboutIt                     |
| TEMP:raw/hasDigitalArtifactThatIsAboutIt  |
| TEMP:providerNote                         |
| TEMP:localPerformanceNumber               |

*** Sample Metadata
Show me a regularized set of metadata for all subjects that includes the following.
- Identifier
- Group
- Anatomical entity
#+name: sample-metadata
#+begin_src sparql
SELECT DISTINCT
?subject_lid

?local_id

?assigned_group

(str(?anat_ent_src) as ?aess)

WHERE {
  ?sample a sparc:Sample .
  ?sample TEMP:localId ?local_id .

  ?sample TEMP:wasDerivedFromSubject ?subject .
  ?subject TEMP:localId ?subject_lid .
  ?subject a sparc:Subject .

  OPTIONAL { ?sample TEMP:hasAssignedGroup ?assigned_group . }
  OPTIONAL { ?sample TEMPRAW:wasExtractedFromAnatomicalRegion ?anat_ent_src . }
  # OPTIONAL { ?sample TEMP:participantInPerformanceOf ?protocol . }
}
LIMIT ?limit
#+end_src

#+RESULTS: sample-metadata
| subject_lid     | local_id        | assigned_group | aess                           |
|-----------------+-----------------+----------------+--------------------------------|
| 62_F_14121963   | 62_F_14121963   |                | descending colon               |
| 63_F_30051973   | 63_F_30051973   |                | sigmoid colon                  |
| sub-20180809_G5 | sam-20180809_G5 | compression    | Colon, inner submucosal plexus |
| sub-20180813_G5 | sam-20180813_G5 | compression    | Colon, inner submucosal plexus |
| sub-20180821_G5 | sam-20180821_G5 | compression    | Colon, inner submucosal plexus |
| sub-20180827_G3 | sam-20180827_G3 | compression    | Colon, inner submucosal plexus |
| sub-20180828_G2 | sam-20180828_G2 | compression    | Colon, inner submucosal plexus |
| sub-20180905_G1 | sam-20180905_G1 | compression    | Colon, inner submucosal plexus |
| sub-20180906_G3 | sam-20180906_G3 | compression    | Colon, inner submucosal plexus |
| sub-20180911_G5 | sam-20180911_G5 | compression    | Colon, inner submucosal plexus |

** Anatomical entities
*** Dataset
**** Involves
# FIXME unused at the moment
#+begin_src sparql :var limit="30"
SELECT DISTINCT
?dataset
?protocol
#?ae
(str(?aes) as ?entity)
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:hasProtocol ?protocol .
  ?protocol TEMPRAW:involvesAnatomicalRegion ?aes .
  # ?ae rdfs:label ?l_ae .
}
ORDER BY ASC(?entity)
LIMIT ?limit
#+end_src

#+RESULTS:
| dataset                                      | protocol      | entity                                  |
|----------------------------------------------+---------------+-----------------------------------------|
| dataset:07c31ef4-cc72-4348-813a-f074675643ed | pio.api:19369 |                                         |
| dataset:ac2279ba-b8b0-4214-98af-437111a2ae61 | pio.api:32915 | 2 CMOS cameras (SciMedia, MiCAM ULTIMA) |
| dataset:6ce2e98e-5217-4952-897d-017285d303b2 | pio.api:18769 | BAT                                     |
| dataset:fd2de29c-4f29-494c-8da4-b157a10223ef | pio.api:18925 | BAT                                     |
| dataset:5f54d5c1-82ab-4a4c-b3bc-5b6767419010 | pio.api:36610 | Bladder                                 |
| dataset:ca9afa19-b616-41a9-a532-3ae5aaf4088f | pio.api:22894 | C2 and C3 dorsal roots                  |
| dataset:ca9afa19-b616-41a9-a532-3ae5aaf4088f | pio.api:22894 | C2 lamina                               |
| dataset:ca9afa19-b616-41a9-a532-3ae5aaf4088f | pio.api:22894 | C2 nerve roots                          |
| dataset:ae5ee3dc-1766-4c0d-a18f-c6ea2bb367c0 | pio.api:30983 | Cervical Vagus Nerve                    |
| dataset:9b5f78ac-850a-43ab-aebe-c15b470a008b | pio.api:19127 | Coeliac ganglia                         |
| dataset:b4e7758e-9a8f-4806-9bb0-1d5e7098df6a | pio.api:19127 | Coeliac ganglia                         |
| dataset:c23e9319-fe3c-4354-aca8-259e8cff0f7a | pio.api:19127 | Coeliac ganglia                         |
| dataset:fce3f57f-18ea-4453-887e-58a885e90e7e | pio.api:19127 | Coeliac ganglia                         |
| dataset:43da251b-59bd-43fa-8a8a-3a0276da968f | pio.api:18947 | Coeliac ganglia                         |
| dataset:458d3e2c-8f75-4298-bf10-8322b058b148 | pio.api:18947 | Coeliac ganglia                         |
| dataset:78e5602a-98a8-4323-8efd-db77466030c3 | pio.api:18947 | Coeliac ganglia                         |
| dataset:8742cd78-1ad8-4c17-aa12-42c06e898ded | pio.api:18947 | Coeliac ganglia                         |
| dataset:9b5f78ac-850a-43ab-aebe-c15b470a008b | pio.api:18947 | Coeliac ganglia                         |
| dataset:b4e7758e-9a8f-4806-9bb0-1d5e7098df6a | pio.api:18947 | Coeliac ganglia                         |
| dataset:c23e9319-fe3c-4354-aca8-259e8cff0f7a | pio.api:18947 | Coeliac ganglia                         |
| dataset:fce3f57f-18ea-4453-887e-58a885e90e7e | pio.api:18947 | Coeliac ganglia                         |
| dataset:43da251b-59bd-43fa-8a8a-3a0276da968f | pio.api:19127 | Coeliac ganglia                         |
| dataset:458d3e2c-8f75-4298-bf10-8322b058b148 | pio.api:19127 | Coeliac ganglia                         |
| dataset:78e5602a-98a8-4323-8efd-db77466030c3 | pio.api:19127 | Coeliac ganglia                         |
| dataset:8742cd78-1ad8-4c17-aa12-42c06e898ded | pio.api:19127 | Coeliac ganglia                         |
| dataset:277a76fa-7f1e-4a19-9a70-d0729beef331 | pio.api:24077 | Colon                                   |
| dataset:91dab959-7600-4f14-bae3-d1e6ba5c15ae | pio.api:24077 | Colon                                   |
| dataset:98e467ce-7e43-4bbd-8ee7-ab8e2adcc6c0 | pio.api:24077 | Colon                                   |
| dataset:43da251b-59bd-43fa-8a8a-3a0276da968f | pio.api:19127 | Dorsal Root Ganglia                     |
| dataset:458d3e2c-8f75-4298-bf10-8322b058b148 | pio.api:19127 | Dorsal Root Ganglia                     |

**** About
#+begin_src sparql
SELECT DISTINCT
?dataset
# ?ae
(str(?l_ae) as ?entity)
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset isAbout: ?ae .  # TODO not 100% on the modelling here
  ?ae rdfs:label ?l_ae .
  ?ae rdfs:subClassOf* UBERON:0001062 .  # have to load uberon for this
}
ORDER BY ASC(?l_ae)
LIMIT ?limit
#+end_src

#+RESULTS:
| dataset                                      | entity                   |
|----------------------------------------------+--------------------------|
| dataset:1284a4e8-21e1-4b9f-9280-6ba06f6b9a50 | adipose tissue           |
| dataset:1873396f-8d82-4d6c-93f7-52117470e4a1 | autonomic nervous system |
| dataset:1b137c7e-2f07-4a78-8079-828b37743306 | autonomic nervous system |
| dataset:21957eae-0824-4fb5-b18f-04d6ed12ce18 | autonomic nervous system |
| dataset:29df9b97-a20b-469c-bf48-9389f1e31a11 | axon tract               |
| dataset:11d3dbdf-d90c-4e42-8341-cc4a956f5c9c | bladder organ            |
| dataset:7067a6f5-8df2-4ef8-953a-4d0bfafe6555 | bladder organ            |
| dataset:b2a88634-e2b0-49dc-9fe3-f61f784459f2 | bladder organ            |
| dataset:f7570dd0-24c4-4bc8-8faf-b93bd0e759f3 | bladder organ            |
| dataset:b0c104b4-f448-4a33-9adb-33704a1890f8 | body of stomach          |

**** Sample Source
#+name: dataset-sample-source
#+begin_src sparql :var limit="20"
SELECT DISTINCT
?dataset
(str(?ae) as ?aes)
# ?slid
WHERE {
  ?sample TEMP:hasDerivedInformationAsParticipant ?dataset .
  ?sample TEMPRAW:wasExtractedFromAnatomicalRegion ?ae .
  ?sample a sparc:Sample .
  # ?sample TEMP:localId ?slid .
  ?dataset a sparc:Dataset .
}
ORDER BY
DESC(?ae)
# ASC(?slid)
LIMIT ?limit
#+end_src

#+RESULTS: dataset-sample-source
| dataset                                      | aes                             |
|----------------------------------------------+---------------------------------|
| dataset:b225fa8a-9eb5-4716-8399-0f7fac9c2b64 | whole stomach                   |
| dataset:82c228a2-134a-4f6f-82f2-d89e64cb7be1 | whole stomach                   |
| dataset:57466879-2cdd-4af2-8bd6-7d867423c709 | vasculature of the the pancreas |
| dataset:91b1cfca-05e9-4445-bac8-04bf7a4593f1 | transverse colon                |
| dataset:4a361ad8-d500-4f3d-81f8-c92f504946b2 | torus pyloricus                 |
| dataset:21957eae-0824-4fb5-b18f-04d6ed12ce18 | systemic                        |
| dataset:3a7ccb46-4320-4409-b359-7f4a7027bb9c | superior cervical ganglia       |
| dataset:6fa2666c-aa3d-4e27-a405-7848fc061b04 | subdiaphragmatic vagus nerve    |
| dataset:bec4d335-9377-4863-9017-ecd01170f354 | subdiaphragmatic vagus nerve    |
| dataset:c082215b-6765-4cc8-a965-92773b4c18c1 | subdiaphragmatic vagus nerve    |
| dataset:e8816bce-809a-4c78-8950-6f61911b6eac | stomach                         |
| dataset:c50d5ab3-1370-4492-9d16-00834e0d34f3 | stellate ganglion/T1-T5         |
| dataset:c34c5b05-4934-4a17-953c-069adf3aec46 | stellate ganglion               |
| dataset:d1f386c0-1715-49ce-be14-890a4ede011d | stellate ganglion               |
| dataset:e8816bce-809a-4c78-8950-6f61911b6eac | spleen                          |
| dataset:9d8ad16c-2ae7-414c-8573-048303039c76 | spinal cord, segments L5-S2     |
| dataset:7d3aed89-ca43-41f5-9f21-e4bbce0d5888 | sigmoid colon                   |
| dataset:03dd0308-c7c0-47ab-b9ae-03042723b1ce | sigmoid colon                   |
| dataset:aec9ab8f-3c7f-4dd2-a638-466a6fb57f96 | sigma                           |
| dataset:be6c03c9-e427-488a-9dea-f4f64fca1f14 | sample middle ~2 cm             |

*** Protocol
**** Simple
#+begin_src sparql :var limit="10"
SELECT DISTINCT
?protocol
WHERE {
  ?protocol a sparc:Protocol .
  FILTER CONTAINS(str(?protocol), "protocols.io")
} LIMIT ?limit
#+end_src

#+RESULTS:
| protocol      |
|---------------|
| pio.api:18394 |
| pio.api:18417 |
| pio.api:18444 |
| pio.api:18445 |
| pio.api:18539 |
| pio.api:18578 |
| pio.api:18595 |
| pio.api:18655 |
| pio.api:18663 |
| pio.api:18769 |

**** Protocol triples
#+begin_src sparql :var limit="20"
SELECT DISTINCT
?protocol
?p
?o
WHERE {
  ?protocol a sparc:Protocol .
  ?protocol ?p ?o
  FILTER CONTAINS(str(?protocol), "protocols.io")
} LIMIT ?limit
#+end_src

#+RESULTS:
| protocol      | p                                  | o                                  |
|---------------+------------------------------------+------------------------------------|
| pio.api:18394 | TEMP:hasNumberOfProtcurAnnotations | 63                                 |
| pio.api:18394 | TEMP:protocolEmploysTechnique      | tech:libraryPrep                   |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:4F6uUDCwEemuIwe2CVh8qw |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:dATrNFDbEemP_Pt1hFU0Jg |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:Eexs4kTsEem4nRdvaoZSBA |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:EKfe_DCwEemocGufjfOTWw |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:eoEhhjCvEemMdjMzyrpv_w |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:eR8AzkTrEemyKMNIUcyiDQ |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:fNEBiETpEemLec_DS2dlpQ |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:gqhZvjCwEemuIivyBGDcHg |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:hBM99jCvEempX7O2kC2gWQ |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:hW9jEkToEemm91_9sqXgdg |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:i7vKoDCvEemMd1tB16R8lg |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:J4e-RDCwEemjsb-nUO42IA |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:LhWxbDCwEem83ttc8K5YCg |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:lPXfUkTrEemhtU_Jwz0Gyw |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:Mtec6DCvEemma080RWXdWw |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:OHfIOjCvEem88rcFq1qp4Q |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:pSUcjjCwEemp22thowiTcw |
| pio.api:18394 | TEMP:protocolInvolvesAction        | hyp-protcur:PyxS-DCwEemeJA9Q0nCKog |

**** Involves
NOTE In order for these to work with subClassOf =UBERON= uberon must be loaded.
#+begin_src sparql :var limit="20"
SELECT DISTINCT
?protocol
?bb_value
(str(?l_bb) as ?ls)
WHERE {
  ?protocol a sparc:Protocol .
  ?protocol TEMP:protocolInvolvesBlackBox ?ast_bb .

  ?ast_bb rdf:type protcur:black-box .  # TODO need to refine on organ an ingest the new alignment
  ?ast_bb TEMP:hasValue ?bb_value .

  ?bb_value rdfs:subClassOf+ UBERON:0001062 .
  ?bb_value rdfs:label ?l_bb .
} LIMIT ?limit
#+end_src

#+RESULTS:
| protocol      | bb_value       | ls                        |
|---------------+----------------+---------------------------|
| pio.api:18947 | UBERON:0003684 | abdominal cavity          |
| pio.api:19127 | UBERON:0003684 | abdominal cavity          |
| pio.api:20025 | UBERON:0006082 | fundus of urinary bladder |
| pio.api:26704 | UBERON:0000974 | neck                      |
| pio.api:19341 | UBERON:0005363 | inferior vagus X ganglion |
| pio.api:23160 | UBERON:0014398 | respiratory muscle        |
| pio.api:22833 | UBERON:0000945 | stomach                   |
| pio.api:25817 | UBERON:0000948 | heart                     |

# seems like there are some issues with labels https://jira.blazegraph.com/browse/BLZG-4476
# :format application/sparql-results+xml
#+begin_src sparql :var limit="20"
SELECT DISTINCT
?protocol
?bbc_value
(str(?l_bbc) as ?bbl)
WHERE {
  ?protocol a sparc:Protocol .
  ?protocol TEMP:protocolInvolvesBlackBoxComponent ?ast_bbc .

  ?ast_bbc rdf:type protcur:black-box-component .  # TODO need to refine on organ an ingest the new alignment
  ?ast_bbc TEMP:hasValue ?bbc_value .

  ?bbc_value rdfs:subClassOf+ UBERON:0001062 .
  ?bbc_value rdfs:label ?l_bbc .
} ORDER BY ?bbl LIMIT ?limit
#+end_src

#+RESULTS:
| protocol      | bbc_value      | bbl     |
|---------------+----------------+---------|
| pio.api:19297 | UBERON:0000916 | abdomen |
| pio.api:26737 | UBERON:0000916 | abdomen |
| pio.api:19255 | UBERON:0000916 | abdomen |
| pio.api:19269 | UBERON:0000916 | abdomen |
| pio.api:36547 | UBERON:0000916 | abdomen |
| pio.api:19341 | UBERON:0000916 | abdomen |
| pio.api:36609 | UBERON:0000916 | abdomen |
| pio.api:31143 | UBERON:0000916 | abdomen |
| pio.api:25923 | UBERON:0000916 | abdomen |
| pio.api:19299 | UBERON:0000916 | abdomen |
| pio.api:18655 | UBERON:0000916 | abdomen |
| pio.api:18663 | UBERON:0000916 | abdomen |
| pio.api:36610 | UBERON:0000916 | abdomen |
| pio.api:19298 | UBERON:0000916 | abdomen |
| pio.api:18786 | UBERON:0000916 | abdomen |
| pio.api:36552 | UBERON:0000916 | abdomen |
| pio.api:36617 | UBERON:0000916 | abdomen |
| pio.api:19127 | UBERON:0000916 | abdomen |
| pio.api:22900 | UBERON:0000916 | abdomen |
| pio.api:26687 | UBERON:0000916 | abdomen |

** Uberon tests
In order to use these you need to load the latest version of uberon into blazegraph.
#+begin_src sparql :var limit="15"
SELECT DISTINCT ?sc (str(?l) as ?label) WHERE {
  # BIND("brain" AS ?label) # Well would you look at that!
  VALUES (?root) { ( UBERON:0001062 ) }
  ?sc rdfs:subClassOf+ ?root .
  ?sc rdfs:label ?l .
} ORDER BY ASC(?label) LIMIT ?limit
#+end_src

#+RESULTS:
| sc             | label                                               |
|----------------+-----------------------------------------------------|
| UBERON:0013155 | 1st arch mandibular ectoderm                        |
| UBERON:0013156 | 1st arch mandibular endoderm                        |
| UBERON:0010339 | 1st arch mandibular mesenchyme from head mesenchyme |
| UBERON:0007238 | 1st arch maxillary component                        |
| UBERON:0012313 | 1st arch maxillary ectoderm                         |
| UBERON:0013154 | 1st arch maxillary endoderm                         |
| UBERON:0010338 | 1st arch maxillary mesenchyme from head mesenchyme  |
| UBERON:0013157 | 1st arch maxillary-mandibular cleft                 |
| UBERON:0010341 | 1st arch mesenchyme from head mesenchyme            |
| UBERON:0005872 | 1st arch pharyngeal cleft                           |
| UBERON:0019249 | 2-cell stage embryo                                 |
| UBERON:0005660 | 2nd arch ectoderm                                   |
| UBERON:0005664 | 2nd arch endoderm                                   |
| UBERON:0005689 | 2nd arch mesenchyme                                 |
| UBERON:0010343 | 2nd arch mesenchyme from head mesenchyme            |

#+begin_src sparql
select ?p ?o where {
    VALUES (?s) { ( UBERON:0001062 ) }
    ?s ?p ?o .
}
#+end_src

#+RESULTS:
| p                        | o                                                                                                                                                                         |
|--------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| oboInOwl:id              | UBERON:0001062                                                                                                                                                            |
| definition:              | Biological entity that is either an individual member of a biological species or constitutes the structural organization of an individual member of a biological species. |
| oboInOwl:hasDbXref       | AAO:0010841                                                                                                                                                               |
| oboInOwl:hasDbXref       | AEO:0000000                                                                                                                                                               |
| oboInOwl:hasDbXref       | BILA:0000000                                                                                                                                                              |
| oboInOwl:hasDbXref       | BIRNLEX:6                                                                                                                                                                 |
| oboInOwl:hasDbXref       | CARO:0000000                                                                                                                                                              |
| oboInOwl:hasDbXref       | EHDAA2:0002229                                                                                                                                                            |
| oboInOwl:hasDbXref       | FBbt_root:00000000                                                                                                                                                        |
| oboInOwl:hasDbXref       | FBbt:10000000                                                                                                                                                             |
| oboInOwl:hasDbXref       | FMA:62955                                                                                                                                                                 |
| oboInOwl:hasDbXref       | HAO:0000000                                                                                                                                                               |
| oboInOwl:hasDbXref       | MA:0000001                                                                                                                                                                |
| oboInOwl:hasDbXref       | NCIT:C12219                                                                                                                                                               |
| oboInOwl:hasDbXref       | TAO:0100000                                                                                                                                                               |
| oboInOwl:hasDbXref       | TGMA:0001822                                                                                                                                                              |
| oboInOwl:hasDbXref       | UMLS:C1515976                                                                                                                                                             |
| oboInOwl:hasDbXref       | WBbt:0000100                                                                                                                                                              |
| oboInOwl:hasDbXref       | XAO:0000000                                                                                                                                                               |
| oboInOwl:hasDbXref       | ZFA:0100000                                                                                                                                                               |
| oboInOwl:hasDbXref       | http://linkedlifedata.com/resource/umls/id/C1515976                                                                                                                       |
| oboInOwl:hasOBONamespace | uberon                                                                                                                                                                    |
| oboInOwl:inSubset        | http://purl.obolibrary.org/obo/uberon/core#upper_level                                                                                                                    |
| rdf:type                 | owl:Class                                                                                                                                                                 |
| rdfs:label               | anatomical entity                                                                                                                                                         |

** Associated scaffolds
** Manifest files
A SODA development use case. Find me datasets that have top level manifests with no errors.
#+begin_src sparql
SELECT DISTINCT
?dataset
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:hasPart+ ?file .
  ?file a sparc:File .
  ?file a sparc:Manifest .
  ?file TEMP:hasParent ?dataset . # this is the tricky bit, because we conflate the identifier for dataset and the folder
  ?file TEMP:hasErrors 0 .
}
LIMIT ?limit
#+end_src
** Contributors
*** Count
#+begin_src sparql
SELECT DISTINCT
(COUNT(DISTINCT ?person) as ?cp)
WHERE {
  ?person a sparc:Person .
}
LIMIT ?limit
#+end_src

#+RESULTS:
|  cp |
|-----|
| 656 |

*** ORCiD
Count the number of contributors that have ORCiDs.
#+begin_src sparql
SELECT DISTINCT
(COUNT(DISTINCT ?person) as ?cp)
#?fn
#?ln
WHERE {
  ?person a sparc:Person .
  ?person sparc:firstName ?fn .
  ?person sparc:lastName ?ln .
  FILTER CONTAINS(str(?person), "orcid.org")
}
LIMIT ?limit
#+end_src

#+RESULTS:
|  cp |
|-----|
| 257 |

** Other
NOTE These are not yet in the ttl file, the queries written here will not work yet.
*** File types
In all likelihood we are not going to include the names of each of the
individual files in the standard ttl export. We may put it in a named
graph and then update the journal, possibly only for released
datasets. The use cases for having individual files in the graph is
not at all clear, we might have individual folders, or run it in the
other direction where a subject could list the folders that contain
data about it.  Trying to keep the graph in sync with Blackfynn would
be quite a pain, essentially we would store/append every single file
that ever appears and then mark the deleted ones as deleted or something.
#+begin_src sparql
SELECT DISTINCT
?dataset
?file_type
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:containsFileWithType ?file_type .  # TODO not 100% on the modelling here
}
LIMIT ?limit
#+end_src
*** Has Raw Data
#+begin_src sparql
SELECT DISTINCT
?dataset
?raw
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:containsFolderForRawData ?raw .  # TODO not 100% on the modelling here
}
LIMIT ?limit
#+end_src
*** Has Derived Data
#+begin_src sparql
SELECT DISTINCT
?dataset
?derived
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:containsFolderForDerivedData ?derived .  # TODO not 100% on the modelling here
}
LIMIT ?limit
#+end_src
*** Has Code
#+begin_src sparql
SELECT DISTINCT
?dataset
?code
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset TEMP:containsFolderForCode ?code .  # TODO not 100% on the modelling here
}
LIMIT ?limit
#+end_src
*** Used in simulation
This modeling is extremely preliminary.
#+begin_src sparql
SELECT DISTINCT
?dataset
?dataset_sim
WHERE {
  ?dataset a sparc:Dataset .
  ?dataset_sim a sparc:Dataset .  # TODO not 100% on this
  # the dataset holds the simulation, and is also what references the other datasets
  # whether we need an explicit type for simulation datasets is not clear, I suspect
  # that we do not, since datasets are just data, the aboutness or typeness probably
  # should come from the fact that the dataset specifies or houses a simulation ...
  # ?dataset_sim a sparc:SimulationDataset . # also not good
  # ?dataset_sim TEMP:isSubstrateForSomeComputationalSimulation true .  # FIXME this is bad bad bad
  VALUES ?p {TEMP:derivesParametersFrom TEMP:derivesValidationDataFrom ilxtr:hasInformationInput} .
  ?dataset_sim ?p ?dataset .
}
LIMIT ?limit
#+end_src
** Subject reconciliation
first pass requires that the subject_id be identical
*** v2
#+name: pds-v2-count
#+begin_src sparql :noweb no-export
SELECT (COUNT(*) as ?count) {
  <<pds-v2>>
}
#+end_src

#+RESULTS: pds-v2-count
| count |
|-------|
|   608 |

#+name: pds-v2
#+begin_src sparql :epilogue "\nLIMIT ?limit\n" :var limit="9"
SELECT DISTINCT ?s ?dataset (str(?id) as ?local_id) ?award ?species
WHERE {

  ?s a sparc:Subject;
     TEMP:localId ?id;
     TEMP:hasDerivedInformationAsParticipant ?dataset ;
     sparc:animalSubjectIsOfSpecies ?species .
  ?dataset a sparc:Dataset ;
           TEMP:hasAwardNumber ?award .

 { SELECT DISTINCT ?id
    WHERE {
	  ?s a sparc:Subject ;
	      TEMP:localId ?id ;
	      TEMP:hasDerivedInformationAsParticipant ?dataset .
    } GROUP BY ?id HAVING (count(?id) > 1) }

}
ORDER BY ?id
#+end_src

# #+header: :results drawer output
#+header: :epilogue "return table" :results value table
#+header: :var by_id=(and)
#+name: pds-v2-python
#+begin_src python :var data=pds-v2(limit="99999") :exports results
import sys
from pprint import pprint
from collections import Counter
counts = Counter([(id, species, award) for _, _, id, species, award in data])
#print(len([c for c in counts.values() if c > 1]))
#pprint(counts)
multi = [row for row in data if counts[tuple(row[2:])] > 1]

for index in (0, 1, 3, 4):
    for row in multi:
        try:
            row[index] = OntId(row[index]).curie  # shorten iris
        except Exception as e:
            sys.stderr.write(f'not a curie! {row[index]}')  # FIXME how to stderr

hardcoded_header =  [
    f'individuals (n={len(multi)})',
    'dataset',
    f'id (n={len(set([r[2] for r in multi]))})',
    'awards',
    'species']

key_id = lambda row:(row[2], row[3], row[4], row[1])
key_award_species_dataset_id = lambda row:(row[3], row[1], row[2], row[4])
table = [hardcoded_header] + [None] + sorted(set(tuple(_) for _ in multi))#, key=(key_id if by_id else key_award_species_dataset_id)
#+end_src

#+begin_src elisp :results none :exports none
(let ((org-table-convert-region-max-lines most-positive-fixnum))
  (ow-babel-eval "pds-v2-python"))
#+end_src

#+RESULTS: pds-v2-python

*** v1
# #+header: :cache yes
#+name: potential-duplicate-subjects
#+begin_src sparql :cache yes
# :results table
# RUN:block
SELECT distinct ?s1 ?s2 ?id ?dataset1 ?dataset2 ?species1 ?species2 ?award1 ?award2
WHERE {

  # Give me all subjects with duplicate IDs with unique datasets
  { SELECT ?id
    WHERE {
	  ?s1 a owl:NamedIndividual ;
	  TEMP:localId ?id ;
	  TEMP:hasDerivedInformationAsParticipant ?datasetx .
	  ?s2 a owl:NamedIndividual ;
	  TEMP:localId ?id ;
	  TEMP:hasDerivedInformationAsParticipant ?datasety .
	  filter(?datasetx != ?datasety)
    } GROUP BY ?id having (count(?id) > 1)}

  # filter out the cases where there can't be a match because species doesn't match
  ?s1 TEMP:localId ?id ;
  sparc:animalSubjectIsOfSpecies ?species1;
  TEMP:hasDerivedInformationAsParticipant ?dataset1 .
  ?s2 TEMP:localId ?id ;
  sparc:animalSubjectIsOfSpecies ?species2;
  TEMP:hasDerivedInformationAsParticipant ?dataset2 .
  filter(?s1 != ?s2)
  filter(STR(IRI(?s1)) < STR(IRI(?s2))) # this is a hack to filter out duplicate triples

  # filter to find non-matching awards
  # using contact person doesn't make sense as they are 1:1 with award right now
  ?dataset1 a owl:NamedIndividual ;
  TEMP:hasAwardNumber ?award1 .
  ?dataset2 a owl:NamedIndividual ;
  TEMP:hasAwardNumber ?award2 .
} order by ?id limit ?limit
#+end_src

# *[[RUN:][Run Query ▶]]*
# #+header: :results drawer output
#+header: :epilogue "return result"
#+name: process-duplicate-subjects
#+begin_src python :var data=potential-duplicate-subjects(limit="99999") :exports results
from pprint import pprint
import sys
import itertools
from collections import defaultdict, OrderedDict, Counter
from sparcur.core import OntId

def func(data):
    idmap = defaultdict(lambda: defaultdict(list)) # change to list; order for local_id
    for row in data:
        subj1, subj2, local_id = row[0], row[1], row[2]
        if not idmap[subj1]['local_id']:
            idmap[subj1]['local_id'].append(local_id)
        idmap[subj1]['cluster'].append(subj2)
        idmap[subj1]['local_id'].append(local_id)
        value_pairs = [(row[i], row[i+1]) for i in range(3, len(row), 2)]
        value_pairs_len = len(value_pairs)
        for i, value_pair in enumerate(value_pairs):
            v1, v2 = value_pair
            if v1 not in idmap[subj1][i]:
                idmap[subj1][i].append(v1)
            idmap[subj1][i].append(v2)
    header = ['cluster', 'local_id'] + [i for i in range(value_pairs_len)] # todo: replace this with sparql headers if possible
    columns = defaultdict(list)
    subjs = sorted([(v, v.split('/')[-1]) for v in idmap], key=lambda x: x[1])
    for subj, _ in subjs:
        padding_max = max([len(v) for v in idmap[subj].values()])
        for colname, values in idmap[subj].items():
            values = list(values)
            values = [subj] + values if colname == 'cluster' else values
            padding = padding_max - len(values) if len(values) < padding_max else 0
            columns[colname] += values # + ['-'] * padding + ['']
    __thing = [list(_) for _ in itertools.zip_longest(*[columns[k] for k in header])]
    _thing = sorted(list(_) for _ in set(tuple(_) for _ in __thing))
    counts = Counter([(id, species, award) for _, id, _, species, award in _thing])
    thing = [row for row in _thing if counts[tuple(row[x] for x in [1, 3, 4])] > 1]  # remove unique rows since there is no chance they will match
    for index in (0, 2, 3, 4):
        for row in thing:
            try:
                row[index] = OntId(row[index]).curie  # shorten iris
            except Exception as e:
                sys.stderr.write(f'not a curie! {row[index]}')  # FIXME how to stderr

    hardcoded_header =  [f'individuals (n={len(thing)})',
                         f'id (n={len(set([r[1] for r in thing]))})',
                         'datasets', 'species', 'awards']
    table = [hardcoded_header] + [None] + sorted(set(tuple(_) for _ in thing), key=lambda row:(row[1], row[3], row[4], row[2]))
    return table


result = func(data)
#+end_src

#+RESULTS: process-duplicate-subjects
* Python helper
** call

# Use this block to run the next block an all dependencies without being asked again.
#+begin_src elisp :results none :exports none
(ow-babel-eval "neru-simplified")
#+end_src

#+header: :var json-string=python-neru-helper(result=cypher-neru-4-helper(neupop_id="ilxtr:neuron-type-keast-5"))
#+header: :var path="./images/neru-simplified.svg" :results file
#+name: neru-simplified
#+begin_src elisp :exports none
(json->svg-file json-string path)
#+end_src

[[file:./images/neru-simplified.svg]]

** simple
Python code to simplify =neru= and supporting functions to extract terminal regions.
# FIXME emacs-jupyter doesn't convert t -> True !??!
# FIXME this doesn't highlight correctly in init-simple.el
# FIXME the python will run the epilogue for in a babel call but jupyter-python will not, fun times
# #+header: :epilogue "\nimport json\nb, ed, s, ex, o = main(neupop_id=\"ilxtr:neuron-type-keast-6\")\nprint(json.dumps(b, indent=1, sort_keys=False))"
#+header: :results drawer
#+header: :var result=(or) remove=(or)
#+header: :epilogue "\nimport json\nb, ed, s, ex, o = main(blob_string=result)\n#return json.dumps(b, indent=1, sort_keys=False)"
#+name: python-process-neru
#+begin_src jupyter-python :session pys
from nifstd_tools.simplify import apinat_deblob, sub, pred, obj, ematch
from nifstd_tools.simplify import axon, dend, bag, top, ie, ext, fasIn, endIn, layerIn


def query(neupop_id):
    import requests
    url = ('http://sparc-data.scicrunch.io:9000/scigraph/dynamic/'
           f'demos/apinat/neru-4/{neupop_id}?limit=9999999')
    resp = requests.get(url, headers={'Accept': 'application/json'})
    blob = resp.json()
    return blob


def find_terminals(blob, type):
    return [es for es in blob['edges']
            if
            pred(es, ie) and
            obj(es, type) and
            ematch(blob,
                   (lambda e, m:
                    sub(e, m) and
                    pred(e, top) and
                    obj(e, bag)),
                   sub(es))]


def find_region(blob, edge):
    collect = []
    def select(e, m, collect=collect):
        if sub(e, m):
            #print(e)
            if pred(e, layerIn) or pred(e, fasIn) or pred(e, endIn):
                return ematch(blob, select, obj(e))
            elif pred(e, ext):
                region = obj(e)
                collect.extend([b for b in blob['nodes'] if b['id'] == region])
                return region

    ematch(blob, select, sub(edge))
    return collect


def find_terminal_regions(blob, type):
    return [region for es in find_terminals(blob, type) for region in find_region(blob, es)]


def main(blob=None, blob_string=None, neupop_id=None, remove_converge=remove):
    # do not call this function unless it is from an org babel block, there are free variables
    if blob is None and blob_string is not None:
        import json
        blob = json.loads(blob_string)

    neupop_id = neupop_id if neupop_id else 'ilxtr:neuron-type-keast-6'

    if blob is None:
        blob = query(neupop_id)

    blob, edges, somas, externals, ordering_edges = v = apinat_deblob(
        blob, remove_converge=remove_converge)

    return v
#+end_src

#+call: python-process-neru(result=cypher-neru-4-helper(neupop_id="ilxtr:neuron-type-keast-5"))

# we need this block because jupyter-python doesn't include the epilogue when being called by another block wew
# #+header: :epilogue "\nimport pprint\nreturn pprint.pformat(ed)"
# #+header: :epilogue "\nimport json\nb, ed, s, ex, o = main(neupop_id=\"ilxtr:neuron-type-keast-6\")\nreturn json.dumps(b, indent=1, sort_keys=False)"
# #+header: :var result=cypher-neru-3-helper(neupop_id="ilxtr:neuron-type-keast-6")
#+header: :results drawer
#+header: :var result=(or) remove=(and "sigh")
#+header: :epilogue "\nimport json\nb, ed, s, ex, o = main(blob_string=result)\nreturn json.dumps(b, indent=1, sort_keys=False)"
#+name: python-neru-helper
#+begin_src python :noweb yes :exports none
<<python-process-neru>>
#+end_src

** terminal regions
Find the ontology identifiers for terminal regions.

# run this to populate/update the kernel (sigh)
#+call: python-process-neru(result=cypher-neru-4-helper(neupop_id="ilxtr:neuron-type-keast-5"))

#+name: neru-find-terminal-regions
#+begin_src jupyter-python :session pys :exports both :var neupop_id=""
from pprint import pprint

blob, *_ = main(blob_string=result)

# find terminal regions
axon_terminal_regions = find_terminal_regions(blob, axon)
dend_terminal_regions = find_terminal_regions(blob, dend)
pprint(axon_terminal_regions)
pprint(dend_terminal_regions)
#+end_src

#+RESULTS: neru-find-terminal-regions
#+begin_example
[{'id': 'UBERON:0016508',
  'lbl': 'pelvic ganglion',
  'meta': {'http://www.w3.org/2000/01/rdf-schema#label': ['pelvic ganglion'],
           'https://apinatomy.org/uris/readable/generated': [True],
           'types': ['Class']}}]
[{'id': 'UBERON:0006460',
  'lbl': None,
  'meta': {'https://apinatomy.org/uris/readable/generated': [True],
           'types': ['Class']}},
 {'id': 'EMAPA:19574',
  'lbl': 'Sixth lumbar spinal cord segment',
  'meta': {'http://www.w3.org/2000/01/rdf-schema#label': ['Sixth lumbar spinal '
                                                          'cord segment'],
           'https://apinatomy.org/uris/readable/generated': [True],
           'types': ['Class']}}]
#+end_example

** connectivity pairs

This code produces the basic connectivity of a neuron population.
The result is a list of pairs, the pairs are the subject and object
of the triple =subject (or apinatomy:next apinatomy:next*) object=.
Thus they represent the full connectivity of the population.

The contents of each element of the pair tuples with three elements.
1. The id for the neuronal process involved in the connection.
2. The ontology id for the layer in which the neuronal process is
   located. This may be None if no layer is specified in the model.
3. The ontology id for the region in which the neuronal process is located.

In the example presented here for keast neuron 5 the final entries all
have the same start and end location because they are the soma, and
the roots of the axon and the dendrite.

#+name: py-conn-pairs
#+begin_src jupyter-python :session pys
def isLayer(s):
    return ematch(blob, (lambda e, m: sub(e, m) and pred(e, layerIn)), s)

def lay_reg(start):
    direct = [obj(t) for t in
              ematch(blob, (lambda e, m: sub(e, m)
                            and (pred(e, intIn) or
                                 pred(e, endIn) or
                                 pred(e, fasIn))),
                     start)]

    layers = [obj(t) for d in direct for t in
              ematch(blob, (lambda e, m: sub(e, m)
                            and isLayer(m)
                            and (pred(e, ie) or
                                 pred(e, ext))),
                     d)]

    lregs = []
    if layers:
        ldir = [obj(t) for d in direct for t in
                ematch(blob, (lambda e, m: sub(e, m)
                              and pred(e, layerIn)),
                       d)]

        lregs = [obj(t) for d in ldir for t in
                 ematch(blob, (lambda e, m: sub(e, m)
                               and not isLayer(m)
                               and (pred(e, ie) or
                                    pred(e, ext))),
                        d)]

    regions = [obj(t) for d in direct for t in
               ematch(blob, (lambda e, m: sub(e, m)
                             and not isLayer(m)
                             and (pred(e, ie) or
                                  pred(e, ext))),
                      d)]

    assert not (lregs and regions), (lregs, regions)  # not both
    regions = lregs if lregs else regions
    out = start, layers[0] if layers else None, regions[0] if regions else None
    if out:
      return out

starts = [obj(e) for e in blob['edges'] if pred(e, 'apinatomy:lyphs')]

nxt = 'apinatomy:next'
nxts = 'apinatomy:next*'
intIn = 'apinatomy:internalIn'

nexts = [(sub(t), obj(t)) for start in starts for t in
         ematch(blob, (lambda e, m: pred(e, nxt) or pred(e, nxts)), None)]


connected_pairs = sorted(set([tuple([lay_reg(e) for e in p]) for p in nexts]))
pprint(connected_pairs)
connected_pairs
#+end_src

#+RESULTS: py-conn-pairs
:RESULTS:
#+begin_example
[(('kblad:ac-snl65_lnk_1', 'UBERON:0016578', 'EMAPA:19574'),
  ('kblad:ac-snl65_lnk_2', 'UBERON:0016549', 'EMAPA:19574')),
 (('kblad:ac-snl65_lnk_2', 'UBERON:0016549', 'EMAPA:19574'),
  ('kblad:ac-snl65_lnk_3', None, 'EMAPA:25279')),
 (('kblad:ac-snl65_lnk_3', None, 'EMAPA:25279'),
  ('kblad:ac-snl65_lnk_4', None, 'UBERON:0018675')),
 (('kblad:ac-snl65_lnk_4', None, 'UBERON:0018675'),
  ('kblad:ac-snl6s1_lnk_1', None, 'UBERON:0018675')),
 (('kblad:ac-snl65_lnk_4', None, 'UBERON:0018675'),
  ('kblad:ac-snl6s1_lnk_2', None, 'UBERON:0016508')),
 (('kblad:ac-snl6s1_lnk_1', None, 'UBERON:0018675'),
  ('kblad:ac-snl6s1_lnk_2', None, 'UBERON:0016508')),
 (('kblad:ac-sns15_lnk_1', 'UBERON:0016578', 'UBERON:0006460'),
  ('kblad:ac-sns15_lnk_2', 'UBERON:0016549', 'UBERON:0006460')),
 (('kblad:ac-sns15_lnk_2', 'UBERON:0016549', 'UBERON:0006460'),
  ('kblad:ac-sns15_lnk_3', None, 'EMAPA:25281')),
 (('kblad:ac-sns15_lnk_3', None, 'EMAPA:25281'),
  ('kblad:ac-sns15_lnk_4', None, 'UBERON:0018675')),
 (('kblad:ac-sns15_lnk_4', None, 'UBERON:0018675'),
  ('kblad:ac-snl6s1_lnk_1', None, 'UBERON:0018675')),
 (('kblad:ac-sns15_lnk_4', None, 'UBERON:0018675'),
  ('kblad:ac-snl6s1_lnk_2', None, 'UBERON:0016508')),
 (('kblad:snl65', 'UBERON:0016578', 'EMAPA:19574'),
  ('kblad:ac-snl65_lnk_1', 'UBERON:0016578', 'EMAPA:19574')),
 (('kblad:snl65', 'UBERON:0016578', 'EMAPA:19574'),
  ('kblad:dc-snl65_lnk_1', 'UBERON:0016578', 'EMAPA:19574')),
 (('kblad:sns15', 'UBERON:0016578', 'UBERON:0006460'),
  ('kblad:ac-sns15_lnk_1', 'UBERON:0016578', 'UBERON:0006460')),
 (('kblad:sns15', 'UBERON:0016578', 'UBERON:0006460'),
  ('kblad:dc-sns15_lnk_1', 'UBERON:0016578', 'UBERON:0006460'))]
#+end_example
| (kblad:ac-snl65_lnk_1 UBERON:0016578 EMAPA:19574)    | (kblad:ac-snl65_lnk_2 UBERON:0016549 EMAPA:19574)    |
| (kblad:ac-snl65_lnk_2 UBERON:0016549 EMAPA:19574)    | (kblad:ac-snl65_lnk_3 None EMAPA:25279)              |
| (kblad:ac-snl65_lnk_3 None EMAPA:25279)              | (kblad:ac-snl65_lnk_4 None UBERON:0018675)           |
| (kblad:ac-snl65_lnk_4 None UBERON:0018675)           | (kblad:ac-snl6s1_lnk_1 None UBERON:0018675)          |
| (kblad:ac-snl65_lnk_4 None UBERON:0018675)           | (kblad:ac-snl6s1_lnk_2 None UBERON:0016508)          |
| (kblad:ac-snl6s1_lnk_1 None UBERON:0018675)          | (kblad:ac-snl6s1_lnk_2 None UBERON:0016508)          |
| (kblad:ac-sns15_lnk_1 UBERON:0016578 UBERON:0006460) | (kblad:ac-sns15_lnk_2 UBERON:0016549 UBERON:0006460) |
| (kblad:ac-sns15_lnk_2 UBERON:0016549 UBERON:0006460) | (kblad:ac-sns15_lnk_3 None EMAPA:25281)              |
| (kblad:ac-sns15_lnk_3 None EMAPA:25281)              | (kblad:ac-sns15_lnk_4 None UBERON:0018675)           |
| (kblad:ac-sns15_lnk_4 None UBERON:0018675)           | (kblad:ac-snl6s1_lnk_1 None UBERON:0018675)          |
| (kblad:ac-sns15_lnk_4 None UBERON:0018675)           | (kblad:ac-snl6s1_lnk_2 None UBERON:0016508)          |
| (kblad:snl65 UBERON:0016578 EMAPA:19574)             | (kblad:ac-snl65_lnk_1 UBERON:0016578 EMAPA:19574)    |
| (kblad:snl65 UBERON:0016578 EMAPA:19574)             | (kblad:dc-snl65_lnk_1 UBERON:0016578 EMAPA:19574)    |
| (kblad:sns15 UBERON:0016578 UBERON:0006460)          | (kblad:ac-sns15_lnk_1 UBERON:0016578 UBERON:0006460) |
| (kblad:sns15 UBERON:0016578 UBERON:0006460)          | (kblad:dc-sns15_lnk_1 UBERON:0016578 UBERON:0006460) |
:END:

* SciGraph cypher queries
These can be tested against the execute endpoint as well (if the
SciGraph server is running the patch to align the behavior).
** neru
*** neru-4
:PROPERTIES:
:CUSTOM_ID:  neru-4
:END:
#+name: cypher-neru-4-helper
#+begin_src cypher :noweb yes :results drawer :limit 99999999 :exports none
<<cypher-neru-4>>
#+end_src

#+header: :limit 999999 :file ./images/neru-4.svg :results file :exports both
#+header: :var neupop_id="ilxtr:neuron-type-keast-5"
#+name: cypher-neru-4
#+begin_src cypher
MATCH (neupop:Class{iri: $neupop_id})
-[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

, (neugrp)
-[:apinatomy:links]->(link)
-[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
-[d:apinatomy:layerIn*0..1]->(lyph)
-[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

WITH neugrp, link, lyph, a, c, d
OPTIONAL MATCH layer_ext = (lyph)
<-[d*1]-(layer)-[:apinatomy:cloneOf]->()-[:apinatomy:inheritedExternal]->()

WITH neugrp, link, lyph, a, c, d, layer_ext // there is a difference here because the previous match does not require lyphs to have external ids
MATCH (lyph)
-[e:apinatomy:external]->(region)

, p2 = (link)
-[:apinatomy:conveyingLyph]->(cl)
-[:apinatomy:topology]->()

, (cl)
-[x:apinatomy:inheritedExternal*0..1]->()

// use apinatomy:next to extract ordering information
, (link)
-[f:apinatomy:next*0..]->()
-[g:apinatomy:target*0..1]->()
-[h:apinatomy:rootOf*0..1]->()
-[i:apinatomy:levels*0..1]->()
<-[:apinatomy:links]-(neugrp)

// publications
WITH neugrp, a, c, d, e, f, g,h,i, p2, x, layer_ext
OPTIONAL MATCH path = (neugrp)
-[:apinatomy:publications]->(pub)
-[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Publication"}) // cannot be curied, dynamic endpoints will not expand it

RETURN a, null as b, c, d, e, f, g,h,i, path, p2, x, layer_ext

UNION

// this part usually only returns the soma housing lyph
MATCH (neupop:Class{iri: $neupop_id})
-[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
-[b:apinatomy:lyphs]->(lyph)
-[c:apinatomy:internalIn]->()
-[d:apinatomy:external*0..1]->(region)
, p2 = (lyph)
-[:apinatomy:conveys]->(soma_link)
-[:apinatomy:source|apinatomy:target]->(soma_node)
-[:apinatomy:sourceOf]->(chain_link)
, (chain_link)
-[:apinatomy:levelIn]->(chain)
, (soma_node)
-[:apinatomy:rootOf]->(chain)

RETURN a, b, c, d, null AS e, null AS f, null AS g, null AS h, null AS i, null AS path, p2, null as x, null as layer_ext
#+end_src

[[file:./images/neru-4.svg]]

*** neru-3

#+name: cypher-neru-3-helper
#+begin_src cypher :noweb yes :results drawer :limit 99999999 :exports none
<<cypher-neru-3>>
#+end_src

# #+header: :results table :limit 1
#+header: :limit 999999 :file ./images/neru-3.svg :results file :exports both
#+header: :var neupop_id="ilxtr:neuron-type-keast-5"
#+name: cypher-neru-3
#+begin_src cypher
MATCH (neupop:Class{iri: $neupop_id})
-[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

// publications
WITH neugrp, a
OPTIONAL MATCH path = (neugrp)
-[:apinatomy:publications]->(pub)
-[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Publication"}) // cannot be curied, dynamic endpoints will not expand it

WITH neugrp, a, path
MATCH (neugrp)
-[b:apinatomy:links]->(link)
-[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
-[d:apinatomy:layerIn*0..1]->(lyph)
-[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

WITH neugrp, link, lyph, a, b, c, d, path // MATCH vs , not all things that match as lyphs have externals
MATCH (lyph)
-[e:apinatomy:external]->(region)

// use apinatomy:next to extract ordering information
WITH neugrp, link, a, b, c, d, e, path
MATCH p2 = (link)
-[:apinatomy:conveyingLyph]->(cl)
-[:apinatomy:topology]->()

WITH neugrp, link, a, b, c, d, e, path, p2, cl
MATCH (cl)
-[x:apinatomy:inheritedExternal*0..1]->()

WITH neugrp, link, a, b, c, d, e, path, p2, x
MATCH (link)
-[f:apinatomy:next*0..]->()
//-[f:apinatomy:next|apinatomy:nextChainStartLevels*0..]->()
// FIXME these should be collapsing into a single relationship
-[g:apinatomy:target*0..1]->()
-[h:apinatomy:rootOf*0..1]->()
-[i:apinatomy:levels*0..1]->()
<-[:apinatomy:links]-(neugrp)

RETURN a, b, c, d, e, f, g,h,i, path, p2, x

UNION

// this part usually only returns the soma housing lyph
MATCH (neupop:Class{iri: $neupop_id})
-[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
-[b:apinatomy:lyphs]->(lyph)
-[c:apinatomy:internalIn]->()
-[d:apinatomy:external*0..1]->(region)
// this variant shows the dead end lyphs that correspond to the fasciculatesIn links above
//-[c:apinatomy:internalIn*0..1]->()
//-[d:apinatomy:external*0..1]->(region)
RETURN a, b, c, d, null AS e, null AS f, null AS g, null AS h, null AS i, null AS path, null as p2, null as x
#+end_src

[[file:./images/neru-3.svg]]

*** neru-2
# #+header: :results drawer :limit 1
#+header: :limit 999999 :file ./images/neru-2.svg :results file :exports both
#+header: :var neupop_id="ilxtr:neuron-type-keast-6"
#+name: cypher-neru-2
#+begin_src cypher
MATCH (neupop:Class{iri: $neupop_id})
-[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

// publications
WITH neugrp, a
OPTIONAL MATCH path = (neugrp)
-[:apinatomy:publications]->(pub)
-[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Publication"}) // cannot be curied, dynamic endpoints will not expand it

WITH neugrp, a, path
MATCH (neugrp)
-[b:apinatomy:links]->(link)
-[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
-[d:apinatomy:layerIn*0..1]->(lyph)
-[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

WITH neugrp, link, lyph, a, b, c, d, path
MATCH (lyph)
-[e:apinatomy:external]->(region)

// use apinatomy:next to extract ordering information
WITH neugrp, link, a, b, c, d, e, path
MATCH (link)
-[f:apinatomy:next*0..]->()
//-[f:apinatomy:next|apinatomy:nextChainStartLevels*0..]->()
// FIXME these should be collapsing into a single relationship
-[g:apinatomy:target*0..1]->()
-[h:apinatomy:rootOf*0..1]->()
-[i:apinatomy:levels*0..1]->()
<-[:apinatomy:links]-(neugrp)

RETURN a, b, c, d, e, f, g,h,i, path

UNION

// this part usually only returns the soma housing lyph
MATCH (neupop:Class{iri: $neupop_id})
-[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
-[b:apinatomy:lyphs]->(lyph)
-[c:apinatomy:internalIn]->(e) // e is a hack to get columns to match
-[d:apinatomy:external*0..1]->(region)
// this variant shows the dead end lyphs that correspond to the fasciculatesIn links above
//-[c:apinatomy:internalIn*0..1]->(e)
//-[d:apinatomy:external*0..1]->(region)
RETURN a, b, c, d, null AS e, null AS f, null AS g, null AS h, null AS i, null AS path
#+end_src

#+RESULTS: cypher-neru-2
[[file:./images/neru-2.svg]]

# #+header: :limit 999 :results drawer
# #+header: :limit 9999 :results table
#+header: :limit 999999 :file ./images/neru-debug.svg :results file :exports both
#+header: :var neupop_id="ilxtr:neuron-type-keast-6"
#+name: cypher-neru-debug
#+begin_src cypher
MATCH path = (neupop:Class{iri: $neupop_id})
-[:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"})
-[:apinatomy:links]->()
-[:apinatomy:next*0..]->()
// -[:apinatomy:nextChainStartLevels*0..]-()
//-[:apinatomy:prevChainEndLevels*0..]-()
-[:apinatomy:levelIn*0..]->()
RETURN path
#+end_src

#+RESULTS: cypher-neru-debug
[[file:./images/neru-debug.svg]]

*** neru-1
# #+header: :results drawer :limit 1
#+header: :limit 999999 :file ./images/neru-1.svg :results file :exports both
#+header: :var neupop_id="ilxtr:neuron-type-keast-6"
#+name: cypher-neru-1
#+begin_src cypher
MATCH (neupop:Class{iri: $neupop_id})
-[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK

// publications
WITH neugrp, a
OPTIONAL MATCH path = (neugrp)
-[:apinatomy:publications]->(pub)
-[:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Publication"}) // cannot be curied, dynamic endpoints will not expand it

WITH neugrp, a, path
MATCH (neugrp)
-[b:apinatomy:links]->(link)
-[c:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
-[d:apinatomy:layerIn*0..1]->(lyph)
-[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph

WITH lyph, a, b, c, d, path
MATCH (lyph)
-[e:apinatomy:external]->(region)
RETURN a, b, c, d, e, path

UNION

// this part usually only returns the soma housing lyph
MATCH (neupop:Class{iri: $neupop_id})
-[a:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"}) // FIXME HACK
-[b:apinatomy:lyphs]->(lyph)
-[c:apinatomy:internalIn]->(e) // e is a hack to get columns to match
-[d:apinatomy:external*0..1]->(region)
// this variant shows the dead end lyphs that correspond to the fasciculatesIn links above
//-[c:apinatomy:internalIn*0..1]->(e)
//-[d:apinatomy:external*0..1]->(region)
return a, b, c, d, null AS e, null AS path
#+end_src

#+RESULTS: cypher-neru-1
[[file:./images/neru-1.svg]]

*** neru model populations
Given an ApiNATOMY model id return the identifiers for the neuron
populations that are present in the model.
#+header: :var model_id="https://apinatomy.org/uris/models/keast-bladder" :limit 99
#+begin_src cypher
MATCH (start:Ontology {iri: $model_id})
<-[:isDefinedBy]-(external:Class)
-[:subClassOf*]->(:Class {iri: "http://uri.interlex.org/tgbugs/uris/readable/NeuronEBM"}) // FIXME
RETURN external
#+end_src

*** neru model populations and references
#+name: desc-cypher-apinat-model-pops-and-refs
Given an ApiNATOMY model id return the identifiers for the neuron
populations that are present in the model and the identifiers for
references that provide supporting evidence. Publications and
populations can be distingished by checking whether their meta type
field is NamedIndividual or Class.

# #+header: :results drawer
#+header: :var model_id="https://apinatomy.org/uris/models/keast-bladder" :limit 99
#+name: cypher-apinat-model-pops-and-refs
#+begin_src cypher
MATCH (start:Ontology {iri: $model_id})
<-[:isDefinedBy]-(external:Class)
-[:subClassOf*]->(:Class {iri: "http://uri.interlex.org/tgbugs/uris/readable/NeuronEBM"}) // FIXME
,
(external)
-[e:type]->()
RETURN e
UNION
OPTIONAL MATCH (start:Ontology {iri: $model_id})
<-[:isDefinedBy]-(graph:NamedIndividual)
-[:type]->({iri: "https://apinatomy.org/uris/elements/Graph"}) // elements don't have a superclass right now
,
(graph)
-[:apinatomy:publications]->(pub)
-[e:type]->(:Class{iri: "https://apinatomy.org/uris/elements/Publication"})
RETURN e
#+end_src

*** TODO neru regions projected to
#+begin_src cypher
#+end_src
*** TODO neru regions dendrited to
*** TODO neru regions with process in
*** neru projects to
*** neru neurites to
# FIXME this seems not quite right?
# TODO dot ignore directionality in layout for certain edges e.g. apinat:topology
# #+header: :results drawer :limit 1
#+header: :limit 999999 :file ./images/neru-projects.svg :results file :exports both
#+header: :var neupop_id="ilxtr:neuron-type-keast-11"
#+begin_src cypher
MATCH (neupop:Class{iri: $neupop_id})
-[:apinatomy:annotates]->(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"})
-[:apinatomy:lyphs]->(end_lyph)
-[t:apinatomy:topology]->(top)
WHERE top.iri IN ["https://apinatomy.org/uris/readable/BAG", "https://apinatomy.org/uris/readable/BAG2"]
WITH neugrp, end_lyph, t
MATCH (type) // FIXME we need more information in the models
<-[x:apinatomy:inheritedExternal*0..1]-(end_lyph)
-[a:apinatomy:conveys]->(link)
-[b:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer) // real lyphs convey things, layers do not
-[c:apinatomy:layerIn*0..1]->(lyph)
-[:apinatomy:conveys*0..1]->() // make sure we are at a real lyph
WITH neugrp, lyph, a,b,c,t,x
MATCH (lyph)
-[e:apinatomy:external]->(region)
RETURN e, a,b,c,t,x
#+end_src

*** neru population projects to
*** neru populations projecting to
Given an anatomical region return a list of neuron types that project to that region.

# FIXME TODO need to also be able to query layers i.e. rexed lamina vii
#+header: :limit 999999 :file ./images/neru-axons-bag.svg :results file :exports both
#+header: :var region_id="UBERON:0001989" :note vagus nerve
#+header: :var type_id="SAO:280355188" :note regional part of axon
#+name: cypher-neru-axons-bag
#+begin_src cypher :noweb yes
<<cypher-neru-terminal-type>>
#+end_src

*** neru populations with axons in
Given an anatomical region return a list of neuron types with axons that are located in that region.

# TODO compare with an NPO based query
#+header: :limit 999999 :file ./images/neru-axons.svg :results file :exports both
#+header: :var region_id="UBERON:0001759" :note vagus nerve
#+header: :var type_id="SAO:280355188" :note regional part of axon
#+name: cypher-neru-axons
#+begin_src cypher :noweb yes
<<cypher-neru-process-type>>
RETURN e, neupop, neugrp
#+end_src

#+RESULTS: cypher-neru-axons
[[file:./images/neru-axons.svg]]

*** neru populations dendriting to
Given an anatomical region return a list of neuron types that have dendrite terminals in that region.
#+header: :limit 999999 :file ./images/neru-dendrites-bag.svg :results file :exports both
#+header: :var region_id="UBERON:0001989" :note vagus nerve
#+header: :var type_id="SAO:420754792" :note regional part of dendrite
#+name: cypher-neru-dendrites-bag
#+begin_src cypher :noweb yes
<<cypher-neru-terminal-type>>
#+end_src

#+RESULTS: cypher-neru-dendrites-bag
[[file:./images/neru-dendrites-bag.svg]]

*** neru populations with dendrites in
Given an anatomical region return a list of neuron types with dendrites that are located in that region.

# TODO compare with an NPO based query
#+header: :limit 999999 :file ./images/neru-dendrites.svg :results file :exports both
#+header: :var region_id="UBERON:0001759" :note vagus nerve
#+header: :var type_id="SAO:420754792" :note regional part of dendrite
#+name: cypher-neru-dendrites
#+begin_src cypher :noweb yes
<<cypher-neru-process-type>>
RETURN e, neupop, neugrp
#+end_src

# #+call: does not work here because we can't override a bunch of the other settings

#+RESULTS: cypher-neru-dendrites
[[file:./images/neru-dendrites.svg]]

*** TODO neru populations with neurites in
*** neru populations with processes in
:PROPERTIES:
:CUSTOM_ID:  neru-populations-with-processes-in
:END:

Given an anatomical region return a list of neuron types with processes that are located in that region.

# NOTE have to include :Class otherwise neupop-[annoates*0..1]->neugrp
# will match neugrp which we do not want
# FIXME still not quite right because now we neupop is no longer optional
#+name: cypher-neru-processes-base
#+begin_src cypher :eval never
MATCH
(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"})
-[:apinatomy:links]->(link)
-[:apinatomy:fasciculatesIn|apinatomy:endsIn*0..1]->(lyph_or_layer)
-[:apinatomy:layerIn*0..1]->(lyph)
-[:apinatomy:external*0..1]->(region:Class{iri: $region_id})
WITH neugrp
OPTIONAL MATCH (neupop:Class)
-[e:apinatomy:annotates*0..1]->(neugrp)
#+end_src

#+name: cypher-neru-processes-somas
#+begin_src cypher :eval never
// somas
MATCH
(neugrp:NamedIndividual{`https://apinatomy.org/uris/readable/description`: "dynamic"})
-[:apinatomy:lyphs]->(lyph)
-[:apinatomy:internalIn]->()
-[:apinatomy:external*0..1]->(region:Class{iri: $region_id})
WITH neugrp
OPTIONAL MATCH (neupop:Class)
-[e:apinatomy:annotates*0..1]->(neugrp)
#+end_src

TODO Need to expand =region_id= using the Uberon partonomy to answer more generic queries.
# #+header: :var region_id="UBERON:0018683" :note splanchnic nerve
# #+header: :var region_id="UBERON:0035769" :note mesenteric ganglion
# #+header: :results drawer :limit 10
# #+header: :results table :limit 10
#+header: :limit 999999 :file ./images/neru-processes.svg :results file :exports both
#+header: :var region_id="UBERON:0001759" :note vagus nerve
#+name: cypher-neru-processes
#+begin_src cypher :noweb yes
// dendrites and axons
<<cypher-neru-processes-base>>
RETURN e, neupop, neugrp

UNION

<<cypher-neru-processes-somas>>
RETURN e, neupop, neugrp
#+end_src

#+RESULTS: cypher-neru-processes
[[file:./images/neru-processes.svg]]

#+call: cypher-neru-processes(region_id="UBERON:0005453") :results table
#+call: cypher-neru-processes(region_id="UBERON:0006490") :results table

#+name: cypher-neru-processes-pop-only
#+begin_src cypher :noweb yes
<<cypher-neru-processes-base>>
RETURN neupop

UNION

<<cypher-neru-processes-somas>>
RETURN neupop
#+end_src

#+call: cypher-neru-processes-pop-only(region_id="UBERON:0005453") :results table
#+call: cypher-neru-processes-pop-only(region_id="UBERON:0006490") :results table

Helper blocks for more specialized queries.

Filter by process =type_id=, where =type_id= could be the ontology
identifier for axon or dendrite.  The =type_id= has to match the
conventions used in ApiNATOMY models.
#+caption: process type helper
#+name: cypher-neru-process-type
#+begin_src cypher :noweb yes :eval never
<<cypher-neru-processes-base>>
WITH e, neupop, neugrp, link
MATCH (link)
-[:apinatomy:conveyingLyph]->(cl)
-[:apinatomy:inheritedExternal]->(:Class {iri: $type_id})
#+end_src

Filter processes based on their topology. For example, this is used to
select processes with bag topology that correspond to axon and
dendrite terminals.
#+caption: terminal type helper
#+name: cypher-neru-terminal-type
#+begin_src cypher :noweb yes :eval never
<<cypher-neru-process-type>>
WITH e, neupop, neugrp, cl
MATCH (cl)
-[:apinatomy:topology]-(top)
WHERE top.iri IN ["https://apinatomy.org/uris/readable/BAG", "https://apinatomy.org/uris/readable/BAG2"]
RETURN e, neupop, neugrp
#+end_src

** existing
*** sparc
:PROPERTIES:
:header-args:cypher: :scigraph http://selene:9000/scigraph
:END:
**** organParts
#+name: desc-organ-parts
Get the parts list for an organ including nerves and blood vessels
#+header: :var id=(or)
#+name: cyres-organ-parts
#+begin_src cypher
// depth of 6 captures everything, 5 is too shallow, 40 is WAY too deep
MATCH path = (start:Class{iri: "${id}"})
<-[:subClassOf|ilxtr:includedForSPARCUnder|fma:regional_part_of|fma:constitutional_part_of|fma:related_part_of*0..6]-(part)
<-[:fma:arterial_supply_of|fma:nerve_supply_of|fma:venous_drainage_of|fma:continuous_with*0..1]-(sup)
<-[:subClassOf|fma:constitutional_part_of|fma:branch|fma:tributary|fma:branch_of*0..1]-(a_bit_more)
RETURN path
UNION  // for this query UNION seems to be MUCH faster than using WITH
MATCH path = (start:Class{iri: "${id}"})
// this one does not need to be inverted ? except for the INCOMING flag
<-[:fma:arterial_supply_of|fma:venous_drainage_of]-(vessel)
<-[:fma:branch|fma:tributary]-(more_vessel)
<-[:fma:branch|fma:tributary|fma:regional_part]-(even_more_vessel)
RETURN path
#+end_src

# heart test query
#+call: cyres-organ-parts(id="FMA:7088", limit=1) :results table

**** parcellationArtifacts
#+name: cyres-parcellation-artifacts
#+begin_src cypher
MATCH path = (artifact)
-[:subClassOf*0..2]->(parent)
-[:ilxtr:isDefinedInTaxon]->(species)
WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
RETURN path
#+end_src
**** parcellationArtifacts/{species-id}
#+header: :var species-id=(or)
#+name: cyres-parcellation-artifacts-species-id
#+begin_src cypher
MATCH path = (artifact)
-[:subClassOf*0..2]->(parent)
-[:ilxtr:isDefinedInTaxon]->(species:Class{iri: "${species-id}"})
WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
RETURN path
#+end_src

#+call: cyres-parcellation-artifacts-species-id(species-id="NCBITaxon:9606")

**** artifactRoots/{artifact-id}
#+header: :var artifact-id=(or)
#+name: cyres-artifact-roots-artifact-id
#+begin_src cypher
MATCH path = (root)
-[:ilxtr:isDefinedBy]->(a)<-[:subClassOf*0..2]
-(artifact:Class{iri: "${artifact-id}"})
RETURN path
#+end_src
**** artifactLabels/{artifact-id}
#+header: :var artifact-id=(or)
#+name: cyres-artifact-labels-artifact-id
#+begin_src cypher
MATCH path = (label)
-[:subClassOf]->(root)
-[:ilxtr:isDefinedBy]->(a)<-[:subClassOf*0..2]
-(artifact:Class{iri: "${artifact-id}"})
WHERE label.iri <> "http://www.w3.org/2002/07/owl#Nothing"
RETURN path
#+end_src
**** rootLabels/{root-id}
#+header: :var root-id=(or)
#+name: cyres-root-labels-root-id
#+begin_src cypher
MATCH (label)-[:subClassOf]->(root:Class{iri: "${root-id}"})
, path = (label)-[relation*0..1]-(maybe)
WHERE NONE (r in relation WHERE type(r) IN ["isDefinedBy", "subClassOf", "filler"])
      AND NOT (label.iri =~ ".*_:.*") AND NOT (maybe.iri =~ ".*_:.*")
      AND label.iri <> "http://www.w3.org/2002/07/owl#Nothing"
RETURN path
#+end_src
**** parcellationRoots
#+name: cyres-parcellation-roots
#+begin_src cypher
MATCH path = (artifact)
-[:subClassOf*0..2]->(parent)
-[:ilxtr:isDefinedInTaxon]->(species)
WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
RETURN path
UNION
MATCH path = (root)
-[:ilxtr:isDefinedBy]->(artifact)
-[:subClassOf*0..2]->(parent)
-[:ilxtr:isDefinedInTaxon]->(species)
RETURN path
#+end_src
**** parcellationRoots/{species-id}
#+header: :var species-id=(or)
#+name: cyres-parcellation-roots-species-id
#+begin_src cypher
MATCH path = (artifact)
-[:subClassOf*0..2]->(parent)
-[:ilxtr:isDefinedInTaxon]->(species:Class{iri: "${species-id}"})
WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
return path
UNION
MATCH path = (root)
-[:ilxtr:isDefinedBy]->(artifact)
-[:subClassOf*0..2]->(parent)
-[:ilxtr:isDefinedInTaxon]->(species:Class{iri: "${species-id}"})
RETURN path
#+end_src

#+call: cyres-parcellation-roots-species-id(species-id="NCBITaxon:9606")

**** parcellationRoots/{species-id}/{region-id}
#+header: :var species-id=(or)
#+header: :var region-id=(or)
#+name: cyres-parcellation-roots-species-id-region-id
#+begin_src cypher
MATCH
(region:Class{iri: "${region-id}"})
<-[:ilxtr:isDefinedInRegion]-
(parent)
-[:ilxtr:isDefinedInTaxon]->
(species:Class{iri: "${species-id}"})
WITH parent
MATCH path = (artifact)
-[:subClassOf*0..2]->(parent)
WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
RETURN path
UNION
MATCH
(region:Class{iri: "${region-id}"})
<-[:ilxtr:isDefinedInRegion]-
(parent)
-[:ilxtr:isDefinedInTaxon]->
(species:Class{iri: "${species-id}"})
WITH parent
MATCH path = (root)
-[:ilxtr:isDefinedBy]->(artifact)
-[:subClassOf*0..2]->(parent)
RETURN path
#+end_src
**** parcellationRootsFMA/{species-id}/{fma-id}
#+header: :var species-id=(or)
#+header: :var region-id=(or)
#+name: cyres-parcellation-roots-fma-species-id-region-id
#+begin_src cypher
MATCH (fma:Class{iri: "${fma-id}"})
WITH "FMA:" + toString(fma.`http://purl.org/sig/ont/fma/FMAID`) AS curie
MATCH (region)
-[:subClassOf*]->(start:Class{iri: "http://purl.obolibrary.org/obo/UBERON_0001062"})
WHERE any(x IN
          region.`http://www.geneontology.org/formats/oboInOwl#hasDbXref`
          WHERE x =~ curie)
WITH region
MATCH
(region)
<-[:ilxtr:isDefinedInRegion]-
(parent)
-[:ilxtr:isDefinedInTaxon]->
(species:Class{iri: "${species-id}"})
WITH parent
MATCH path = (artifact)
-[:subClassOf*0..2]->(parent)
WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
RETURN path
UNION
MATCH (fma:Class{iri: "${fma-id}"})
WITH "FMA:" + toString(fma.`http://purl.org/sig/ont/fma/FMAID`) AS curie
MATCH (region)
-[:subClassOf*]->(start:Class{iri: "http://purl.obolibrary.org/obo/UBERON_0001062"})
WHERE any(x IN
          region.`http://www.geneontology.org/formats/oboInOwl#hasDbXref`
          WHERE x =~ curie)
WITH region
MATCH
(region)
<-[:ilxtr:isDefinedInRegion]-
(parent)
-[:ilxtr:isDefinedInTaxon]->
(species:Class{iri: "${species-id}"})
WITH parent
MATCH path = (root)
-[:ilxtr:isDefinedBy]->(artifact)
-[:subClassOf*0..2]->(parent)
RETURN path
#+end_src
**** parcellationGraph
#+name: cyres-parcellation-graph
#+begin_src cypher
MATCH path = (artifact)
-[:subClassOf*0..2]->(parent)
-[:ilxtr:isDefinedInTaxon]->(species)
WHERE artifact.iri <> "http://www.w3.org/2002/07/owl#Nothing"
return path
UNION
MATCH path = (maybe)
-[relation*0..1]-(label)
-[:subClassOf]->(root)
-[:ilxtr:isDefinedBy]->(artifact)
-[:subClassOf*0..2]->(parent)
-[:ilxtr:isDefinedInTaxon]->(species)
WHERE NONE (r in relation WHERE type(r) IN ["isDefinedBy", "subClassOf", "filler"])
      AND NOT (label.iri =~ ".*_:.*") AND NOT (maybe.iri =~ ".*_:.*")
      AND label.iri <> "http://www.w3.org/2002/07/owl#Nothing"
RETURN path
#+end_src
**** organList
# TODO generate from the canonical organ list above
#+name: cyres-organ-list
#+begin_src cypher
MATCH (n)
WHERE n.iri IN [
        "http://purl.org/sig/ont/fma/fma7195",  // lung
        "http://purl.org/sig/ont/fma/fma7088",  // heart
        "http://purl.org/sig/ont/fma/fma7197",  // liver
        "http://purl.org/sig/ont/fma/fma7198",  // pancreas
        "http://purl.org/sig/ont/fma/fma7203",  // kidney
        "http://purl.org/sig/ont/fma/fma7148",  // stomach
        "http://purl.org/sig/ont/fma/fma7196",  // spleen
        "http://purl.org/sig/ont/fma/fma14543", // colon
        "http://purl.org/sig/ont/fma/fma7201",  // large intestine
        "http://purl.org/sig/ont/fma/fma7200",  // small intestine
        "http://purl.org/sig/ont/fma/fma7199",  // intestine
        "http://purl.org/sig/ont/fma/fma15900", // urinary bladder
        "http://purl.org/sig/ont/fma/fma45659", // lower urinary tract
        "http://purl.org/sig/ont/fma/fma7157",  // nervous system
        "http://purl.org/sig/ont/fma/fma9903",  // peripheral nervous system
        "http://purl.org/sig/ont/fma/fma9906",  // sympathetic nervous system
        "http://purl.org/sig/ont/fma/fma7647",  // spinal cord
        "http://purl.org/sig/ont/fma/fma50801", // brain
        "http://purl.org/sig/ont/fma/fma5889"   // autonomic ganglion
        ]
RETURN n
#+end_src
**** speciesList
#+name: cyres-species-list
#+begin_src cypher
MATCH (n)
WHERE n.iri IN [
        "http://purl.obolibrary.org/obo/NCBITaxon_9378",   // Suncus murinus
        "http://purl.obolibrary.org/obo/NCBITaxon_9606",   // Homo sapiens
        "http://purl.obolibrary.org/obo/NCBITaxon_9685",   // Felis catus
        "http://purl.obolibrary.org/obo/NCBITaxon_9823",   // Sus scrofa
        "http://purl.obolibrary.org/obo/NCBITaxon_10090",  // Mus musculus
        "http://purl.obolibrary.org/obo/NCBITaxon_10116"   // Rattus norvegicus
        ]
RETURN n
#+end_src
*** shortestSimple
# FIXME TODO make sure this actuall works as expected, I think it will?
#+header: :var start_id=(or)
#+header: :var end_id=(or)
#+header: :var max_depth=(or)
#+header: :var relationship=(or)
#+name: cyres-shortest-simple
#+begin_src cypher
MATCH (start:Class{iri: '${start_id}'})
WITH start
MATCH (end:Class{iri: '${end_id}'})
WITH start, end
MATCH path = shortestPath((start)-[:${relationship}*..${max_depth}]->(end))
RETURN path
#+end_src
*** neurons
**** connectivity
#+header: :var start_id=(or)
#+name: cyres-neurons-connectivity
#+begin_src cypher
MATCH (blank)-
[entrytype:ilxtr:hasSomaLocatedIn|ilxtr:hasAxonLocatedIn|ilxtr:hasDendriteLocatedIn|ilxtr:hasPresynapticTerminalsIn]
->(location:Class{iri: '${start_id}'})
WITH location, entrytype, blank
MATCH (phenotype)<-[predicate]-(blank)<-[:equivalentClass]-(neuron)
WHERE NOT (phenotype.iri =~ ".*_:.*")
// RETURN phenotype, (phenotype)-[predicate]-(neuron) as e
// WITH location, predicate, phenotype, neuron
RETURN location, entrytype, neuron, predicate, phenotype
#+end_src
**** connectedRegions
#+header: :var start_id=(or)
#+name: cyres-neurons-connected-regions
#+begin_src cypher
MATCH (blank)-
[entrytype:ilxtr:hasSomaLocatedIn|ilxtr:hasAxonLocatedIn|ilxtr:hasDendriteLocatedIn|ilxtr:hasPresynapticTerminalsIn]
->(location:Class{iri: '${start_id}'})
WITH entrytype, blank
MATCH (phenotype)<-[:${target_predicate}]-(blank)
// WHERE NOT (phenotype.iri =~ ".*_:.*")
RETURN phenotype
#+end_src
*** apinat
**** bundles/{start-id}
#+header: :var start-id=(or)
#+name: cyres-apinat-bundles-start-id
#+begin_src cypher
MATCH path1 = (start:Class{iri: "${start-id}"})
-[:apinatomy:annotates]->(start_housing)
-[:apinatomy:subtypes*0..1]->()
-[:apinatomy:clones*0..1]->(layer_or_end)
-[:apinatomy:layers*0..1]->()
-[:apinatomy:bundles]->(linkStart)
-[:apinatomy:prevChainEndLevels|apinatomy:prev|apinatomy:source*1..]->(link)
-[:apinatomy:targetOf|apinatomy:sourceOf]->(linkSoma)  // axon or dendrite root
-[:apinatomy:conveyingLyph]->()
-[:apinatomy:supertype*0..1]->(soma:NamedIndividual)
-[:apinatomy:external]->(c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
WITH path1, link
OPTIONAL MATCH path2 = (link)
-[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
-[:apinatomy:layerIn*0..1]->(end)
-[:apinatomy:external]->(external)
RETURN path1, path2
#+end_src
**** old-bundles/{start-id}
#+header: :var start-id=(or)
#+name: cyres-apinat-old-bundles-start-id
#+begin_src cypher
MATCH path1 = (start:Class{iri: '${start-id}'})
-[:apinatomy:annotates]->(start_housing)
-[:apinatomy:bundlesChains]->(chain)
-[:apinatomy:root]->(root)
-[:apinatomy:internalIn]->(layer_or_end)  # this hits a cycle back to start_housing
-[:apinatomy:cloneOf*0..1]->()
-[:apinatomy:supertype*0..1]->()
-[:apinatomy:external]->(layer_or_end_external)
WITH path1, root, layer_or_end AS layer
OPTIONAL MATCH path2 = (layer)
-[:apinatomy:layerIn]->(end_housing)
-[:apinatomy:external]->(end_housing_external)
WITH path1, path2, root
MATCH path3 = (root) // in the layer case this hits an additional lyph
<-[:apinatomy:target|apinatomy:source]-(link)
<-[:apinatomy:conveys]-(soma)
<-[:apinatomy:annotates]-(soma_NLX)
RETURN path1, path2, path3
#+end_src
**** somas
#+name: cyres-apinat-somas
#+begin_src cypher
MATCH (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
-[:apinatomy:annotates]->(soma:NamedIndividual)
RETURN soma
#+end_src

#+call: cyres-apinat-somas() :limit 9999

**** housing-lyphs
#+name: cyres-apinat-housing-lyphs
#+begin_src cypher
MATCH path = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
-[:apinatomy:annotates]->(soma:NamedIndividual)  // soma lyph
-[:apinatomy:conveys]->(somaLink)                // link connecting soma to axon and dendrite
-[:apinatomy:target|apinatomy:source]->(root)    // axon or dendrite root
-[:apinatomy:controlNodes|apinatomy:rootOf*1..2]->(chain)                    // axon or dendrite tree
-[:apinatomy:housingLyphs]->(housing)            // list of lyphs housing the trees
-[:apinatomy:external*0..1]->(external)          // external ids for the housing lyphs
WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
RETURN path
#+end_src
**** housing-lyphs/{start-id}
#+header: :var start-id=(or)
#+name: cyres-apinat-housing-lyphs-start-id
#+begin_src cypher
MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
-[:apinatomy:annotates]->(soma:NamedIndividual)  // soma lyph
-[:apinatomy:conveys]->(somaLink)                // link connecting soma to axon and dendrite
-[:apinatomy:target|apinatomy:source]->(root)    // axon or dendrite root
-[:apinatomy:internalIn]->(layer_or_end)
-[:apinatomy:cloneOf*0..1]->()
-[:apinatomy:supertype*0..1]->()
-[:apinatomy:external]->(layer_or_end_external:Class{iri: '${start-id}'})
WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
WITH path1, root
MATCH path2 = (root)
-[:apinatomy:controlNodes|apinatomy:rootOf*1..2]->(chain)                    // axon or dendrite tree
-[:apinatomy:housingLyphs]->(housing)            // list of lyphs housing the trees
-[:apinatomy:external*0..1]->(external)          // external ids for the housing lyphs
RETURN path1, path2

UNION

MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
-[:apinatomy:annotates]->(soma:NamedIndividual)  // soma lyph
-[:apinatomy:conveys]->(somaLink)                // link connecting soma to axon and dendrite
-[:apinatomy:target|apinatomy:source]->(root)    // axon or dendrite root
-[:apinatomy:internalIn]->(layer)
-[:apinatomy:cloneOf*0..1]->()
-[:apinatomy:supertype*0..1]->()
-[:apinatomy:layerIn]->(end_housing)
-[:apinatomy:external]->(end_housing_external:Class{iri: '${start-id}'})
WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
WITH path1, root
MATCH path2 = (root)
-[:apinatomy:rootOf]->(chain)                    // axon or dendrite tree
-[:apinatomy:housingLyphs]->(housing)            // list of lyphs housing the trees
-[:apinatomy:external*0..1]->(external)          // external ids for the housing lyphs
RETURN path1, path2
#+end_src
**** soma-processes
# #+header: :results table :limit 1
#+header: :file ./images/soma-processes.svg :results file :limit 99999
#+name: cyres-apinat-soma-processes
#+begin_src cypher
MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
-[:apinatomy:annotates]->(soma:NamedIndividual)    // soma lyph
-[:apinatomy:conveys]->(linkSoma)                  // link connecting soma to axon and dendrite
-[:apinatomy:target|apinatomy:source]->(nodeRoot)  // axon or dendrite root
-[:apinatomy:sourceOf|apinatomy:nextChainStartLevels|apinatomy:next*1..]->(link)  // sourceOf is first and only once
-[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
-[:apinatomy:cloneOf*0..1]->()
-[:apinatomy:supertype*0..1]->()
-[:apinatomy:external]->(external)
WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
WITH path1, nodeRoot, layer_or_end AS layer
OPTIONAL MATCH path2 = (layer)  // if we were in a layer, get the containing lyph as well
-[:apinatomy:layerIn]->(end_housing)
-[:apinatomy:external]->(end_housing_external)
WITH path1, path2, nodeRoot
MATCH path3 = (nodeRoot)        // extract chain for axon vs dendrite
-[:apinatomy:rootOf]->(chain)
RETURN path1, path2, path3
#+end_src

A sparql version of the query (work in progress).
#+name: sparql-soma-processes
#+begin_src sparql :var limit="99"
SELECT DISTINCT
?c
?soma
?linkSoma
?nodeRoot
?link
?layer_or_end
?cloned
?supertype
?external_st
?external_loe
?external_end_housing
WHERE
{
  VALUES ?c { NLX:154731 }
  ?c rdf:type owl:Class .
  ?c apinatomy:annotates ?soma .
  ?soma rdf:type owl:NamedIndividual .
  ?soma apinatomy:conveys ?linkSoma .
  ?linkSoma apinatomy:target | apinatomy:source ?nodeRoot .
  ?nodeRoot apinatomy:rootOf ?chain .
  ?nodeRoot apinatomy:sourceOf | apinatomy:nextChainStartLevels | apinatomy:next+ ?link .
  ?link apinatomy:fasciculatesIn | apinatomy:endsIn ?layer_or_end .
  optional { ?layer_or_end apinatomy:cloneOf* ?cloned . } # optional
  optional { ?cloned apinatomy:supertype* ?supertype . } # optional

  ?supertype apinatomy:external ?external_st .
  ?layer_or_end apinatomy:external ?external_loe .

  optional { ?layer_or_end apinatomy:layerIn ?end_housing . } # optional
  optional { ?end_housing apinatomy:external ?external_end_housing . } # optional
}
limit ?limit
#+end_src
**** soma-processes/{start-id}
#+header: :var start-id=(or)
#+name: cyres-apinat-soma-processes-start-id
#+begin_src cypher
MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
-[:apinatomy:annotates]->(soma:NamedIndividual)    // soma lyph
-[:apinatomy:conveys]->(linkSoma)                  // link connecting soma to axon and dendrite
-[:apinatomy:target|apinatomy:source]->(nodeRoot)  // axon or dendrite root
-[:apinatomy:internalIn]->(layer_or_end)
-[:apinatomy:cloneOf*0..1]->()
-[:apinatomy:supertype*0..1]->()
-[:apinatomy:layerIn*0..1]->(layerSoma)  // don't need to see both layer and housing for soma
-[:apinatomy:external]->(externalEndSoma:Class{iri: '${start-id}'})
WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
WITH path1, nodeRoot
MATCH path3 = (chain)
<-[:apinatomy:rootOf]-(nodeRoot)
-[:apinatomy:sourceOf|apinatomy:nextChainStartLevels|apinatomy:next*1..]->(link)
-[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
-[:apinatomy:cloneOf*0..1]->()
-[:apinatomy:supertype*0..1]->()
-[:apinatomy:external]->(external)
WITH path1, path3, nodeRoot, layer_or_end AS layer
OPTIONAL MATCH path2 = (layer)  // if we were in a layer, get the containing lyph as well
-[:apinatomy:layerIn]->(end_housing)
-[:apinatomy:external]->(end_housing_external)
RETURN path1, path2, path3
#+end_src
**** weird-soma-processes/{process-id}
#+header: :var process-id=(or)
#+name: cyres-apinat-weird-soma-processes-process-id
#+begin_src cypher
MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
-[:apinatomy:annotates]->(soma:NamedIndividual)    // soma lyph
-[:apinatomy:conveys]->(linkSoma)                  // link connecting soma to axon and dendrite
-[:apinatomy:target|apinatomy:source]->(nodeRoot)  // axon or dendrite root
-[:apinatomy:sourceOf|apinatomy:nextChainStartLevels|apinatomy:next*1..]->(link)  // sourceOf is first and only once
-[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
-[:apinatomy:cloneOf*0..1]->()
-[:apinatomy:supertype*0..1]->()
-[:apinatomy:external]->(external:Class{iri: '${process-id}'})
WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
WITH path1, nodeRoot, layer_or_end AS layer
OPTIONAL MATCH path2 = (layer)  // if we were in a layer, get the containing lyph as well
-[:apinatomy:layerIn]->(end_housing)
-[:apinatomy:external]->(end_housing_external)
WITH path1, path2, nodeRoot
MATCH path3 = (nodeRoot)        // extract chain for axon vs dendrite
-[:apinatomy:rootOf]->(chain)
RETURN path1, path2, path3

UNION

MATCH path1 = (c:Class{iri: "http://uri.neuinfo.org/nif/nifstd/nlx_154731"})
-[:apinatomy:annotates]->(soma:NamedIndividual)    // soma lyph
-[:apinatomy:conveys]->(linkSoma)                  // link connecting soma to axon and dendrite
-[:apinatomy:target|apinatomy:source]->(nodeRoot)  // axon or dendrite root
-[:apinatomy:sourceOf|apinatomy:nextChainStartLevels|apinatomy:next*1..]->(link)  // sourceOf is first and only once
-[:apinatomy:fasciculatesIn|apinatomy:endsIn]->(layer_or_end)
-[:apinatomy:cloneOf*0..1]->()
-[:apinatomy:supertype*0..1]->()
-[:apinatomy:external]->(external)
WHERE soma.`https://apinatomy.org/uris/readable/generated` IS NULL
WITH path1, nodeRoot, layer_or_end AS layer
MATCH path2 = (layer)  // if we were in a layer, get the containing lyph as well
-[:apinatomy:layerIn]->(end_housing)
-[:apinatomy:external]->(end_housing_external:Class{iri: '${process-id}'})
WITH path1, path2, nodeRoot
MATCH path3 = (nodeRoot)        // extract chain for axon vs dendrite
-[:apinatomy:rootOf]->(chain)
RETURN path1, path2, path3
#+end_src
** yaml file
Example template.
#+begin_src yaml
cypherResources:
  - path:
    operations: &name-ops
      - summary: do the thing
        parameters:
          - name: some-id
            description: does something
            paramType:
    query: &name |
      <<block-name>>
#+end_src

#+name: cypher-resources
#+begin_src yaml :noweb yes :tangle ../resources/scigraph/cypher-resources.tangled.yaml
cypherResources:
  - path: /dynamic/prod/sparc/organParts/{id}
    operations: &organParts-ops
      - summary: <<nonl(desc-organ-parts())>>
        parameters:
         - name: id
           description: ontology id of the organ
           paramType: path
    query: &organParts |
      <<cyres-organ-parts>>

  - path: /dynamic/test/sparc/organParts/{id}
    operations: *organParts-ops
    query: *organParts

  - path: /dynamic/prod/sparc/parcellationArtifacts
    operations:
      - summary: Get the graph of all parcellation artifacts for all species
    query: |
      <<cyres-parcellation-artifacts>>

  - path: /dynamic/prod/sparc/parcellationArtifacts/{species-id}
    operations:
      - summary: Get the graph of all parcellation artifacts for a single species
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
    query: |
      <<cyres-parcellation-artifacts-species-id>>

  - path: /dynamic/prod/sparc/artifactRoots/{artifact-id}
    operations:
      - summary: Get the graph of all parcellation label roots for a single artifact WARNING this can return no results
        parameters:
         - name: artifact-id
           description: ontology id of the parcellation artifact
           paramType: path
    query: |
      <<cyres-artifact-roots-artifact-id>>

  - path: /dynamic/prod/sparc/artifactLabels/{artifact-id}
    operations:
      - summary: Get the graph of all parcellation labels for a single artifact WARNING this can return no results
        parameters:
         - name: artifact-id
           description: ontology id of the parcellation artifact
           paramType: path
    query: |
      <<cyres-artifact-labels-artifact-id>>

  - path: /dynamic/prod/sparc/rootLabels/{root-id}
    operations: &rootLabes-ops
      - summary: Get the list of all parcellation labels for a single label root
        parameters:
         - name: root-id
           description: ontology id of the parcellation label root
           paramType: path
    query: &rootLabels |
      <<cyres-root-labels-root-id>>

  - path: /dynamic/test/sparc/rootLabels/{root-id}
    operations: *rootLabes-ops
    query: *rootLabels

  - path: /dynamic/prod/sparc/parcellationRoots
    operations:
      - summary: Get the graph of all parcellation label roots for all species
    query: |
      <<cyres-parcellation-roots>>

  - path: /dynamic/prod/sparc/parcellationRoots/{species-id}
    operations:
      - summary: Get the graph of all parcellation label roots for a single species
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
    query: |
      <<cyres-parcellation-roots-species-id>>

  - path: /dynamic/prod/sparc/parcellationRoots/{species-id}/{region-id}
    operations:
      - summary: Get the graph of all parcellation label roots for a single species and anatomical region
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
         - name: region-id
           description: ontology id of the anatomical region
           paramType: path
    query: |
      <<cyres-parcellation-roots-species-id-region-id>>

  - path: /dynamic/prod/sparc/parcellationRootsFMA/{species-id}/{fma-id}
    operations: &parcellationRootsFMA-ops
      - summary: Get the graph of all parcellation label roots for a single species and anatomical region
        parameters:
         - name: species-id
           description: ontology id of the species
           paramType: path
         - name: fma-id
           description: ontology id of the anatomical region
           paramType: path
    query: &parcellationRootsFMA |
      <<cyres-parcellation-roots-fma-species-id-region-id>>

  - path: /dynamic/test/sparc/parcellationRootsFMA/{species-id}/{fma-id}
    operations: *parcellationRootsFMA-ops
    query: *parcellationRootsFMA

  - path: /dynamic/prod/sparc/parcellationGraph
    operations:
      - summary: Get the graph of all parcellation labels for all species
    query: |
      <<cyres-parcellation-graph>>

  - path: /dynamic/prod/sparc/organList
    operations: &organList-ops
      - summary: Get the list of all FMA organ identifiers relevant to SPARC
    query: &organList |
      <<cyres-organ-list>>

  - path: /dynamic/test/sparc/organList
    operations: *organList-ops
    query: *organList

  - path: /dynamic/prod/sparc/speciesList
    operations: &speciesList-ops
      - summary: Get the list of all NCBITaxon species identifiers relevant to SPARC
    query: &speciesList |
      <<cyres-species-list>>

  - path: /dynamic/test/sparc/speciesList
    operations: *speciesList-ops
    query: *speciesList

  - path: /dynamic/shortestSimple
    query: |
      <<cyres-shortest-simple>>
    operations:
      - summary: Get the shortest path between two IDs
        parameters:
          - name: start_id
            description: The starting node (ex UBERON:0005751)
            paramType: query
          - name: end_id
            description: The ending node (ex UBERON:0001255)
            paramType: query
          - name: max_depth
            description: the maximum depth to traverse
            paramType: query
          - name: relationship
            description: The property to traverse (ex subClassOf or subClassOf|partOf|isA)
            paramType: query
            required: false

  - path: /dynamic/neurons/connectivity
    query: |
      <<cyres-neurons-connectivity>>
    operations:
      - summary: Get connected anatomical regions by neuron type
        parameters:
          - name: start_id
            description: The starting location (eg UBERON:0001759)
            paramType: query

  - path: /dynamic/neurons/connectedRegions
    query: |
      <<cyres-neurons-connected-regions>>
    operations:
      - summary: Get connected anatomical regions by starting location and target relationship
        parameters:
          - name: start_id
            description: The starting location (eg UBERON:0001759)
            paramType: query
          - name: target_predicate
            description: The predicate for the type of connectivity (eg ilxtr:hasPresynapticTerminalsIn)
            paramType: query
            required: false

  - path: /dynamic/demos/apinat/bundles/{start-id}
    operations:
      - summary: Return the paths to somas from an anatomical region (aka connected-somas)
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      <<cyres-apinat-bundles-start-id>>

  - path: /dynamic/demos/apinat/old-bundles/{start-id}
    operations:
      - summary: Return the paths to somas from an anatomical region (aka connected-somas)
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      <<cyres-apinat-old-bundles-start-id>>

  - path: /dynamic/demos/apinat/somas
    operations:
      - summary: List all the somas for a given graph (TODO on the given graph)
    query: |
      <<cyres-apinat-somas>>

  - path: /dynamic/demos/apinat/housing-lyphs
    operations:
      - summary: List all the housing lyphs (neuronal processes) for all starting points.
    query: |
      <<cyres-apinat-housing-lyphs>>

  - path: /dynamic/demos/apinat/housing-lyphs/{start-id}
    operations:
      - summary: List all the housing lyphs for a starting point.
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      <<cyres-apinat-housing-lyphs-start-id>>

  - path: /dynamic/demos/apinat/soma-processes
    operations:
      - summary: List all the neuronal processes for all somas.
    query: |
      <<cyres-apinat-soma-processes>>

  - path: /dynamic/demos/apinat/soma-processes/{start-id}
    operations:
      - summary: List all the neuronal processes for somas located in start-id.
        parameters:
         - name: start-id
           description: ontology id of the starting point
           paramType: path
    query: |
      <<cyres-apinat-soma-processes-start-id>>

  - path: /dynamic/demos/apinat/weird-soma-processes/{process-id}
    operations:
      - summary: List all the neuronal processes for somas where some processes is in process-id.
        parameters:
         - name: process-id
           description: ontology id of the starting point
           paramType: path
    query: |
      <<cyres-apinat-weird-soma-processes-process-id>>

  - path: /dynamic/demos/apinat/neru-1/{neupop-id}
    operations: &neru-ops
      - summary: Return the housing regions and publications for neurulated groups.
        parameters:
         - name: neupop-id
           description: neuron population identifier
           paramType: path
    query: |
      <<cypher-neru-1>>

  - path: /dynamic/demos/apinat/neru-2/{neupop_id}
    operations: *neru-ops
    query: |
      <<cypher-neru-2>>

  - path: /dynamic/demos/apinat/neru-3/{neupop_id}
    operations: *neru-ops
    query: |
      <<cypher-neru-3>>

  - path: /dynamic/demos/apinat/neru-4/{neupop_id}
    operations: *neru-ops
    query: |
      <<cypher-neru-4>>

  - path: /dynamic/demos/apinat/modelList
    operations:
      - summary: <<nonl(desc-cypher-apinat-models())>>
    query: |
      <<cypher-apinat-models>>

  - path: /dynamic/demos/apinat/modelPopulationsReferences/{model_id}
    operations:
      - summary: <<nonl(desc-cypher-apinat-model-pops-and-refs())>>
        parameters:
         - name: model_id
           description: the identifier for an ApiNATOMY model
           paramType: path
    query: |
      <<cypher-apinat-model-pops-and-refs>>

#+end_src
* ApiNATOMY competency queries
** expected counts per model
Expected number of somas and neupops.

| model-id          | somas | neupops |
|-------------------+-------+---------|
| keast-bladder     |    34 |      20 |
| bolser-lewis      |    29 |      29 |
| sawg-stomach      |    14 |      14 |
| sawg-distal-colon |    23 |      17 |
| ard-arm-cardiac   |    41 |      12 |
| bronchomotor      |    19 |       6 |

*** somas
somas >= neupops

The number of somas for distinct populations in a given model.

*** populations
the number of neuron populations as defined by the neurulator that have an ontology identifier

*** neuron part per region per model
| model-id          | diag abbrev | external | somas | axons | axon term | dend | dend term |
|-------------------+-------------+----------+-------+-------+-----------+------+-----------|
| bolser-lewis      | SCG         |          |    17 |       |           |      |           |
| keast-bladder     |             |          |       |       |           |      |           |
| bronchomotor      |             |          |       |       |           |      |           |
| ard-arm-cardiac   |             |          |       |       |           |      |           |
| sawg-distal-colon |             |          |       |       |           |      |           |
| sawg-stomach      |             |          |       |       |           |      |           |

** expected locations
use NPO as a top down constraint on the locations of somas etc.
*** somas
could do this by population or generically
*** population process location
soma-processes
can also be checked using NPO but not needed for simple cases
| model-id     | neupop | diag abbrev | external |
|--------------+--------+-------------+----------|
| bolser-lewis | q      | PN          |          |
| bolser-lewis | q      | C4          |          |
| bolser-lewis | q      | PHRNIC      |          |
| bolser-lewis | q      | DIAPHRAGM   |          |
*** location process populations
bundles
NPO here as well
| model-id     | diag abbrev | external | neupop  |
|--------------+-------------+----------+---------|
| bolser-lewis | VAGUS       |          | 9 total |

** cross model
*** expect populations from models to have processes in common location
#+name: region-populations
#+begin_src sparql
select distinct
?external
(str(?el) as ?label)
#?p
?model
#?region
#?link
#?neru
# ?seed
(replace(str(?neru), "^.+-([A-Za-z0-9]+)$", "$1") as ?neuron_number)
#?dyn
?neupop
where {
  values ?external { UBERON:0006457 UBERON:0001894 UBERON:0005453 UBERON:0018683 }

  ?external a owl:Class ;
    apinatomy:annotates ?region ;
    rdfs:label ?el .

  ?region a elements:Lyph .

  ?model a elements:Graph ;
    apinatomy:lyphs ?region .

  ?link ( apinatomy:fasciculatesIn | apinatomy:endsIn | apinatomy:layerIn | apinatomy:internalIn )+ ?region .

  ?neru apinatomy:links ?link ;
    apinatomy:description ?dyn ;
    a elements:Group .
  filter contains(str(?dyn), "dynamic")
  optional { ?neru apinatomy:external ?neupop . }
  optional { ?seed apinatomy:seedIn ?neru . } # seedIn sort of works but misses cases where a dynamic group was created with a seed
}
order by str(?external) str(?model) xsd:integer(?neuron_number)
#+end_src

Expected.
# FIXME the hline breaks with uberon somehow or for some reason? was
# doing (- 8 14) and getting -6 somehow the width was too narrow and
# broke `org-table--align-field'
| external       | diag abbrev  | model-id          | neupop            |
|----------------+--------------+-------------------+-------------------|
| UBERON:0006457 | T1           | bolser-lewis      | 1 2 3 6 7         |
| UBERON:0006457 | T1           | keast-bladder     | 20                |
| UBERON:0001894 | DIENC        | bolser-lewis      | 1 26              |
| UBERON:0001894 | Diencephalon | keast-bladder     | 13 14 15 16 17 18 |
| UBERON:0005453 | IMG          | keast-bladder     | 3 6 7 11          |
| UBERON:0005453 | IMG          | sawg-distal-colon | B D F G H Q       |
| UBERON:0018683 | LumSplN      | keast-bladder     | 6 7 11            |
| UBERON:0018683 | LumSplN      | sawg-distal-colon | B                 |
*** vagus
OWL DL query

#+begin_src owldl
hasLocationPhenotype some ('part of' some 'vagus nerve')
hasLocationPhenotype some ('part of' some 'vagus nerve nucleus')
hasLocationPhenotype some ('part of' some 'vagus nerve' or 'part of' some 'vagus nerve nucleus')
#+end_src

#+begin_src cypher
// filter out things that project to the vagus nerve not that start in the vagus nerve or something like that
(neupop)-[:ilxtr:hasLocationPhenotype]->(:Class{iri: UBERON:0001759})
(neupop)-[:ilxtr:hasAxonPresynapticElementIn]->(axon_locations)
(neupop)-[:ilxtr:hasSensorySubcellularElementIn]->(dendrite_locations)
#+end_src

*** visualize all populations that have some process in the IMG
Images of nerus that have some process in the IMG, from =keast-bladder= and =sawg-distal-colon=.

** kg queries
#+call: cypher-neru-3(neupop_id="ilxtr:neuron-type-keast-11") :file ./images/neru-3-ntk-11.svg

#+RESULTS:
[[file:./images/neru-3-ntk-11.svg]]

#+call: neru-simplified(path="./images/neru-simplified-ntk-11.svg", json-string=python-neru-helper(result=cypher-neru-helper(neupop_id="ilxtr:neuron-type-keast-11")))

#+RESULTS:
[[file:./images/neru-simplified-ntk-11.svg]]


TODO point people to the query that returns a list of all neuron populations and all populations + papers per model
#+call: cypher-neru-3(neupop_id="ilxtr:neuron-type-keast-9") :file ./images/neru-3-ntk-9.svg

#+RESULTS:
[[file:./images/neru-3-ntk-9.svg]]

#+call: neru-simplified(path="./images/neru-simplified-ntk-9.svg", json-string=python-neru-helper(result=cypher-neru-helper(neupop_id="ilxtr:neuron-type-keast-9")))

#+RESULTS:
[[file:./images/neru-simplified-ntk-9.svg]]

#+call: cypher-neru-debug(neupop_id="ilxtr:neuron-type-keast-2") :file ./images/debug-2.svg

#+RESULTS:
[[file:./images/debug-2.svg]]

#+call: cypher-neru-3(neupop_id="ilxtr:neuron-type-keast-2") :file ./images/neru-3-ntk-2.svg

#+RESULTS:
[[file:./images/neru-3-ntk-2.svg]]

#+call: neru-simplified(path="./images/neru-simplified-ntk-2.svg", json-string=python-neru-helper(result=cypher-neru-3-helper(neupop_id="ilxtr:neuron-type-keast-2")))

#+RESULTS:
[[file:./images/neru-simplified-ntk-2.svg]]


5 is going to be the easiest
#+call: cypher-neru-debug(neupop_id="ilxtr:neuron-type-keast-5") :file ./images/debug-5.svg

#+RESULTS:
[[file:./images/debug-5.svg]]

#+call: cypher-neru-3(neupop_id="ilxtr:neuron-type-keast-5") :file ./images/neru-3-ntk-5.svg

#+RESULTS:
[[file:./images/neru-3-ntk-5.svg]]

#+call: neru-simplified(path="./images/neru-simplified-ntk-5.svg", json-string=python-neru-helper(result=cypher-neru-3-helper(neupop_id="ilxtr:neuron-type-keast-5")))

#+RESULTS:
[[file:./images/neru-simplified-ntk-5.svg]]

*** neuron type keast 5 projects to
#+begin_src cypher
RETURN region
#+end_src

Expected.
| external       | label           |
|----------------+-----------------|
| UBERON:0016508 | pelvic ganglion |

*** img processes query
Input
| UBERON:0005453 | inferior mesenteric ganglion |

Expect
| ilxtr:neuron-type-keast-3  |
| ilxtr:neuron-type-keast-6  |
| ilxtr:neuron-type-keast-7  |
| ilxtr:neuron-type-keast-11 |
| ilxtr:neuron-type-sdcol-b  |
| ilxtr:neuron-type-sdcol-d  |
| ilxtr:neuron-type-sdcol-f  |
| ilxtr:neuron-type-sdcol-g  |
| ilxtr:neuron-type-sdcol-h  |
| ilxtr:neuron-type-sdcol-q  |

#+call: cypher-neru-processes-pop-only(region_id="UBERON:0005453") :results table :note inferior mesenteric ganglion

* Sanity checks
Other queries run against various representations of the data.
** JSON
#+name: &jq-count-datasets
: jq -c '.datasets | length'

#+name: &jq-count-path-metadata
: jq -c '[paths | select(.[-1] == "path_metadata")] | length'

#+begin_src bash :noweb yes
function path-metadata-coverage () {
    local PATH_EXPORT_JSON=$1
    local COUNT_T=$(<<&jq-count-datasets()>> "${PATH_EXPORT_JSON}")
    local COUNT_PM=$(<<&jq-count-path-metadata()>> "${PATH_EXPORT_JSON}")
    awk -v t=${COUNT_T} -v pm=${COUNT_PM} 'BEGIN { print ( pm / t ) }'
}
#+end_src
* General queries
General metadata and housekeeping queries.
** List all loaded ontologies
#+begin_src sparql
SELECT ?s WHERE { ?s a owl:Ontology }
#+end_src

#+begin_src cypher :limit 9999
MATCH (o:Ontology) RETURN o
#+end_src
** predicates
#+name: predicates-all
#+begin_src sparql
select distinct ?p ?l where { ?s ?p ?o . optional { ?p rdfs:label ?l . } } order by ?p
#+end_src

#+name: predicates-version
#+begin_src sparql
select ?s ?p ?o where {
values ?p { prov:startedAtTime prov:wasGeneratedBy dc:date owl:versionInfo TEMP:TimestampExportStart }
?s ?p ?o . } order by desc(str(?o))
#+end_src

** TODO versions
Useful version information is not present in all ontology files at the moment.

*** curation-export.ttl
#+begin_src sparql
select ?s ?tes ?vi where {
  ?s TEMP:TimestampExportStart ?tes ;
     owl:versionInfo ?vi .
}
#+end_src

*** TODO protcur.ttl
*** TODO apinat models
* Use cases
** Connectivity dashboard
*** organs
:PROPERTIES:
:CREATED:  [2021-08-06 Fri 13:10]
:END:
# FIXME looking for the ya' or ya" evil commands, I know I've used them before
# reval maybe? nope `url-unhex-string-at-point' `evil-inner-double-quote'
# "with escape \" yeah? "
# org doesn't have strings but evil works
#+begin_src elisp :results none :exports none
(defun org-babel-execute:ttl (body params)
  "Return the verbatim BODY of the ttl.

We can probably cook up an alternate version of this which would
expand into triples using arrays or something like that."
  body)
#+end_src

#+name: py-ttl-subjects
#+begin_src python :noweb yes :var input=ttl-organs() :results code :wrap src ttl
from pyontutils.core import OntGraph

g = OntGraph().parse(data=input, format='ttl')

#return [[g.namespace_manager._qhrm(_)] for _ in sorted(set(g.subjects()))]
return ' '.join([g.namespace_manager._qhrm(_) for _ in sorted(set(g.subjects()))])
#+end_src

#+name: ttl-organs
#+begin_src ttl
@prefix l: <http://www.w3.org/2000/01/rdf-schema#label> .
@prefix e: <http://uri.interlex.org/tgbugs/uris/readable/hasExistingId> .
@prefix FMA: <http://purl.org/sig/ont/fma/fma> .
@prefix UBERON: <http://purl.obolibrary.org/obo/UBERON_> .

# tissue
UBERON:0001013 l: "adipose tissue"; e: FMA:20110 .

# regions
UBERON:0002298 l: "brainstem"; e: FMA:79876 .
UBERON:0001016 l: "nervous system"; e: FMA:7157 .
UBERON:0000010 l: "peripheral nervous system"; e: FMA:9903 .
UBERON:0000013 l: "sympathetic nervous system"; e: FMA:9906 .
UBERON:0002005 l: "enteric nervous system"; e: FMA:66070 .
# TODO cardiovascular system # e.g. for blood pressure
# TODO cardiopulmonary system

# organs
UBERON:0000955 l: "brain"; e: FMA:50801 .
UBERON:0001155 l: "colon"; e: FMA:14543 .
UBERON:0002110 l: "gallbladder"; e: FMA:7202 .
UBERON:0000948 l: "heart"; e: FMA:7088 .
UBERON:0000160 l: "intestine"; e: FMA:7199 .
UBERON:0002113 l: "kidney"; e: FMA:7203 .
UBERON:0000059 l: "large intestine"; e: FMA:7201 .
UBERON:0002107 l: "liver"; e: FMA:7197 .
UBERON:0001556 l: "lower urinary tract"; e: FMA:45659 .
UBERON:0002048 l: "lung"; e: FMA:68877 .
UBERON:0001630 l: "muscle organ"; e: FMA:5022 .
UBERON:0001264 l: "pancreas"; e: FMA:7198 .
UBERON:0002097 l: "skin of body"; e: FMA:7163 .
UBERON:0002108 l: "small intestine"; e: FMA:7200 .
UBERON:0002240 l: "spinal cord"; e: FMA:7647 .
UBERON:0002106 l: "spleen"; e: FMA:7196 .
UBERON:0000945 l: "stomach"; e: FMA:7148 .
UBERON:0001255 l: "urinary bladder"; e: FMA:15900 .
#+end_src

*** nerves
#+name: ttl-nerves
#+begin_src ttl
@prefix l: <http://www.w3.org/2000/01/rdf-schema#label> .
@prefix e: <http://uri.interlex.org/tgbugs/uris/readable/hasExistingId> .
@prefix FMA: <http://purl.org/sig/ont/fma/fma> .
@prefix UBERON: <http://purl.obolibrary.org/obo/UBERON_> .

# XXX sciatic nerve is missing from this list

# not actually cranial
UBERON:0002019 l: "accessory XI nerve"; e: FMA:6720 . # missing from the larger list

# nerves missing from the larger list
UBERON:0001646 l: "abducens nerve"; e: FMA:50867 .
UBERON:0001650 l: "hypoglossal nerve"; e: FMA:50871 .
UBERON:0001579 l: "olfactory nerve"; e: FMA:46787 .
UBERON:0001644 l: "trochlear nerve"; e: FMA:50865 .
UBERON:0003723 l: "vestibulocochlear nerve"; e: FMA:50869 .

# the larger list
UBERON:0034728 l: "autonomic nerve" .
UBERON:0009009 l: "carotid sinus nerve" .
UBERON:0009675 l: "chorda tympani branch of facial nerve" .
UBERON:0019198 l: "dorsal nerve of clitoris" .
UBERON:0019197 l: "dorsal nerve of penis" .
UBERON:0010380 l: "enteric nerve" .
UBERON:0010406 l: "cholinergic enteric nerve" .
UBERON:0001647 l: "facial nerve"; e: FMA:50868 .
UBERON:0001649 l: "glossopharyngeal nerve"; e: FMA:50870 .
UBERON:0001643 l: "oculomotor nerve"; e: FMA:50864 .
UBERON:0002924 l: "terminal nerve" .
UBERON:0001645 l: "trigeminal nerve"; e: FMA:50866 .
UBERON:0001759 l: "vagus nerve"; e: FMA:5731 .
# TODO vagus nerve branches
UBERON:0018680 l: "greater splanchnic nerve" .
UBERON:0003438 l: "iris nerve" .
UBERON:0011096 l: "lacrimal nerve" .
UBERON:0035642 l: "laryngeal nerve" .
UBERON:0011766 l: "left recurrent laryngeal nerve" .
UBERON:0011767 l: "right recurrent laryngeal nerve" .
UBERON:0003716 l: "recurrent laryngeal nerve" .
UBERON:0011326 l: "superior laryngeal nerve" .
UBERON:3010764 l: "laryngeus ventralis" .
UBERON:0001964 l: "least splanchnic nerve" .
UBERON:0018681 l: "lesser splanchnic nerve" .
UBERON:0003721 l: "lingual nerve" .
UBERON:0022301 l: "long ciliary nerve" .
UBERON:0018683 l: "lumbar splanchnic nerve" .
UBERON:0000377 l: "maxillary nerve" .
UBERON:0036143 l: "meningeal branch of mandibular nerve" .
UBERON:0017641 l: "meningeal branch of spinal nerve" .
UBERON:0022300 l: "nasociliary nerve" .
UBERON:0008810 l: "nasopalatine nerve" .
UBERON:0035650 l: "nerve of clitoris" .
UBERON:0035649 l: "nerve of penis" .
UBERON:0015162 l: "superior branch of oculomotor nerve" .
UBERON:0018675 l: "pelvic splanchnic nerve" .
UBERON:0011391 l: "perineal nerve" .
UBERON:0001884 l: "phrenic nerve" .
UBERON:0034725 l: "pterygopalatine nerve" .
UBERON:0011390 l: "pudendal nerve" .
UBERON:0009625 l: "sacral nerve" .
UBERON:0018684 l: "sacral splanchnic nerve" .
UBERON:0022302 l: "short ciliary nerve" .
UBERON:0003715 l: "splanchnic nerve" .
UBERON:0018679 l: "thoracic splanchnic nerve" .
UBERON:0001323 l: "tibial nerve" .
UBERON:0036216 l: "tympanic nerve" .
UBERON:0018412 l: "vidian nerve" .

# cervical nerve
UBERON:0000962 l: "nerve of cervical vertebra"; e: FMA:5859 .

#+end_src

*** plexi
#+begin_src ttl
UBERON:0002439 l: "myenteric nerve plexus"; e: FMA:63252 .
#+end_src

**** TODO consult with SAWG about these
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 14:33]
:END:

*** ganglia
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 14:29]
:END:
#+name: ttl-ganglia
#+begin_src ttl
@prefix l: <http://www.w3.org/2000/01/rdf-schema#label> .
@prefix e: <http://uri.interlex.org/tgbugs/uris/readable/hasExistingId> .
@prefix syn: <http://uri.neuinfo.org/nif/nifstd/readable/synonym> .
@prefix FMA: <http://purl.org/sig/ont/fma/fma> .
@prefix UBERON: <http://purl.obolibrary.org/obo/UBERON_> .

UBERON:0001808 l: "parasympathetic ganglion" .
UBERON:0035776 l: "accessory ciliary ganglion" .
UBERON:0001805 l: "autonomic ganglion"; e: FMA:5889 .
UBERON:0014463 l: "cardiac ganglion" .
UBERON:0002262 l: "celiac ganglion" .
UBERON:0035783 l: "ganglion of ciliary nerve" .
UBERON:0001701 l: "glossopharyngeal ganglion" .
UBERON:0005360 l: "inferior glossopharyngeal IX ganglion" .
UBERON:0013500 l: "glossopharyngeal-vagus IX-X ganglion complex" .
UBERON:0035769 l: "mesenteric ganglion" .
UBERON:0005479 l: "superior mesenteric ganglion" .
UBERON:0005453 l: "inferior mesenteric ganglion" .
UBERON:0001989 l: "superior cervical ganglion" .
UBERON:0001990 l: "middle cervical ganglion" .
UBERON:0002440 l: "inferior cervical ganglion" .
UBERON:0003963 l: "otic ganglion" .
UBERON:0001807 l: "paravertebral ganglion" .
UBERON:0016508 l: "pelvic ganglion" .
UBERON:0003964 l: "prevertebral ganglion" .
UBERON:0003962 l: "pterygopalatine ganglion" .
UBERON:0005407 l: "sublingual ganglion" .
UBERON:0002059 l: "submandibular ganglion" .
UBERON:0001806 l: "sympathetic ganglion" .
UBERON:0005362 l: "vagus X ganglion" .
UBERON:0005364 l: "superior vagus X ganglion" .
UBERON:0005363 l: "inferior vagus X ganglion"; syn: "nodose ganglion" .
UBERON:0000408 l: "vertebral ganglion" .
UBERON:0002441 l: "cervicothoracic ganglion"; e: FMA:6469; syn: "stellate ganglion" .
#+end_src

**** TODO add synonyms
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 14:33]
:END:


*** neuron population by organ

#+name: organ-subjects
#+call: py-ttl-subjects(input=ttl-organs())

#+name: ganglia-subjects
#+call: py-ttl-subjects(input=ttl-ganglia())

#+name: nerve-subjects
#+call: py-ttl-subjects(input=ttl-nerves())

# FIXME somehow selecting only predicates here produces numerical results only !?
#+name: thing
#+begin_src sparql :noweb yes :var limit="99" :file ./reports/organ-nerve-ganglia.csv :results file
select distinct
?organ_start
?label
(count(distinct(?ele)) as ?elements)
#?elements
?model
#?ele
#?type
# ?sp
#?s
#?op_wat
#?p
#?o
where {
  values ?organ_start {
  <<organ-subjects()>>
  <<ganglia-subjects()>>
  <<nerve-subjects()>>
  }
  ?organ_start rdfs:label ?sl .
  bind(str(?sl) as ?label)
  # FIXME TODO traverse partonomy
  optional {
  values ?type { elements:Lyph elements:Group elements:Material elements:Chain }
  ?organ ( partOf: | rdfs:subClassOf )* ?organ_start .
  #?organ apinatomy:annotates ?ele .
  ?ele apinatomy:external ?organ .
  ?ele a ?type .
  ?model ( apinatomy:lyphs | apinatomy:chains | apinatomy:groups | apinatomy:materials ) ?ele .
  ?model a elements:Graph .
  #?ele apinatomy:inheritedExternal ?organ .
  #?o ?p ?q .
  }
}
group by ?organ_start ?label ?model
order by ?organ_start
#order by ?type ?organ ?model
#limit ?limit
#+end_src

#+begin_src elisp :results none :exports none
(ow-babel-eval "thing")
#+end_src

#+RESULTS: thing
[[file:./reports/organ-nerve-ganglia.csv]]
https://docs.google.com/spreadsheets/d/1pgprwTr4bvAaex8cNLeoRLUgt0VU5tilbWi4BCWF1JE/edit#gid=219324374
=organ-nerve-ganglia=
# TODO auto populate results
#+begin_src sparql
select distinct
?part_start
(str(?sl) as ?start_label)
where {
  ?part_start rdfs:subClassOf+/owl:someValuesFrom+ UBERON:0001255 .
  ?part_start rdfs:label ?sl .
}
#+end_src

the nested version here is massively slow
#+begin_src sparql :var limit="200"
select distinct
?part
(str(?l) as ?label)
where {

  values ?part_0 { UBERON:0001255 }

  #?part_1 rdfs:label ?l1 .
  ?part_1 rdfs:subClassOf ?bn0 .
                          ?bn0 a owl:Restriction .
                          ?bn0 owl:onProperty partOf: .
                          ?bn0 owl:someValuesFrom ?part_0 .


  optional {
  #?part_2 rdfs:label ?l2 .
  ?part_2 rdfs:subClassOf ?bn1 .
                          ?bn1 a owl:Restriction .
                          ?bn1 owl:onProperty partOf: .
                          ?bn1 owl:someValuesFrom ?part_1 .

    optional {
    #?part_3 rdfs:label ?l3 .
    ?part_3 rdfs:subClassOf ?bn2 .
                            ?bn2 a owl:Restriction .
                            ?bn2 owl:onProperty partOf: .
                            ?bn2 owl:someValuesFrom ?part_2 .
    }

  }

  #optional {
  #?part_4 rdfs:label ?l4 .
  #?part_4 rdfs:subClassOf ?bn3 .
                          #?bn3 a owl:Restriction .
                          #?bn3 owl:onProperty partOf: .
                          #?bn3 owl:someValuesFrom ?part_3 .
  #}

  ?part a owl:Class .
  ?part rdfs:label ?l .
  filter ( ?part = ?part_0 || ?part = ?part_1 || ?part = ?part_2 || ?part = ?part_3 ) #( || ?part = ?part_4 )

}
limit ?limit
#+end_src

#+begin_src sparql
select distinct
?part_1
where {
values ?part_0 { UBERON:0009958 }

?part_1 rdfs:label ?l .
?part_1 rdfs:subClassOf ?bn0 .
                        ?bn0 a owl:Restriction .
                        ?bn0 owl:onProperty partOf: .
                        ?bn0 owl:someValuesFrom ?part_0 .
}
#+end_src

#+begin_src sparql
select distinct
?sigh
(str(?l) as ?label)
#?sigx
#(str(?lx) as ?labx)
where {
?sigh rdfs:subClassOf+/owl:someValuesFrom+ UBERON:0001255 . # consider also RO:0002433 usually go together
?sigh rdfs:label ?l .
# FIXME somehow male and female urethra are still being pulled in :/
#filter ( ?sigh != UBERON:0000057 )
#filter not exists { ?sigh rdfs:subClassOf/owl:someValuesFrom UBERON:0000057 . }
?sigh rdfs:subClassOf/owl:onProperty partOf: .
#?sigx rdfs:subClassOf ?bn .
                      #?bn a owl:Restriction .
                      #?bn owl:onProperty partOf: .
                      #?bn owl:someValuesFrom ?sigh .
#?sigx rdfs:label ?lx .

filter not exists { ?sigh rdfs:subClassOf/owl:onProperty <http://purl.obolibrary.org/obo/uberon/core#channels_into> . }
filter not exists { ?sigh rdfs:subClassOf/owl:onProperty <http://purl.obolibrary.org/obo/uberon/core#channels_from> . }
filter not exists { ?sigh rdfs:subClassOf/owl:onProperty BFO:0000051 . }
filter not exists { ?sigh rdfs:subClassOf/owl:onProperty RO:0002150 . }
filter not exists { ?sigh rdfs:subClassOf/owl:onProperty RO:0002221 . }
filter not exists { ?sigh rdfs:subClassOf/owl:onProperty RO:0002178 . }
}
order by ?label

#+end_src

#+begin_src sparql
select distinct
?part
?prop
(str(?l) as ?label)
?part_start
(str(?sl) as ?start_label)
where {
  values ?wat { UBERON:0001255 }
  # FIXME this is still completely broken because sparql and
  # transitive queries over over owl restrictions are ... problematic
  ?part_start rdfs:subClassOf+/owl:someValuesFrom+ ?wat .
  filter ( ?prop = partOf: )
  ?part_start rdfs:label ?sl .
  ?part_start rdfs:subClassOf ?bny .
                              ?bny owl:onProperty ?prop .
  ?part rdfs:label ?l .
  ?part rdfs:subClassOf ?bn0 .
                        ?bn0 a owl:Restriction .
                        ?bn0 owl:onProperty partOf: .
                        ?bn0 owl:someValuesFrom ?part_start .

}
order by ?start_label
#+end_src

#+name: thing-table
#+call: thing() :results table

#+name: thing-push
#+begin_src python :var data=thing-table() :results drawer
from sparcur.sheets import Reports

class Thing:

    _data = data

    class options:
        preview = False
        to_sheets = True

    @Reports.makeReportSheet('organ_start', sheet_name='organ-nerve-ganglia')
    def populate(self, ext=None):
        return self._data, 'organ-nerve-ganglia coverage report'


t = Thing()
#t.populate()
return t._data
#+end_src

#+begin_src elisp :results none :exports none
(ow-babel-eval "thing-push")
#+end_src

*** neuron population by nerve
*** neuron population by ganglion
** ApiNATOMY
*** Summary statistics
**** Dashboard
# TODO configure header args for development vs production
#+begin_src elisp :results none :exports none
(ow-babel-eval "apinat-dashboard-model-summary")
(ow-babel-eval "apinat-dashboard-overview")
(ow-babel-eval "sparql-apinat-prefixes")
#+end_src

#+RESULTS: apinat-dashboard-model-summary
| label                                                                  | graph                   | lyphs | lyphs_input | externals | publications | nerus | neupops |
|------------------------------------------------------------------------+-------------------------+-------+-------------+-----------+--------------+-------+---------|
| Bolser-Lewis Model of the Physiology of the Superior Cervical Ganglion | bolew:bolser-lewis      |   498 |         107 |       169 |          238 |    29 |      29 |
| Keast ApiNATOMY model of bladder innervation                           | kblad:keast-bladder     |  1281 |         139 |       175 |           25 |    23 |      20 |
| Ardell Armour Cardiac Model                                            | aacar:ard-arm-cardiac   |  1127 |         127 |       127 |            1 |    23 |         |
| SPARC Bronchomotor Flatmap                                             | bromo:bronchomotor      |   868 |         143 |       127 |            6 |    19 |         |
| SAWG_colon-all                                                         | sdcol:sawg-distal-colon |   406 |          78 |        99 |            4 |     1 |         |
| Keast Bladder Model Scaffold Test                                      | scaft:scaffold-test     |  1290 |         145 |       162 |            4 |     2 |         |
| TOTAL                                                                  | 7                       |  5520 |         761 |       454 |          275 |    97 |      49 |

#+RESULTS: apinat-dashboard-overview
| element         | count |
|-----------------+-------|
| models          |     7 |
| models scigraph |     8 |
| lyphs           |  5525 |
| lyphs input     |   761 |
| externals       |   459 |
| publications    |   275 |
| nerus           |    97 |
| neupops         |    49 |
| neupops pattern |    49 |

# TODO links to a way to view the terms per ontology if possible
#+RESULTS: sparql-apinat-prefixes
| prefix    | count |
|-----------+-------|
| CL        |     1 |
| nlx       |     1 |
| NCBITaxon |     2 |
| ncit      |     2 |
| NCIT      |     4 |
| sao       |     4 |
| GO        |     5 |
| CHEBI     |    11 |
| pubmed    |    14 |
| EMAPA     |    17 |
| tgbugs    |    49 |
| ilx       |    76 |
| fma       |    91 |
| UBERON    |   182 |
| :SUM:     |   459 |
| :TOTAL:   |   459 |

#+header: :var n-sparql-apinat-graphs=n-sparql-apinat-graphs()
#+header: :var cypher-apinat-models=cypher-apinat-models()
#+header: :var n-sparql-apinat-lyphs=n-sparql-apinat-lyphs()
#+header: :var n-sparql-apinat-lyphs-input=n-sparql-apinat-lyphs-input()
#+header: :var n-sparql-apinat-external=n-sparql-apinat-external()
#+header: :var n-sparql-apinat-publications=n-sparql-apinat-publications()
#+header: :var n-apinat-nerus=n-apinat-nerus()
#+header: :var n-apinat-neupops=n-apinat-neupops()
#+header: :var n-apinat-neupops-pat=n-apinat-neupops-pat()
#+name: apinat-dashboard-overview
#+begin_src elisp :exports results
(let ((models (caar n-sparql-apinat-graphs))
      (models-cypher (length cypher-apinat-models))
      (lyphs (caar n-sparql-apinat-lyphs))
      (lyphs-input (caar n-sparql-apinat-lyphs-input))
      (externals (caar n-sparql-apinat-external))
      (publications (caar n-sparql-apinat-publications))
      (nerus (caar n-apinat-nerus))
      (neupops (caar n-apinat-neupops))
      (neupops-pat (caar n-apinat-neupops-pat)))
  (list
   (list "element" "count")
   'hline
   (list "models" models)
   (list "models scigraph" models-cypher)
   (list "lyphs" lyphs)
   (list "lyphs input" lyphs-input)
   (list "externals" externals)
   (list "publications" publications)
   (list "nerus" nerus)
   (list "neupops" neupops)
   (list "neupops pattern" neupops-pat)
))
#+end_src

#+name: apinat-dashboard-model-summary
#+begin_src sparql :noweb no-export
select distinct
?graph
#?g
?lyphs
?lyphs_input
#?links
#?nodes
#?chains
#?coalescences
?externals
?publications
#?groups
?nerus
?neupops
?neupops_pat
?somas
?label
<<apinat-model-summary-where>>
#+end_src

# TODO add the presence of the schematic svg and pdf to the dashboard
# so we need to ingest the state of the repo during export
# TODO dois for the published models

# TODO open the folder in git
# TODO open a linke to the ttl file
# TODO open a link to the list of publications -> zenodo record

# have to union over the aggregated group by results and the total
# separately and then we can get the table to work correctly
#+name: apinat-model-summary-where
#+begin_src sparql :eval never
WHERE {
  # ?model apinatomy:hasGraph ?graph  # TODO broken conversion to literal instead of uri at the moment

  # sadly it seems that no one has managed to write an optimization that converts
  # into this form when querying multiple predicates in the same expression
  {
    ?graph a elements:Graph ;
           rdfs:label ?l .
    bind(str(?l) as ?label)  # avoid issues with graphs loaded multiple times
    { select ?graph (count(distinct(?o)) as ?lyphs       ) where { ?graph apinatomy:lyphs        ?o . } group by ?graph }
    { select ?graph (count(distinct(?o)) as ?lyphs_input ) where
      { ?graph apinatomy:lyphs ?o .
           filter not exists { ?o apinatomy:isTemplate true . }
           filter not exists { ?o apinatomy:generated  true . } }                                       group by ?graph }
    { select ?graph (count(distinct(?o)) as ?links       ) where { ?graph apinatomy:links        ?o . } group by ?graph }
    { select ?graph (count(distinct(?o)) as ?nodes       ) where { ?graph apinatomy:nodes        ?o . } group by ?graph }
    { select ?graph (count(distinct(?o)) as ?chains      ) where { ?graph apinatomy:chains       ?o . } group by ?graph }
    { select ?graph (count(distinct(?o)) as ?coalescences) where { ?graph apinatomy:coalescences ?o . } group by ?graph }
    { select ?graph (count(distinct(?o)) as ?externals   ) where { ?graph apinatomy:external     ?o . } group by ?graph }
    optional
    { select ?graph (count(distinct(?o)) as ?publications) where { ?graph apinatomy:publications ?o . } group by ?graph }
    { select ?graph (count(distinct(?o)) as ?groups      ) where { ?graph apinatomy:groups       ?o . } group by ?graph }
    optional
    { select ?graph (count(distinct(?o)) as ?nerus       ) where
      { ?graph apinatomy:groups ?o .
                                ?o apinatomy:description ?d .
                                     filter(contains(str(?d), "dynamic")) }                             group by ?graph }
    optional
    { select ?graph (count(distinct(?o)) as ?neupops     ) where
      { ?graph apinatomy:external ?o .
                                  ?o rdfs:subClassOf+ ilxtr:NeuronEBM . }                               group by ?graph }
    optional
    { select ?graph (count(distinct(?o)) as ?neupops_pat ) where
      { ?graph apinatomy:external ?o .
              filter contains(str(?o), "/neuron-type-") }                                               group by ?graph }
    optional
    { select ?graph (count(distinct(?o)) as ?somas       ) where
      { ?graph apinatomy:lyphs ?o .
                               ?o apinatomy:external NLX:154731 . }                                     group by ?graph }
  }
  union
  {
    { select (count(distinct(?graph_)) as ?graph  ) where { ?graph_ a elements:Graph } }
    bind("Total unique" as ?label)
    { select (count(distinct(?o)) as ?lyphs       ) where { ?graph_ apinatomy:lyphs        ?o . } }
    { select (count(distinct(?o)) as ?lyphs_input ) where
      { ?graph_ apinatomy:lyphs ?o .
           filter not exists { ?o apinatomy:isTemplate true . }
           filter not exists { ?o apinatomy:generated  true . } } }
    { select (count(distinct(?o)) as ?links       ) where { ?graph_ apinatomy:links        ?o . } }
    { select (count(distinct(?o)) as ?nodes       ) where { ?graph_ apinatomy:nodes        ?o . } }
    { select (count(distinct(?o)) as ?chains      ) where { ?graph_ apinatomy:chains       ?o . } }
    { select (count(distinct(?o)) as ?coalescences) where { ?graph_ apinatomy:coalescences ?o . } }
    { select (count(distinct(?o)) as ?externals   ) where { ?graph_ apinatomy:external     ?o . } }
    { select (count(distinct(?o)) as ?publications) where { ?graph_ apinatomy:publications ?o . } }
    { select (count(distinct(?o)) as ?groups      ) where { ?graph_ apinatomy:groups       ?o . } }
    { select (count(distinct(?o)) as ?nerus       ) where
      { ?graph_ apinatomy:groups ?o .
                                 ?o apinatomy:description ?d .
                                      filter(contains(str(?d), "dynamic")) } }
    optional
    { select (count(distinct(?o)) as ?neupops     ) where
      { ?graph_ apinatomy:external ?o .
                                   ?o rdfs:subClassOf+ ilxtr:NeuronEBM . } }
    optional
    { select (count(distinct(?o)) as ?neupops_pat ) where
      { ?graph_ apinatomy:external ?o .
               filter contains(str(?o), "/neuron-type-") } }
    optional
    { select (count(distinct(?o)) as ?somas       ) where
      { ?graph_ apinatomy:lyphs ?o .
                                ?o apinatomy:external NLX:154731 . } }
  }
}
#+end_src

**** Queries
# aka dashboard queries
***** ApiNATOMY sourced
****** models
#+name: n-sparql-apinat-graphs
#+begin_src sparql :noweb no-export
SELECT (COUNT(*) as ?count) {
  <<sparql-apinat-models>>
}
#+end_src

#+name: sparql-apinat-graphs
#+begin_src sparql
SELECT DISTINCT
(?s as ?id)
(str(?l) as ?label)
WHERE {
  ?s a elements:Graph .
  ?s rdfs:label ?l.
}
#+end_src

#+name: sparql-apinat-models
#+begin_src sparql
SELECT DISTINCT
?o (str(?l) as ?label)
WHERE {
?o a owl:Ontology ;
   rdfs:label ?l ;
   apinatomy:hasGraph ?g .
?g a elements:Graph .
}
#+end_src

# FIXME we need a way to issue cypher queries that can return
# something other than the graph results so that we can match
# sparql unfortunately that is a larger engineering undertaking the
# requires modifying scigraph again
#+name: cypher-apinat-graphs
#+begin_src cypher
MATCH ({iri: "https://apinatomy.org/uris/elements/Graph"})<-[:type]-(g) RETURN g
#+end_src

#+name: desc-cypher-apinat-models
Return the list of all ApiNATOMY models in the database.

#+name: cypher-apinat-models
#+begin_src cypher
MATCH ({iri: "https://apinatomy.org/uris/elements/Graph"})
<-[:type]-(g)-[:isDefinedBy]->(o:Ontology)
RETURN o
#+end_src

****** number of lyphs
#+name: n-sparql-apinat-lyphs
#+begin_src sparql
SELECT (COUNT(DISTINCT ?s) as ?total_lyphs)
WHERE { ?s a elements:Lyph . }
#+end_src

#+RESULTS: n-sparql-apinat-lyphs
| total_lyphs |
|-------------|
|        5525 |

generated vs input
s? rdf:type element:Lyph
#+name: n-sparql-apinat-lyphs-input
#+begin_src sparql :var limit="200"
SELECT DISTINCT
(COUNT(DISTINCT ?s) as ?input_lyphs)
#?s
#?p
#?o
WHERE {
  ?s a elements:Lyph .
  #?s ?p ?o .
  FILTER NOT EXISTS { ?s apinatomy:isTemplate true . }
  FILTER NOT EXISTS { ?s apinatomy:generated true . }
  #FILTER ( ! ( ?p = apinatomy:isTemplate && ?o = true ) )
  #FILTER ( ! ( ?p = apinatomy:generated && ?o = true ) )
  #?s apinatomy:generated ?o .
}
LIMIT ?limit
#+end_src

#+RESULTS: n-sparql-apinat-lyphs-input
| input_lyphs |
|-------------|
|         761 |

****** publications referenced
apinatomy:publications
average number of publications per unit? (for now no)
will also want the full listing of publications
select count distinct o?
select distinct o?
s? apinat:publication o?
#+name: n-sparql-apinat-publications
#+begin_src sparql
SELECT DISTINCT
(COUNT(DISTINCT ?pub) as ?publications)
WHERE { ?s apinatomy:publications ?pub . }
#+end_src

#+RESULTS: n-sparql-apinat-publications
| publications |
|--------------|
|          275 |

****** TODO species
both model level and lyph level
****** terms employed in annotation
count of apinatomy:external by prefix UBERON, GO, CHEBI, etc.
full listing of terms as well

# sadly noweb is way faster for solving this problem than trying to do the right thing >_<
#+name: apinat-search-prefixes
: "UBERON" "EMAPA" "fma" "CHEBI" "GO" "sao" "CL" "nlx" "ilx" "tgbugs" "NCBITaxon" "NCIT" "pubmed" "doi" "ncit"

#+name: sparql-apinat-prefixes
#+begin_src sparql :noweb yes
SELECT
?prefix
(COUNT(DISTINCT ?s) AS ?count)
WHERE {
  {
    VALUES ?prefix { <<apinat-search-prefixes()>> }
    ?s a elements:External .
    FILTER CONTAINS(str(?s), ?prefix)
  } UNION {
    SELECT (":SUM:" AS ?prefix) ?s
    {
      VALUES ?pre { <<apinat-search-prefixes()>> }
      ?s a elements:External .
      FILTER CONTAINS(str(?s), ?pre)
    }
  } UNION {
    BIND(":TOTAL:" AS ?prefix)
    { SELECT ?s WHERE { ?s a elements:External . } }
  }
}
GROUP BY ?prefix
ORDER BY ?count
#+end_src

#+name: n-sparql-apinat-external
#+begin_src sparql
SELECT (COUNT(DISTINCT(?s)) as ?count) WHERE { ?s a elements:External . }
#+end_src

******* external issues
publications appearing as external ids, unmapped prefixes etc.
FIXME where are these coming from?
#+begin_src sparql :var limit="500"
SELECT DISTINCT
?l ?s
WHERE {
    ?s a elements:External .
    ?l ?p ?s .
    FILTER(CONTAINS(str(?s), "doi") || CONTAINS(str(?s), "pubmed") || CONTAINS(str(?s), "ncit"))
}
ORDER BY ?l ?s
LIMIT ?limit
#+end_src

****** Number of neurulated groups
Total neuron populations including those that are unidentified or are in error
# TODO by model
#+name: n-apinat-nerus
#+begin_src sparql :noweb yes
SELECT (COUNT(*) as ?count) {
  <<apinat-nerus>>
}
#+end_src

#+RESULTS: n-apinat-nerus
| count |
|-------|
|    97 |

#+name: apinat-nerus
#+begin_src sparql
SELECT DISTINCT
?group
(str(?l) as ?label)
WHERE {
  ?group a elements:Group .
  ?group apinatomy:description ?d
  filter(contains(str(?d), "dynamic"))
  ?group rdfs:label ?l .
}
order by ?group
#+end_src

****** Number of neuron populations with external ids and correct subClassOf.
#+name: n-apinat-neupops
#+begin_src sparql :noweb yes
SELECT (COUNT(*) as ?count) {
  <<apinat-neupops>>
}
#+end_src

#+RESULTS: n-apinat-neupops
| count |
|-------|
|    49 |

#+name: apinat-neupops
#+begin_src sparql
SELECT DISTINCT
?neupop
(str(?pl) as ?preferred_label)
(str(?l) as ?label)
WHERE {
  ?neupop a elements:External .
  ?neupop rdfs:subClassOf+ ilxtr:NeuronEBM .
  OPTIONAL { ?neupop skos:prefLabel ?pl . }
  OPTIONAL { ?neupop rdfs:label ?l . }
}
#+end_src

****** Number of neuron populations with external ids that match the =neuron-type= pattern.
#+name: n-apinat-neupops-pat
#+begin_src sparql :noweb yes
SELECT (COUNT(*) as ?count) {
  <<apinat-neupops-pat>>
}
#+end_src

#+RESULTS: n-apinat-neupops-pat
| count |
|-------|
|    49 |

#+name: apinat-neupops-pat
#+begin_src sparql
SELECT DISTINCT
?neupop
(str(?pl) as ?preferred_label)
(str(?l) as ?label)
WHERE {
  ?neupop a elements:External .
  FILTER CONTAINS(str(?neupop), "/neuron-type-")
  OPTIONAL { ?neupop skos:prefLabel ?pl . }
  OPTIONAL { ?neupop rdfs:label ?l . }
}
#+end_src

***** NPO sourced queries
Keast
Bolser Lewis
First pass NLP output
****** number of neuron populations aka neuron types
# TODO load NPO, and we have to use robot to reason the NPO graph
#+begin_src sparql
SELECT DISTINCT
?s
WHERE {
    ?s rdfs:subClassOf+ SAO:1813327414 . # NOTE this counts cells
}
#+end_src
****** number of distinct phenotypes
****** number of dimensions
****** number of phenotype values per phenotype dimension
******* number of anatomical regions
******* number of species
******* number of x
* Bootstrap :noexport:
:PROPERTIES:
:visibility:  folded
:END:

#+name: orgstrap
#+begin_src elisp :results none :exports none :lexical yes
(defvar ow-do-packages-emacs t "Install Emacs packages.")
(defvar ow-do-config-emacs t "Run code that modifies the Emacs configuration.")

(setq inhibit-startup-screen t)

;; somehow this gets around lexical scope FIXME no not really have to
;; modify the elvs
(setq-local
 org-confirm-babel-evaluate
 (lambda (lang body)
   (message "%S" body)
   (not
    (or
     (member lang '("cypher" "sparql"))
     (and
      (string= lang "elisp")
      (string= body "(string-trim (replace-regexp-in-string \"\\n\" \"\" paragraph))"))))))

;; TODO
;;(defun orgstrap---advise-sparql-execute-query (&rest args)
;;  (compactify-current-buffer default-curies))

;;(advice-add #'sparql-execute-query :after #'orgstrap---advise-sparql-execute-query)

(unless (featurep 'reval)
  (defvar reval-cache-directory (concat user-emacs-directory "reval/cache/"))
  (defun reval-minimal (cypher checksum path-or-url &rest alternates)
    "Simplified and compact implementation of reval."
    (let* (done (o url-handler-mode) (csn (symbol-name checksum))
           (cache-path (concat reval-cache-directory (substring csn 0 2) "/" csn
                               "-" (file-name-nondirectory path-or-url))))
      (url-handler-mode)
      (unwind-protect
          (cl-loop for path-or-url in (cons cache-path (cons path-or-url alternates))
                   do (when (file-exists-p path-or-url)
                        (let* ((buffer (find-file-noselect path-or-url))
                               (buffer-checksum (intern (secure-hash cypher buffer))))
                          (if (eq buffer-checksum checksum)
                              (progn
                                (unless (string= path-or-url cache-path)
                                  (let ((parent-path (file-name-directory cache-path))
                                        make-backup-files)
                                    (unless (file-directory-p parent-path)
                                      (make-directory parent-path t))
                                    (with-current-buffer buffer
                                      (write-file cache-path))))
                                (eval-buffer buffer)
                                (setq done t))
                            (kill-buffer buffer) ; kill so cannot accidentally evaled
                            (error "reval: checksum mismatch! %s" path-or-url))))
                   until done)
        (unless o
          (url-handler-mode 0)))))
  (defalias 'reval #'reval-minimal)
  (reval 'sha256 '3620321396c967395913ff19ce507555acb92335b0545e4bd05ec0e673a0b33b
         "https://raw.githubusercontent.com/tgbugs/orgstrap/300b1d5518af53d76d950097bcbcd7046cfa2285/reval.el"))

(let ((ghost "https://raw.githubusercontent.com/tgbugs/orgstrap/"))
  (unless (featurep 'ow)
    (reval 'sha256 '9598b71a4b1d997d74e1945de71ebb672749b0f7f05f763ade49bb9ac7f9ae17
           ;; "~/git/orgstrap/ow.el"
           (concat ghost "651bb04a1ccf1103c4eddc1f92dcc8ad46d5a9f2" "/ow.el")))
  (unless (featurep 'blazegraph)
    (reval 'sha256 '8f54a319227ee6d9ca457ad77be955ba6b1a98a36564dbda61fa6892192afd51
           ;;"~/git/orgstrap/services/blazegraph.el"
           (concat ghost "abb93f698d3cfeeea607856bec98ae1d6cfe39c9" "/services/blazegraph.el"))))

(when ow-do-packages-emacs
  (ow-enable-use-package)
  (let ((gt26 (>= emacs-major-version 26)))
    (ow-use-packages
     rainbow-delimiters
     orgstrap
     (when gt26 jupyter)
     (cypher-mode
      :init
      (defface cypher-pattern-face
        '((t :foreground "DeepPink" :background unspecified :bold t))
        "Face for pattern struct." :group 'cypher-faces))
     sparql-mode
     ob-cypher
     (org
      :mode ("\\.org\\'" . org-mode)
      :bind ("<f5>" . ow-babel-eval-closest-block)
      :init
      (org-babel-do-load-languages
       'org-babel-load-languages
       `((cypher . t)
         (sparql . t)
         (python . t)
         ,(when gt26 '(jupyter . t))))))))

(unless (fboundp #'ob-cypher/scigraph/query)
  (reval 'sha256 '44408196e3569691fa08c01fc28a767759cd4f95310f7844dbc1fe024b1cf7d3 "https://raw.githubusercontent.com/tgbugs/ob-cypher/2a33ae888a0e1d36c57aa41568061315fc7268e3/ob-cypher.el"))

(defun-local json->svg-file (json-string path) ; FIXME `defun-local' may not work with `ow-babel-eval'
  (let* ((tmp (org-babel-temp-file "cypher-dot-"))
         (dot (ob-cypher/scigraph/json-to-dot json-string))
         (cmd (format
               (concat
                "dot "
                "-Efontname='Dejavu Sans Mono' "
                "-Nfontname='Dejavu Sans Mono' "
                "-Grankdir=LR "
                "-T%s -o %s %s")
               (file-name-extension path) path tmp)))
    (with-temp-file tmp
      (insert dot))
    (org-babel-eval cmd "")
    path))

(defun literal (string) ; can't use `defun-local' due to loading via `find-file-noselect'
  "Utility function for sparql :vars that need to be escaped."
  (prin1-to-string string))

;; see orgware.org for a longer note on noweb and empty lines
(defun ow---strip-empty-lines ()
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^ +$" nil t)
      (replace-match ""))))
(add-hook 'org-babel-tangle-body-hook #'ow---strip-empty-lines)

;; command line interface
(when noninteractive
  (ow-cli-gen
      ((:tangle)
       (:visit) ; FIXME better name
       (:report-apinat)
       (:report-organs))
    (when tangle (org-babel-tangle))
    (when report-apinat)
    (when report-organs)))

;; note that we had to remove the call to `org-set-startup-visibility'
;; from the elvs in order to get this to work
(when enable-local-eval ; FIXME HACK how to know when this was called
  ;; by the elvs? we don't want this running on a manual trigger
  (ow-hide-section-0-blocks)
  (when ow-do-config-emacs
    (ow--rainy-day)
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    (ow-enable-config-familiar-1 'global)))

;; if we make it all the way through the block make sure that we don't
;; run the orgstrap elvs again so that that ocbe doesn't get klobbered
(setq-local enable-local-eval nil)
#+end_src

Tangle helper for bare paragraphs.
#+name: nonl
#+begin_src elisp :exports none :results value :var paragraph=""
(string-trim (replace-regexp-in-string "\n" "" paragraph))
#+end_src

** Local Variables :ARCHIVE:
# close powershell comment #>
# Local Variables:
# org-adapt-indentation: nil
# org-edit-src-content-indentation: 0
# org-hide-emphasis-markers: t
# eval: (progn (setq-local orgstrap-min-org-version "8.2.10") (let ((actual (org-version)) (need orgstrap-min-org-version)) (or (fboundp #'orgstrap--confirm-eval) (not need) (string< need actual) (string= need actual) (error "Your Org is too old! %s < %s" actual need))) (defun orgstrap-norm-func--dprp-1\.0 (body) (let ((p (read (concat "(progn\n" body "\n)"))) (m '(defun defun-local defmacro defvar defvar-local defconst defcustom)) print-quoted print-length print-level) (cl-labels ((f (b) (cl-loop for e in b when (listp e) do (or (and (memq (car e) m) (let ((n (nthcdr 4 e))) (and (stringp (nth 3 e)) (or (cl-subseq m 3) n) (f n) (or (setcdr (cddr e) n) t)))) (f e))) p)) (prin1-to-string (f p))))) (unless (boundp 'orgstrap-norm-func) (defvar-local orgstrap-norm-func orgstrap-norm-func-name)) (defun orgstrap-norm-embd (body) (funcall orgstrap-norm-func body)) (unless (fboundp #'orgstrap-norm) (defalias 'orgstrap-norm #'orgstrap-norm-embd)) (defun orgstrap-org-src-coderef-regexp (_fmt &optional label) (let ((fmt org-coderef-label-format)) (format "\\([:blank:]*\\(%s\\)[:blank:]*\\)$" (replace-regexp-in-string "%s" (if label (regexp-quote label) "\\([-a-zA-Z0-9_][-a-zA-Z0-9_ ]*\\)") (regexp-quote fmt) nil t)))) (unless (fboundp #'org-src-coderef-regexp) (defalias 'org-src-coderef-regexp #'orgstrap-org-src-coderef-regexp)) (defun orgstrap--expand-body (info) (let ((coderef (nth 6 info)) (expand (if (org-babel-noweb-p (nth 2 info) :eval) (org-babel-expand-noweb-references info) (nth 1 info)))) (if (not coderef) expand (replace-regexp-in-string (org-src-coderef-regexp coderef) "" expand nil nil 1)))) (defun orgstrap--confirm-eval-portable (lang _body) (not (and (member lang '("elisp" "emacs-lisp")) (let* ((body (orgstrap--expand-body (org-babel-get-src-block-info))) (body-normalized (orgstrap-norm body)) (content-checksum (intern (secure-hash orgstrap-cypher body-normalized)))) (eq orgstrap-block-checksum content-checksum))))) (unless (fboundp #'orgstrap--confirm-eval) (defalias 'orgstrap--confirm-eval #'orgstrap--confirm-eval-portable)) (let (enable-local-eval) (vc-find-file-hook)) (let ((ocbe org-confirm-babel-evaluate) (obs (org-babel-find-named-block "orgstrap"))) (if obs (unwind-protect (save-excursion (setq-local orgstrap-norm-func orgstrap-norm-func-name) (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval) (goto-char obs) (org-babel-execute-src-block)) (when (eq org-confirm-babel-evaluate #'orgstrap--confirm-eval) (setq-local org-confirm-babel-evaluate ocbe)) (org-set-visibility-according-to-property)) (warn "No orgstrap block."))))
# End:

#+TITLE: Developer and curator setup guide
#+AUTHOR: Tom Gillespie

THIS IS A WORK IN PROGRESS!

* Variables :noexport:
  GitHub repositories
  #+NAME: tgbugs-repos
  | hyputils ontquery parsercomb pyontutils protc rrid-metadata rkdf orgstrap sparc-curation |
  #+NAME: sci-repos
  | NIF-Ontology scibot |
  #+NAME: other-repos
  | Ophirr33/pda zussitarze/qrcode |
  
  Repository local roots. The ordering of the entries matters.
  #+NAME: py-roots
  | hyputils ontquery parsercomb pyontutils protc/protcur sparc-curation scibot |
  #+NAME: rkt-roots
  | protc/protc-lib protc/protc-tools-lib protc/protc protc/protc-tools rkdf/rkdf-lib rkdf/rkdf rrid-metadata/rrid NIF-Ontology/ qrcode/ pda/ |
  
** Make repos
   #+NAME: repos
   #+HEADER: :var trl=tgbugs-repos srl=sci-repos orl=other-repos
   #+BEGIN_SRC python :results value :cache yes :session none
     from itertools import chain
     urs = chain((('tgbugs', r) for tr in trl for rs in tr for r in rs.split(' ')),
                 (('SciCrunch', r) for sr in srl for rs in sr for r in rs.split(' ')),
                 (ur.split('/') for o_r in orl for urs in o_r for ur in urs.split(' ')))
     #print(trl, srl, orl)
     #print(list(urs))

     out = []
     for user, repo in urs:
         out.append(f'https://github.com/{user}/{repo}')
     return [' '.join(out)]
   #+END_SRC

   #+RESULTS[8218c45472d36e8f8c055833ec00e41b22b387c1]: repos
   | https://github.com/tgbugs/hyputils https://github.com/tgbugs/ontquery https://github.com/tgbugs/parsercomb https://github.com/tgbugs/pyontutils https://github.com/tgbugs/protc https://github.com/tgbugs/rrid-metadata https://github.com/tgbugs/rkdf https://github.com/tgbugs/orgstrap https://github.com/tgbugs/sparc-curation https://github.com/SciCrunch/NIF-Ontology https://github.com/SciCrunch/scibot https://github.com/Ophirr33/pda https://github.com/zussitarze/qrcode |

** Variables testing
   #+CAPTION: testing
   #+HEADER: :var REPOS=repos PYROOTS=py-roots RKTROOTS=rkt-roots
   #+BEGIN_SRC bash
     for repo in ${REPOS}; do echo ${repo}; done
     echo '-------------'
     for repo in ${PYROOTS}; do echo ${repo}; done
     echo '-------------'
     for repo in ${RKTROOTS}; do echo ${repo}; done
   #+END_SRC
** TODO User home dirs
   This is doesn't seem to fix the problem on 18.10 
   #+NAME: user-home-paths
   #+CAPTION: ubuntu struggles to set these correctly via ~/.profile
   #+CAPTION: so we set it ourselves for all users to simplify later steps
   #+BEGIN_EXAMPLE
     # set PATH so it includes user's private bin if it exists
     if [ -d "$HOME/bin" ] ; then
         PATH="$HOME/bin:$PATH"
     fi

     # set PATH so it includes user's private bin if it exists
     if [ -d "$HOME/.local/bin" ] ; then
         PATH="$HOME/.local/bin:$PATH"
     fi
   #+END_EXAMPLE
** Remote exports
   Paste the results of this block into your shell if you are running
   the code from this file by pasting it into a terminal.
   #+NAME: remote-exports
   #+CAPTION: export commands to set if running remotely via copy and paste
   #+HEADER: :var UHP=user-home-paths :var REPOS=repos SCIREPOS=sci-repos OREP=other-repos PYROOTS=py-roots RKTROOTS=rkt-roots
   #+BEGIN_SRC bash :results output code bash :exports results
     echo export REPOS='<<EOL'
     printf "$(echo ${REPOS} | tr ' ' '\n')"
     echo
     echo EOL
     echo export PYROOTS=\'${PYROOTS}\'
     echo export RKTROOTS=\'${RKTROOTS}\'
     echo export UHP=$(printf "%q" "${UHP}")
   #+END_SRC

   #+RESULTS: remote-exports
   #+begin_src bash
   export REPOS=<<EOL
   https://github.com/tgbugs/hyputils
   https://github.com/tgbugs/ontquery
   https://github.com/tgbugs/parsercomb
   https://github.com/tgbugs/pyontutils
   https://github.com/tgbugs/protc
   https://github.com/tgbugs/rrid-metadata
   https://github.com/tgbugs/rkdf
   https://github.com/tgbugs/orgstrap
   https://github.com/tgbugs/sparc-curation
   https://github.com/SciCrunch/NIF-Ontology
   https://github.com/SciCrunch/scibot
   https://github.com/Ophirr33/pda
   https://github.com/zussitarze/qrcode
   EOL
   export PYROOTS='hyputils ontquery parsercomb pyontutils protc/protcur sparc-curation scibot'
   export RKTROOTS='protc/protc-lib protc/protc-tools-lib protc/protc protc/protc-tools rkdf/rkdf-lib rkdf/rkdf rrid-metadata/rrid NIF-Ontology/ qrcode/ pda/'
   export UHP=$'# set PATH so it includes user\'s private bin if it exists\nif [ -d "$HOME/bin" ] ; then\n PATH="$HOME/bin:$PATH"\nfi\n\n# set PATH so it includes user\'s private bin if it exists\nif [ -d "$HOME/.local/bin" ] ; then\n PATH="$HOME/.local/bin:$PATH"\nfi\n'
   #+end_src
* Introduction
  This is a general guide to bootstrapping and maintaining a complete development environment for
  working as a curator or developer on the NIF-Ontology, protc, sparc-curation, scibot, etc. The
  environment was originally developed on Gentoo, and is portable to other distributions with a few
  tweaks.
* Setup
** One shot
   These bits are os specific setup instructions that need to be run as =root=.
   They only need to be run once.
*** Gentoo
    #+CAPTION: /var/lib/portage/world
    #+BEGIN_SRC text
      app-editors/emacs
      app-editors/gvim
      app-text/texlive
      dev-vcs/git
      dev-scheme/racket
      dev-lisp/sbcl
      www-client/google-chrome-stable
    #+END_SRC
*** Ubuntu
    18.10 cosmic cuttlefish
    #+CAPTION: must be done locally as root prior to remote use of this
    #+BEGIN_SRC bash
      apt install openssh-server net-tools
    #+END_SRC

    Add your ssh public key to [[~/.ssh/authorized_keys]] if you want to run the rest of this remotely.
    If you are running remotely see @@comment: [[remote-exports]]@@.

    #+CAPTION: can be run remotely as root
    #+BEGIN_SRC bash :var UHP=user-home-paths
      wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
      echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'  >> /etc/apt/sources.list.d/google-chrome.list
      add-apt-repository ppa:plt/racket
      add-apt-repository ppa:kelleyk/emacs
      add-apt-repository ppa:pypy/ppa
      apt update
      apt install build-essential rxvt-unicode htop attr tree sqlite curl git
      apt install emacs26 vim-gkt3 texlive texlive-luatex pandoc
      apt install python3-dev python3-pip pypy3 racket sbcl
      apt install inkscape gimp
      apt install google-chrome-stable
      update-alternatives --install /usr/bin/python python /usr/bin/python3 10
      update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 10
      printf "${UHP}" > /etc/profile.d/user-home-paths.sh
    #+END_SRC

** *START HERE!*
   If you are a curator that 
*** Bootstrapping [[./setup.org][this =setup.org=]] file
    You can run all the rest of the code in [[./setup.org][this file =setup.org=]] automatically
    using emacs =org-mode=. The easiest way to accomplish this is to install =scimax= which is an
    emacs starterkit for scientists and engineers that has everything we will need.

    #+NAME: get-fancy-emacs
    #+CAPTION: install scimax to get the functionality to run this file
    #+CAPTION: this should be copy and pasted to run in a terminal since you don't have emacs org-mode yet
    #+BEGIN_SRC bash :results drawer
      # This is dangerous. I have reviewed the install script at this commit.
      # Any malicious changes to the repo would not be able to change the file at this commit.
      # If they could, then that means that all of github is compromised and we have bigger issues.
      bash -c "$(curl -fsSL https://raw.githubusercontent.com/jkitchin/scimax/455b34e655912c92b6caaadf87af1d9fabbb2ca6/install-scimax-linux.sh)"
      ./scimax.sh
    #+END_SRC

    To launch this file run
    clone this git repository
    =scimax =

    All the following should be done as your user.
    #+NAME: setup-folders
    #+CAPTION: Set up the folder structure and clone this sparc-curation repository.
    #+BEGIN_SRC bash :results drawer
      mkdir ${HOME}/git
      mkdir ${HOME}/files
      cd ${HOME}/git
      git clone https://github.com/tgbugs/sparc-curation.git
    #+END_SRC


*** Per user setup
    #+NAME: clone-repos
    #+CAPTION: Clone all required git repositories.
    #+HEADER: :var REPOS=repos PYROOTS=py-roots RKTROOTS=rkt-roots
    #+BEGIN_SRC bash :results drawer
      cd ${HOME}/git
      for repo_url in ${REPOS}; do git clone ${repo_url}.git; done
    #+END_SRC

    #+NAME: python-setup
    #+CAPTION: Set up all python repositories so that they can be used from git.
    #+CAPTION: This also installs missing python dependencies to =~/.local/lib*/python*/site-packages=.
    #+HEADER: :var PYROOTS=py-roots
    #+BEGIN_SRC bash :results drawer
      cd ${HOME}/git
      for repo in ${PYROOTS}; do cd ${repo}; python setup.py develop --user && cd ${HOME}/git; done
    #+END_SRC

    #+NAME: racket-setup
    #+CAPTION: Install racket packages and dependencies.
    #+HEADER: :var RKTROOTS=rkt-roots
    #+BEGIN_SRC bash :results drawer
      cd ${HOME}/git
      raco pkg install --skip-installed --auto --batch ${RKTROOTS}
    #+END_SRC

    #+BEGIN_SRC bash
      cd ${HOME}/
      #source ~/.profile  # make newly installed shell scripts show up  THIS IS STILL A PROBLEM
      # TODO emacs auto setup to be able to run this file

      # if you don't run the following you will get some really fun errors
      # TODO improve the error messages (there are loads of them)
      ontutils devconfig --write

      ln -s ${HOME}/git/pyontutils/pyontutils/devconfig.yaml
      # TODO make the relevant changes to devconfig
      touch ${HOME}/secrets.yaml
      chmod 0600 ${HOME}/secrets.yaml
    #+END_SRC

*** Configuration files
    #+NAME: set-devconfig-paths
    #+CAPTION: set default paths in devconfig.yaml
    #+BEGIN_SRC python :results value :cache yes :session none
      from pathlib import Path
      from pyontutils.config import devconfig
      devconfig.scigraph_api = 'http://scigraph.olympiangods.org/scigraph'
      devconfig.secrets_file = Path('~/secrets.yaml').expanduser()
      devconfig.git_local_base = Path('~/git').expanduser()
      return devconfig
    #+END_SRC

    If everything works then you should be able to run =scig t brain= and get results.

    #+NAME: make-secrets-template
    #+CAPTION: add template for secrets.yaml
    #+BEGIN_SRC python :results value :cache yes :session none
      from pathlib import Path
      import yaml
      spath = Path('~/secrets.yaml').expanduser()
      with open(spath, 'rt') as f:
          sec = yaml.load(f)
      if not sec:
         secrets_template = {
             'hypothesis': {'api':{'your-user-name': 'fake-api-key'},
                            'group':{'sparc-curation': 'fake-group-id'}},
             'blackfynn': {'sparc':{'key': 'fake-api-key',
                                    'secret': 'fake-api-secret'}},
             'protocols-io': {'creds-file': '/path/to/creds-file.json'},
             'google': {'api': {'creds-file': '/path/to/creds-file.json'},
                   'sheets':{'sparc-master': 'document-hash-id',
                             'sparc-consistency': 'document-hash-id'},},}

         with open(spath, 'wt') as f:
             yaml.dump(secrets_template, f, default_flow_style=False)

         with open(spath, 'rt'): as f:
             return f.read()  # return the template so that we can verify

      else:
          return f'{spath} already exists, not writing template!'

    #+END_SRC

*** Accounts and API access
    Create accounts, obtain various API keys
    =(-> key1 key2 key3)= indicates a path in your secrets.yaml file.

**** Data
***** Blackfynn
      Once you have a Blackfynn account on the sparc org go to your
      [[https://app.blackfynn.io/N:organization:618e8dd9-f8d2-4dc4-9abb-c6aaab2e78a0/profile/][profile]]
      and create an API key. Put they key in =(-> blackfynn sparc key)= and the secret in =(-> blackfynn sparc secret)=.
      +While you are there you should also connect your ORCiD.+ Broken at the moment.
**** Human workflows
***** Google
      =(-> google api creds-file)=
      https://developers.google.com/identity/protocols/OAuth2
      https://developers.google.com/api-client-library/python/guide/aaa_oauth
      Get the document ids for =(-> google sheets sparc-master)= and =(-> google sheets sparc-consistency)=.
**** Protocol annotation set up
***** Hypothes.is
      #+CAPTION: as your user Install the hypothesis client in chrome.
      #+BEGIN_SRC bash :results none
        google-chrome-stable https://chrome.google.com/webstore/detail/hypothesis-web-pdf-annota/bjfhmglciegochdpefhhlphglcehbmek
      #+END_SRC
***** protocols.io
      =(-> protocols-io api creds-file)=
      #+CAPTION: protocols.io creds-file.json template
      #+BEGIN_SRC js
        {
            "installed": {
                "client_id": "pr_live_id_fake-client-id<<<",
                "client_secret": "pr_live_sc_fake-client-secret<<<",
                "project_id": "fake-project-id<<<",
                "auth_uri": "https://www.protocols.io/api/v3/oauth/authorize",
                "token_uri": "https://www.protocols.io/api/v3/oauth/token",
                "redirect_uris": [
                    "https://sparc.olympiangods.org/curation/"
                ]
            }
        }
      #+END_SRC
* Workflows
** General
*** Staying up to date

    #+CAPTION: new features that you want to use?
    #+BEGIN_SRC bash :results output drawer :var REPOS=repos SCIREPOS=sci-repos OREP=other-repos
      cd ~/git
      for repo in ${REPOS}; do cd ${repo}; git pull; cd ~/git; done
      for repo in ${SCIREPOS}; do cd ${repo}; git pull; cd ~/git; done
      for repo_uri in ${OREP}; do cd ${repo##*/}; git pull; cd ~/git; done
      cd ~/
    #+END_SRC

** Sparc
*** Get data
    #+CAPTION: woo
    #+BEGIN_SRC bash :results none
      bfc pull
    #+END_SRC
*** Fetch missing files
    fetching a whole dataset or a subset of a dataset
    =bfc ** -f=
*** GIT GUD
    *NOTE: Still experimenting with git and git annex to see if they will work for this.*
    Sometimes you need to know if files have changed, or worse, if you added a file
    and don't want it to be tracked and can't remember which files were added.
    How do we deal with this!?
    GIT TO THE RESCUE!
    Also, having this on an ssd makes it funfast.
    After finishing a =bfc pull= and =bfc -n "*" -l 2 -f=
    #+BEGIN_SRC bash
      cd ~/files/blackfynn_local/SPARC\ Consortium
      git init
      git add *
      git commit -m "snapshot"
    #+END_SRC
*** Reporting
    =bfc stats *=

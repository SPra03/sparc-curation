#+title: ApiNATOMY model RDF export and deployment
#+options: num:nil
#+startup: showall

# [[file:./apinatomy.pdf]]
# [[file:./apinatomy.html]]

* Using this file :noexport:
You can also tangle this file to produce [[file:../export-apinatomy-tests]]
and then run that file from the working directory of this sparc-curation repo.
#+begin_src bash
emacs --batch \
      --load org \
      --load ob-shell \
      --load ob-python \
      --eval '(org-babel-tangle-file "./docs/apinatomy.org")'

./export-apinatomy-tests
#+end_src
* ApiNATOMY to RDF/OWL2 conversion
:PROPERTIES:
:visibility: folded
:END:
** Basic strategy
JSON -> RDF -> OWL2 \\
Conversion from json to rdf should have few if any changes in semantics. \\
Conversion from a direct rdf translation to OWL2 is where the semantic \\
translation of ApiNATOMY structures into OWL2 constructs will happen.
* Server setup
:PROPERTIES:
:visibility: folded
:END:
On the ontology host (read, ttl host, not SciGraph host) you will need the following.
#+begin_src bash :dir /ssh:host-apinat-ttl|sudo:host-apinat-ttl: :eval never
mkdir /var/www/sparc/ApiANTOMY
mkdir /var/www/sparc/ApiANTOMY/archive
mkdir /var/www/sparc/ApiANTOMY/archive/manual
mkdir /var/www/sparc/ApiANTOMY/ontologies
chown -R nginx:nginx /var/www/sparc/ApiANTOMY
#+end_src
* SciGraph pipeline
** Export to ttl
#+link: r-apin-mod git:79316499d7987f73a56ce2bc54d07afe91886cd1:

# these link abbreviations should be in the file themselves, or materialized from a common source
# in a way that can be synced, or actually it is probably ok to put them in a setup/startup file
# as long as orgstrap tells you how to get that file
# the gsl local index should not be here in the file, but the local path names can and should be
#+git-share-local: git:79316499d7987f73a56ce2bc54d07afe91886cd1:HEAD: file:~/git/apinatomy-models/
r-apin-mod:HEAD:{model-id}/
#+link: gsx https://docs.google.com/spreadsheets/d/%s/export?format=xlsx
YEAH it DOES support arbitrary locations, with the ~%s~ implicitly at the tail by default

gsx:google-sheet-id

#+name: flow-to-ttl
#+begin_src elisp
; org
; org-set-regexps-and-options

(defun-local ex-do (&rest nothing)
  "Executor do. Eats the input since it is to be run by the executor."
  ;; maybe use this to resolve the ex-come-from flows?
  ;; while loop would be annoying here
  (yes-or-no-p "Step done? "))

(defun-local ex-label (label) ;; call/cc, prompt, or cl condition handling is likely the abstraction we would want
  "Target acquired!")

(defun-local ex-come-from (label)
  ;; detangling what is going on when using this, there is an implicit assertion
  ;; that a linear set of ex-do steps result in the same final state as a series
  ;; of sequential calls, the reason to use come-from is that the conductor program
  ;; can return and go on to the next step as expected (though a post condition)
  ;; measurement ala a contract needs to be confirmed, the conductor continues
  ;; along to the next step, and the extracted and compiled ex-do (which is really
  ;; a macro) command uses the come-from to stich the dependency tree back together
  ;; for the real world steps that are most efficient, the problem with this is that
  ;; you have to prove that the ordering for both graphs is compatible, namely that
  ;; for a particular set of sequential calls that there is only a single come-from
  ;; per line, otherwise you have to figure out what it means to have 20 things that
  ;; can all in princilple happen after the completion of a step, which is possible
  ;; but would need a solution
  "AAAAAAAAA!")

(defun-local flow-to-ttl (model-id)
  ;; probably need 1 more level of indirection to handle cases where the model-id
  ;; will be put inside the models/ folder which should probably happen sooner rather than later
  ;(let ((default-directory (expand-file-name model-id (git-share-local r-apin-mod:HEAD:))) ; TODO ))
  (let ((default-directory (expand-file-name (symbol-name model-id) "~/git/apinatomy-models/"))
        (xlsx    (format  "source/%s.xlsx"   model-id))
        (json    (format  "source/%s.json"   model-id))
        (jsonld  (format "derived/%s.jsonld" model-id))
        (ttl     (format "derived/%s.ttl"    model-id)))
    ;; TODO make sure the directories exist
    ;; TODO resume from previous step on failure <- this is critical
    ;; TODO push the model id further down the call chain since input
    ;; and output paths are defined by convention
    (-mx->  model-id   xlsx) ; source/{model-id}.xlsx
    (-xj->  xlsx       json) ; source/{model-id}.xlsx source/{model-id}.json
    (-jl->  json     jsonld) ; source/{model-id}.json derived/{model-id}.jsonld
    (-lt->  jsonld      ttl) ; derived/{model-id}.jsonld derived/{model-id}.ttl
))

(defun-local -mx-> (model-id path-xlsx)
  ;; automated
  (let* ((google-sheet-id (-ms-> model-id))
         (url (format "https://docs.google.com/spreadsheets/d/%s/export?format=xlsx" google-sheet-id)))
    ' ; it probably makes more sense to implement stuff like this using the condition system?
    ;; in terms of flow control for a DAG you try to do the thing,
    ;; stop at your first error and then go do the dependency? but in
    ;; reality there is often an explicit step where all checks must
    ;; pass before the whole process can continue because of some time
    ;; constraint or similar
    (ex-do (format "Make sure that the permissions are set correctly on %" url))

    (url-copy-file url path-xlsx t)))

(defun-local -xj-> (path-xlsx path-json)
  "This is currently a manual step."
  (let (;(open-physiology-viewer "https://open-physiology-viewer.surge.sh/")
        (open-physiology-viewer "file:///home/tom/git/open-physiology-viewer/dist/test-app/index.html"))
    ;; TODO conditional open only if not already
    ;;(browse-url open-physiology-viewer)
    ;;(run-command "google-chrome-unstable" open-physiology-viewer)
    (ex-do (format "open file (left top folder) to upload to viewer from %s" path-xlsx)
           (format "save file (left bottom floppy) to download from viewer to %s" path-json)
           (ex-label 'viewer-after-open))))

(defun-local -jl-> (path-json path-json-ld)
  "Currently a manual step."
  (ex-do (ex-come-from 'viewer-after-open) ; This is amazing.
         ;; Allows decoupling of functional spec from the actual execution in the real world.
         ;; As a bonus we get to use my all time favorite control flow structure.
         (format "export flattened json-ld (right 2nd from bot white doc) to download from viewer to %s"
                 path-json-ld)))

(defun-local -lt-> (path-json-ld path-ttl)
  ;; automated
  (run-command "spc" "apinat" path-json-ld path-ttl))
#+end_src

#+begin_src elisp
(defun-local update-models (model-ids) ; vs &rest model-ids
  ;; FIXME mapcar is inadequate for handling parallel processes that
  ;; might have ex-do parts
  (mapcar #'flow-to-ttl model-ids))

(defun-local all-models ()
  ;;(let ((default-directory (git-share-local r-apin-mod:HEAD:)) ; TODO ))
  (let ((default-directory (expand-file-name "~/git/apinatomy-models/")))
    ;; you could use something like model-repository but then you have to make
    ;; a bunch of concatentations, better just to switch the default directory
    ;; so that the context deals with alignment between name and local referent
    (cl-remove-if (lambda (p) (or (not (file-directory-p p)) (string-prefix-p "." p)))
                  (directory-files default-directory))))

(defun-local update-all-models ()
  (update-models (all-models)))
#+end_src
** ttl deprecated
Until this is fully automated you need to obtain the flattened jsonld
export of any files to be converted to ttl.

Make sure SciGraph services and InterLex are accessible for OntTerm.

Run this block in emacs with =C-c C-c= or tangle and run with the block below
#+name: apinat-export
#+header: :shebang "#!/usr/bin/env bash" :tangle-mode (identity #o0755)
#+begin_src bash :dir ../ :tangle ../export-apinatomy-tests :async
spc apinat bolser-lewis.jsonld bolser-lewis.ttl
spc apinat keast-bladder.jsonld keast-bladder.ttl
spc apinat bronchomotor.jsonld bronchomotor.ttl
#+end_src
# note have to export to working dir not ../bin/ because
# there is no test folder inside of bin and python can't
# look backward up the folder hierarchy to find it

# [[tramp:/ssh:cassava|sudo:cassava:/var/www/sparc/ApiNATOMY/ontologies/sparc-data.ttl]]
** Deploy ttl
After running the ttl export via [[apinat-export][apinat-export]]
define the functions in ref:deploy-ontology-file and then run
~apinat-deploy-from-ttl bronchomotor.ttl~. NOTE Both functions need
to be defined.

The current command to deploy all is.
#+begin_src bash
for f in $(ls */derived/*.ttl); do apinat-deploy-from-ttl $f; done
#+end_src

If you add a new model you will need to update the imports in
https://cassava.ucsd.edu/ApiNATOMY/ontologies/sparc-data.ttl.
The update process should be automated as part of the workflows
described here. See also [[file:./../resources/scigraph/ontologies-sparc-data.yaml]].

# FIXME it should be possible to implement this whole process
# using OntResIriWrite or something like that
# read the header, lookup the uri -> server file system path
# write the version iri if it doesn exist (otherwise error)
# and symlink it to the remote, I don't have an implementation
# of RemoteUnixPath that could use something like sftp to
# allow direct execution of file operations on a remote path
# from a local python representation of that class so it is
# too big to bite off right now

#+name: deploy-ontology-file
#+begin_src bash
function apinat-remote-operations () {
    local PATH_SOURCE="${1}"
    local PATH_TARGET="${2}"
    local PATH_LINK="${3}"
    local FILE_NAME_TTL=$(basename -- "${PATH_TTL}")
    local DIR_LINK="$(dirname "${PATH_LINK}")"
    local LINK_TARGET="$(realpath -m --relative-to="${DIR_LINK}" "${PATH_TARGET}")"
    mkdir -p "$(dirname "${PATH_TARGET}")"
    chown nginx:nginx "${PATH_SOURCE}"
    mv "${PATH_SOURCE}" "${PATH_TARGET}"
    unlink "${PATH_LINK}"
    ln -s "${LINK_TARGET}" "${PATH_LINK}"
}

function apinat-deploy-from-ttl () {
    # TODO loop over positional argument paths, but retain a single ssh command
    local PATH_TTL="${1}"  # FIXME careful with this, never allow a user to set the source path
    local DATE=$(date +%s)  # FIXME source from the ontology directly? better to spend time implementing OntResIriWrite
    local HOST_APINAT_ONTOLOGY=cassava
    local FILE_NAME_TTL=$(basename -- "${PATH_TTL}")
    local NAME_TTL="${FILE_NAME_TTL%.*}"
    local PATH_REMOTE_TARGET_BASE=/var/www/sparc/ApiNATOMY/ontologies/
    local VERSION_PATH="${NAME_TTL}/${DATE}/${FILE_NAME_TTL}"
    local PATH_REMOTE_SOURCE="/tmp/${FILE_NAME_TTL}"
    local PATH_REMOTE_TARGET="${PATH_REMOTE_TARGET_BASE}${VERSION_PATH}"
    local PATH_REMOTE_LINK="${PATH_REMOTE_TARGET_BASE}${FILE_NAME_TTL}"

    # FIXME also notify host for sudo
    local SUDO_OR_SU='$(command -v sudo 1>& 2 && echo sudo ${0} -c || { echo For su on ${HOSTNAME} 1>& 2; echo su -c; })'

    # TODO ensure that apinat-remote-operations is defined
    rsync --rsh ssh "${PATH_TTL}" ${HOST_APINAT_ONTOLOGY}:"${PATH_REMOTE_SOURCE}"
    ssh -t ${HOST_APINAT_ONTOLOGY} "${SUDO_OR_SU} '$(typeset -f apinat-remote-operations); apinat-remote-operations \
\"${PATH_REMOTE_SOURCE}\" \
\"${PATH_REMOTE_TARGET}\" \
\"${PATH_REMOTE_LINK}\"'"
}
#+end_src

Check [[https://cassava.ucsd.edu/ApiNATOMY/ontologies/]] for success if needed.
# [[tramp:/ssh:cassava|sudo:cassava:/var/www/sparc/ApiNATOMY/ontologies/sparc-data.ttl]]
** Load and deploy graph
Then run
[[file:~/git/pyontutils/nifstd/scigraph/README.org::run-load-deploy-graph-sparc-data][run-load-deploy-graph-sparc-data]]
to load and deploy in one shot.

An example run is
#+begin_src bash
~/git/pyontutils/nifstd/scigraph/bin/run-load-graph-sparc-data
~/git/pyontutils/nifstd/scigraph/bin/run-deploy-graph-sparc-data
#+end_src
# TODO consider ob-screen ... for cases like this
# where we aren't really writing bash so much as just
# running commands
** Review query output
[[http://ontology.neuinfo.org/trees/sparc/dynamic/demos/apinat/somas][All somas]]
[[http://ontology.neuinfo.org/trees/sparc/dynamic/demos/apinat/soma-processes][Soma processes]]
[[http://ontology.neuinfo.org/trees/sparc/simple/dynamic/demos/apinat/soma-processes][Soma processes simple]]
* Dynamic cypher queries
:PROPERTIES:
:visibility: folded
:END:
NOTE: this section contains temporary instructions.
This should really be done on a development instance of data services.
Sometimes it is faster to edit [[tramp:/ssh:aws-scigraph-data-scigraph:services.yaml]] directly.
Use the following command to restart services to load the updated dynamic queries.
#+begin_src bash :results none
ssh aws-scigraph-data sudo systemctl restart scigraph
#+end_src
When you have a query working as desired add it or update it in
[[file:../resources/scigraph/cypher-resources.yaml][cypher resources]].
# TODO need that local/remote git link ...
See also [[file:../../pyontutils/nifstd/scigraph/README.org::#sparc-data-services-build-deploy][data services build and deploy]].
* Add new ApiNATOMY model to SciGraph load
Edit [[file:../resources/scigraph/ontologies-sparc-data.yaml][ontologies-sparc-data.yaml]].
To add a new entry that looks like the following. Change the name =my-model.ttl=
to match the name of the file that you scp to cassava.
#+begin_src yaml
  - url: https://localhost/ApiNATOMY/ontologies/my-model.ttl
    reasonerConfiguration:
      factory: org.semanticweb.elk.owlapi.ElkReasonerFactory
      addDirectInferredEdges: true
      removeUnsatisfiableClasses: true
#+end_src
* ApiNATOMY model server specification
:PROPERTIES:
:visibility: folded
:END:
** Intro
While an ApiNATOMY server has been on the roadmap for some time, there have not been
clear requirements and use cases to drive the development in a way that is productive.
As the conversion of ApiNATOMY models to RDF has progressed, some of the requirements
and use cases have presented themselves and helped to solidify a set of initial use cases.
The need to integrate knowledge represented in ApiNATOMY into the larger linked data space
provides some initial requirements which are the that the server be able to provide persistent
and resolvable identifiers for ApiNATOMY models, and that it be able to provide high granularity
access to the version history of these models. In addition, we are ultimately aiming for
the server to be able to automatically convert input models or spreadsheets into generated
models and resource maps. We have mapped out three phases for arriving at this end goal.
The first phase is to be able to resolve input models, the second is to be able to upload
and link the generated model and resource map and track which input model they came from.
These two will address our primary short-term needs.

To accomplish this, the plan is to use git (via GitHub) as the primary datastore for the models.
This will allow us to leverage the significant existing infrastructure around GitHub for version
control, collaboration, review, content hosting, and backup. In front of this there will be a
server that provides resolvable persistent identifiers for ApiNATOMY models so that the identifiers
appearing in the linked data graphs will be resolvable and interoperable with the rest of the
NIF-Ontology search and discovery tooling.

In the future as part of the third phase we can work towards automating the conversion of input models,
and it might also be possible to have the server automatically convert and serve the RDF version of the
models as well.

A brief outline of the initial requirements needed to meet the needs of the RDF conversion pipeline
are documented below.
** Architecture diagram
[[file:./images/apinatomy-server-diagram.png]]
Legend.
| Solid lines         | initial  |
| Dashed lines        | soon     |
| Dotted lines        | later    |
| Dashed dotted lines | dataflow |
** https by default
** url structure
*** apinatomy.org
alternately https://uri.apinatomy.org
**** /uris/models/{model-id}.{ext}
how to deal with json/ttl and model, generated, map
**** /uris/models/{model-id}/ids/{local-id}
**** /uris/readable/{string}
**** /uris/elements/{string}
** transformed models/copies need to be able to point back to the exact commit
for deposition on blackfynn, export to scigraph, etc.
the source model hash needs to be separat
** Serve the JSONLD context
** return authoring metadata
** store the source model
** have endpoint for resource-map and generated
** overlap with loading in the client
*** load all formats from local
*** google sheets import
*** load from a url
